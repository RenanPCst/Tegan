<div id="IOPage1_13" data-tchmi-type="TcHmi.Controls.System.TcHmiContent" data-tchmi-top="0" data-tchmi-left="0" data-tchmi-width="980" data-tchmi-height="1080">


<div id="EL1904ResetPushButton_47" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="286" data-tchmi-left-unit="px" data-tchmi-top="24" data-tchmi-top-unit="px" data-tchmi-width="540" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="Box 1 : AL1333 | IO-Link master with EtherCAT interface" data-tchmi-text-font-weight="Bold">
</div>
<div id="EL1904EStopChannel1_716" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="327" data-tchmi-left-unit="px" data-tchmi-top="96" data-tchmi-top-unit="px" data-tchmi-width="298" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="%s%PLC1.GVL_IO.sAL1333Box1Status%/s%">

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%s%PLC1.GVL_IO.nAL1333Box1State%/s%",
    "actions": [
      {
        "objectType": "SwitchCase",
        "active": true,
        "compare": {
          "objectType": "Symbol",
          "valueType": "tchmi:general#/definitions/UINT",
          "symbolExpression": "%s%PLC1.GVL_IO.nAL1333Box1State%/s%"
        },
        "cases": [
          {
            "caseValue": {
              "objectType": "StaticValue",
              "valueType": "tchmi:general#/definitions/UINT",
              "value": 8
            },
            "actions": [
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%s%PLC1.GVL_IO.sAL1333Box1Status%/s%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/String",
                  "value": "Operational"
                },
                "asyncWait": true
              },
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%s%PLC1.GVL_IO.bAL1333Box1State%/s%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/BOOL",
                  "value": true
                },
                "asyncWait": true
              }
            ]
          },
          {
            "caseValue": {
              "objectType": "StaticValue",
              "valueType": "tchmi:general#/definitions/UINT",
              "value": 4
            },
            "actions": [
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%s%PLC1.GVL_IO.sAL1333Box1Status%/s%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/String",
                  "value": "SAFE_OP"
                },
                "asyncWait": true
              },
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%s%PLC1.GVL_IO.bAL1333Box1State%/s%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/BOOL",
                  "value": false
                },
                "asyncWait": true
              }
            ]
          },
          {
            "caseValue": {
              "objectType": "StaticValue",
              "valueType": "tchmi:general#/definitions/UINT",
              "value": 3
            },
            "actions": [
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%s%PLC1.GVL_IO.sAL1333Box1Status%/s%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/String",
                  "value": "BOOT"
                },
                "asyncWait": true
              },
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%s%PLC1.GVL_IO.bAL1333Box1State%/s%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/BOOL",
                  "value": false
                },
                "asyncWait": true
              }
            ]
          },
          {
            "caseValue": {
              "objectType": "StaticValue",
              "valueType": "tchmi:general#/definitions/UINT",
              "value": 2
            },
            "actions": [
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%s%PLC1.GVL_IO.sAL1333Box1Status%/s%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/String",
                  "value": "PREOP"
                },
                "asyncWait": true
              },
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%s%PLC1.GVL_IO.bAL1333Box1State%/s%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/BOOL",
                  "value": false
                },
                "asyncWait": true
              }
            ]
          },
          {
            "caseValue": {
              "objectType": "StaticValue",
              "valueType": "tchmi:general#/definitions/UINT",
              "value": 1
            },
            "actions": [
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%s%PLC1.GVL_IO.sAL1333Box1Status%/s%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/String",
                  "value": "INIT"
                },
                "asyncWait": true
              },
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%s%PLC1.GVL_IO.bAL1333Box1State%/s%",
                "value": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/BOOL",
                  "value": false
                },
                "asyncWait": true
              }
            ]
          }
        ],
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>
<div id="TcHmiStateImage_AL13333" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiStateImage" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="286" data-tchmi-left-unit="px" data-tchmi-top="96" data-tchmi-top-unit="px" data-tchmi-width="26" data-tchmi-width-unit="px" data-tchmi-fallback-image="Resources/Custom/Images/Controls/RedIndicator.svg" data-tchmi-state="%s%PLC1.GVL_IO.bAL1333Box1State%/s%">
<script data-tchmi-target-attribute="data-tchmi-state-list" type="application/json">
[
  {
    "state": true,
    "stateIcon": "Resources/Custom/Images/Controls/GreenIndicator.svg"
  },
  {
    "state": false,
    "stateIcon": "Resources/Custom/Images/Controls/RedIndicator.svg"
  }
]
</script>
</div>
<div id="EL1904EStopChannel1_717" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="65" data-tchmi-left-unit="px" data-tchmi-top="599" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="State Ch. 1">
</div>
<div id="EL1904EStopChannel1_718" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="65" data-tchmi-left-unit="px" data-tchmi-top="655" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="State Ch. 2">
</div>
<div id="EL1904EStopChannel1_719" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="65" data-tchmi-left-unit="px" data-tchmi-top="711" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="State Ch. 3">
</div>
<div id="EL1904EStopChannel1_720" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="65" data-tchmi-left-unit="px" data-tchmi-top="767" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="State Ch. 4">
</div>
<div id="EL1904EStopChannel1_721" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="65" data-tchmi-left-unit="px" data-tchmi-top="823" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="State Ch. 5">
</div>
<div id="TcHmiTextblock_958" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="171" data-tchmi-height-unit="px" data-tchmi-left="286" data-tchmi-left-unit="px" data-tchmi-text="The IFM AL1333 is an 8-port IO-Link master designed for reliable communication between sensors, actuators, and the PLC via EtherCAT. It provides real-time monitoring of each channel’s state and qualifier, enabling quick diagnostics and fault detection. With high protection ratings (IP65/IP67/IP69K), it is suitable for demanding industrial environments, ensuring stable data exchange and clear visual feedback through integrated status indicators." data-tchmi-top="160" data-tchmi-top-unit="px" data-tchmi-width="664" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-font-size="18" data-tchmi-text-font-size-unit="px" data-tchmi-text-font-family="Tahoma">
</div>


<div id="TcHmi_Controls_Beckhoff_TcHmiImage_188" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiImage" data-tchmi-height="551" data-tchmi-height-unit="px" data-tchmi-left="-144" data-tchmi-left-unit="px" data-tchmi-src="Resources/Custom/Images/IO Images/al1333_transparente.png" data-tchmi-top="10" data-tchmi-top-unit="px" data-tchmi-width="551" data-tchmi-width-unit="px">
</div>
<div id="EL1904EStopChannel1_736" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="65" data-tchmi-left-unit="px" data-tchmi-top="879" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="State Ch. 6">
</div>
<div id="EL1904EStopChannel1_737" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="65" data-tchmi-left-unit="px" data-tchmi-top="935" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="State Ch. 7">
</div>
<div id="EL1904EStopChannel1_738" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="65" data-tchmi-left-unit="px" data-tchmi-top="992" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="State Ch. 8">
</div>
<div id="TcHmiTextBox_StateIOLinkCh1" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="175" data-tchmi-left-unit="px" data-tchmi-top="599" data-tchmi-top-unit="px" data-tchmi-width="230" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="12" data-tchmi-text-font-family="Tahoma" data-tchmi-text="">

<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 170, 170, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%s%PLC1.GVL_IO.nAL1333Box1State%/s%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "(function () {",
          "  // Channel index (0-based). Adjust as needed for each IO-Link channel.",
          "  var ch = 0;                  ",
          "  // ID of the target HMI TextBox control to display the decoded state.",
          "  var ctrlId = 'TcHmiTextBox_StateIOLinkCh1';    ",
          "",
          "  // Read the USINT state value from the PLC for the specified IO-Link channel.",
          "  TcHmi.Symbol.readEx2('%s%PLC1.GVL_IO.stAL1333info::nStateIOLink[' + ch + ']%/s%', function (d) {",
          "    // Exit if there was an error reading the symbol.",
          "    if (d.error !== TcHmi.Errors.NONE) return;",
          "",
          "    // Ensure the value is treated as a number.",
          "    var v = Number(d.value);",
          "    // Extract bits 3..0 for the Port State.",
          "    var portState = v & 0x0F;        ",
          "    // Extract bits 7..4 for the Error Code.",
          "    var errCode   = (v >> 4) & 0x0F; ",
          "",
          "    // Translate Port State numeric code to human-readable text.",
          "    function portStateText(ps) {",
          "      switch (ps) {",
          "        case 0x0: return 'Deactivated';",
          "        case 0x1: return 'Digital Input';",
          "        case 0x2: return 'Digital Output';",
          "        case 0x3: return 'Operate';",
          "        case 0x4: return 'STOP';",
          "        case 0x5: return 'PreOP';",
          "        default:  return 'PortState 0x' + ps.toString(16).toUpperCase();",
          "      }",
          "    }",
          "    // Translate Error Code numeric value to human-readable text.",
          "    function errorText(ec) {",
          "      switch (ec) {",
          "        case 0x0: return 'No error';",
          "        case 0x3: return 'Invalid Device ID';",
          "        case 0x4: return 'Invalid Vendor ID';",
          "        case 0x7: return 'Invalid cycle time';",
          "        case 0x8: return 'Invalid PD In length';",
          "        case 0x9: return 'Invalid PD Out length';",
          "        case 0xA: return 'No device detected';",
          "        case 0xB: return 'Supply low / short';",
          "        case 0xD: return 'Unspecified error';",
          "        default:  return 'Error 0x' + ec.toString(16).toUpperCase();",
          "      }",
          "    }",
          "",
          "    // Create the full text to show: \"State: <state> | <error> [0xHEX]\"",
          "    var text = ' ' + portStateText(portState) + ' | ' + errorText(errCode) +",
          "               ' [0x' + v.toString(16).toUpperCase().padStart(2,'0') + ']';",
          "",
          "    // Get the HMI control by its ID and update the displayed text.",
          "    var ctrl = TcHmi.Controls.get(ctrlId);",
          "    if (ctrl && typeof ctrl.setText === 'function') ctrl.setText(text);",
          "",
          "    // Logical LED in the PLC: true only when in \"Operate\" state and no error.",
          "    var ok = (portState === 0x3 && errCode === 0x0);",
          "    TcHmi.Symbol.writeEx2('%s%PLC1.GVL_IO.stAL1333info::bStateIOLink[' + ch + ']%/s%', ok, function(){});",
          "  });",
          "})();"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(100, 100, 100, 1)"
}
</script>
</div>
<div id="TcHmiTextBox_StateIOLinkCh2" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="175" data-tchmi-left-unit="px" data-tchmi-top="655" data-tchmi-top-unit="px" data-tchmi-width="230" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="12" data-tchmi-text-font-family="Tahoma">
<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 170, 170, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%s%PLC1.GVL_IO.stAL1333info::nStateIOLink[1]%/s%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "(function () {",
          "  // Channel index (0-based). Adjust as needed for each IO-Link channel.",
          "  var ch = 1;                  ",
          "  // ID of the target HMI TextBox control to display the decoded state.",
          "  var ctrlId = 'TcHmiTextBox_StateIOLinkCh2';    ",
          "",
          "  // Read the USINT state value from the PLC for the specified IO-Link channel.",
          "  TcHmi.Symbol.readEx2('%s%PLC1.GVL_IO.stAL1333info::nStateIOLink[' + ch + ']%/s%', function (d) {",
          "    // Exit if there was an error reading the symbol.",
          "    if (d.error !== TcHmi.Errors.NONE) return;",
          "",
          "    // Ensure the value is treated as a number.",
          "    var v = Number(d.value);",
          "    // Extract bits 3..0 for the Port State.",
          "    var portState = v & 0x0F;        ",
          "    // Extract bits 7..4 for the Error Code.",
          "    var errCode   = (v >> 4) & 0x0F; ",
          "",
          "    // Translate Port State numeric code to human-readable text.",
          "    function portStateText(ps) {",
          "      switch (ps) {",
          "        case 0x0: return 'Deactivated';",
          "        case 0x1: return 'Digital Input';",
          "        case 0x2: return 'Digital Output';",
          "        case 0x3: return 'Operate';",
          "        case 0x4: return 'STOP';",
          "        case 0x5: return 'PreOP';",
          "        default:  return 'PortState 0x' + ps.toString(16).toUpperCase();",
          "      }",
          "    }",
          "    // Translate Error Code numeric value to human-readable text.",
          "    function errorText(ec) {",
          "      switch (ec) {",
          "        case 0x0: return 'No error';",
          "        case 0x3: return 'Invalid Device ID';",
          "        case 0x4: return 'Invalid Vendor ID';",
          "        case 0x7: return 'Invalid cycle time';",
          "        case 0x8: return 'Invalid PD In length';",
          "        case 0x9: return 'Invalid PD Out length';",
          "        case 0xA: return 'No device detected';",
          "        case 0xB: return 'Supply low / short';",
          "        case 0xD: return 'Unspecified error';",
          "        default:  return 'Error 0x' + ec.toString(16).toUpperCase();",
          "      }",
          "    }",
          "",
          "    // Create the full text to show: \"State: <state> | <error> [0xHEX]\"",
          "    var text = ' ' + portStateText(portState) + ' | ' + errorText(errCode) +",
          "               ' [0x' + v.toString(16).toUpperCase().padStart(2,'0') + ']';",
          "",
          "    // Get the HMI control by its ID and update the displayed text.",
          "    var ctrl = TcHmi.Controls.get(ctrlId);",
          "    if (ctrl && typeof ctrl.setText === 'function') ctrl.setText(text);",
          "",
          "    // Logical LED in the PLC: true only when in \"Operate\" state and no error.",
          "    var ok = (portState === 0x3 && errCode === 0x0);",
          "    TcHmi.Symbol.writeEx2('%s%PLC1.GVL_IO.stAL1333info::bStateIOLink[' + ch + ']%/s%', ok, function(){});",
          "  });",
          "})();"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(100, 100, 100, 1)"
}
</script>
</div>
<div id="TcHmiTextBox_StateIOLinkCh3" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="175" data-tchmi-left-unit="px" data-tchmi-top="711" data-tchmi-top-unit="px" data-tchmi-width="230" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="12" data-tchmi-text-font-family="Tahoma">
<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 170, 170, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%s%PLC1.GVL_IO.stAL1333info::nStateIOLink[2]%/s%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "(function () {",
          "  // Channel index (0-based). Adjust as needed for each IO-Link channel.",
          "  var ch = 2;                  ",
          "  // ID of the target HMI TextBox control to display the decoded state.",
          "  var ctrlId = 'TcHmiTextBox_StateIOLinkCh3';    ",
          "",
          "  // Read the USINT state value from the PLC for the specified IO-Link channel.",
          "  TcHmi.Symbol.readEx2('%s%PLC1.GVL_IO.stAL1333info::nStateIOLink[' + ch + ']%/s%', function (d) {",
          "    // Exit if there was an error reading the symbol.",
          "    if (d.error !== TcHmi.Errors.NONE) return;",
          "",
          "    // Ensure the value is treated as a number.",
          "    var v = Number(d.value);",
          "    // Extract bits 3..0 for the Port State.",
          "    var portState = v & 0x0F;        ",
          "    // Extract bits 7..4 for the Error Code.",
          "    var errCode   = (v >> 4) & 0x0F; ",
          "",
          "    // Translate Port State numeric code to human-readable text.",
          "    function portStateText(ps) {",
          "      switch (ps) {",
          "        case 0x0: return 'Deactivated';",
          "        case 0x1: return 'Digital Input';",
          "        case 0x2: return 'Digital Output';",
          "        case 0x3: return 'Operate';",
          "        case 0x4: return 'STOP';",
          "        case 0x5: return 'PreOP';",
          "        default:  return 'PortState 0x' + ps.toString(16).toUpperCase();",
          "      }",
          "    }",
          "    // Translate Error Code numeric value to human-readable text.",
          "    function errorText(ec) {",
          "      switch (ec) {",
          "        case 0x0: return 'No error';",
          "        case 0x3: return 'Invalid Device ID';",
          "        case 0x4: return 'Invalid Vendor ID';",
          "        case 0x7: return 'Invalid cycle time';",
          "        case 0x8: return 'Invalid PD In length';",
          "        case 0x9: return 'Invalid PD Out length';",
          "        case 0xA: return 'No device detected';",
          "        case 0xB: return 'Supply low / short';",
          "        case 0xD: return 'Unspecified error';",
          "        default:  return 'Error 0x' + ec.toString(16).toUpperCase();",
          "      }",
          "    }",
          "",
          "    // Create the full text to show: \"State: <state> | <error> [0xHEX]\"",
          "    var text = ' ' + portStateText(portState) + ' | ' + errorText(errCode) +",
          "               ' [0x' + v.toString(16).toUpperCase().padStart(2,'0') + ']';",
          "",
          "    // Get the HMI control by its ID and update the displayed text.",
          "    var ctrl = TcHmi.Controls.get(ctrlId);",
          "    if (ctrl && typeof ctrl.setText === 'function') ctrl.setText(text);",
          "",
          "    // Logical LED in the PLC: true only when in \"Operate\" state and no error.",
          "    var ok = (portState === 0x3 && errCode === 0x0);",
          "    TcHmi.Symbol.writeEx2('%s%PLC1.GVL_IO.stAL1333info::bStateIOLink[' + ch + ']%/s%', ok, function(){});",
          "  });",
          "})();"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(100, 100, 100, 1)"
}
</script>
</div>
<div id="TcHmiTextBox_StateIOLinkCh4" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="175" data-tchmi-left-unit="px" data-tchmi-top="767" data-tchmi-top-unit="px" data-tchmi-width="230" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="12" data-tchmi-text-font-family="Tahoma">
<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 170, 170, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%s%PLC1.GVL_IO.stAL1333info::nStateIOLink[3]%/s%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "(function () {",
          "  // Channel index (0-based). Adjust as needed for each IO-Link channel.",
          "  var ch = 3;                  ",
          "  // ID of the target HMI TextBox control to display the decoded state.",
          "  var ctrlId = 'TcHmiTextBox_StateIOLinkCh4';    ",
          "",
          "  // Read the USINT state value from the PLC for the specified IO-Link channel.",
          "  TcHmi.Symbol.readEx2('%s%PLC1.GVL_IO.stAL1333info::nStateIOLink[' + ch + ']%/s%', function (d) {",
          "    // Exit if there was an error reading the symbol.",
          "    if (d.error !== TcHmi.Errors.NONE) return;",
          "",
          "    // Ensure the value is treated as a number.",
          "    var v = Number(d.value);",
          "    // Extract bits 3..0 for the Port State.",
          "    var portState = v & 0x0F;        ",
          "    // Extract bits 7..4 for the Error Code.",
          "    var errCode   = (v >> 4) & 0x0F; ",
          "",
          "    // Translate Port State numeric code to human-readable text.",
          "    function portStateText(ps) {",
          "      switch (ps) {",
          "        case 0x0: return 'Deactivated';",
          "        case 0x1: return 'Digital Input';",
          "        case 0x2: return 'Digital Output';",
          "        case 0x3: return 'Operate';",
          "        case 0x4: return 'STOP';",
          "        case 0x5: return 'PreOP';",
          "        default:  return 'PortState 0x' + ps.toString(16).toUpperCase();",
          "      }",
          "    }",
          "    // Translate Error Code numeric value to human-readable text.",
          "    function errorText(ec) {",
          "      switch (ec) {",
          "        case 0x0: return 'No error';",
          "        case 0x3: return 'Invalid Device ID';",
          "        case 0x4: return 'Invalid Vendor ID';",
          "        case 0x7: return 'Invalid cycle time';",
          "        case 0x8: return 'Invalid PD In length';",
          "        case 0x9: return 'Invalid PD Out length';",
          "        case 0xA: return 'No device detected';",
          "        case 0xB: return 'Supply low / short';",
          "        case 0xD: return 'Unspecified error';",
          "        default:  return 'Error 0x' + ec.toString(16).toUpperCase();",
          "      }",
          "    }",
          "",
          "    // Create the full text to show: \"State: <state> | <error> [0xHEX]\"",
          "    var text = ' ' + portStateText(portState) + ' | ' + errorText(errCode) +",
          "               ' [0x' + v.toString(16).toUpperCase().padStart(2,'0') + ']';",
          "",
          "    // Get the HMI control by its ID and update the displayed text.",
          "    var ctrl = TcHmi.Controls.get(ctrlId);",
          "    if (ctrl && typeof ctrl.setText === 'function') ctrl.setText(text);",
          "",
          "    // Logical LED in the PLC: true only when in \"Operate\" state and no error.",
          "    var ok = (portState === 0x3 && errCode === 0x0);",
          "    TcHmi.Symbol.writeEx2('%s%PLC1.GVL_IO.stAL1333info::bStateIOLink[' + ch + ']%/s%', ok, function(){});",
          "  });",
          "})();"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(100, 100, 100, 1)"
}
</script>
</div>
<div id="TcHmiTextBox_StateIOLinkCh5" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="175" data-tchmi-left-unit="px" data-tchmi-top="823" data-tchmi-top-unit="px" data-tchmi-width="230" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="12" data-tchmi-text-font-family="Tahoma">
<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 170, 170, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%s%PLC1.GVL_IO.stAL1333info::nStateIOLink[4]%/s%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "(function () {",
          "  // Channel index (0-based). Adjust as needed for each IO-Link channel.",
          "  var ch = 4;                  ",
          "  // ID of the target HMI TextBox control to display the decoded state.",
          "  var ctrlId = 'TcHmiTextBox_StateIOLinkCh5';    ",
          "",
          "  // Read the USINT state value from the PLC for the specified IO-Link channel.",
          "  TcHmi.Symbol.readEx2('%s%PLC1.GVL_IO.stAL1333info::nStateIOLink[' + ch + ']%/s%', function (d) {",
          "    // Exit if there was an error reading the symbol.",
          "    if (d.error !== TcHmi.Errors.NONE) return;",
          "",
          "    // Ensure the value is treated as a number.",
          "    var v = Number(d.value);",
          "    // Extract bits 3..0 for the Port State.",
          "    var portState = v & 0x0F;        ",
          "    // Extract bits 7..4 for the Error Code.",
          "    var errCode   = (v >> 4) & 0x0F; ",
          "",
          "    // Translate Port State numeric code to human-readable text.",
          "    function portStateText(ps) {",
          "      switch (ps) {",
          "        case 0x0: return 'Deactivated';",
          "        case 0x1: return 'Digital Input';",
          "        case 0x2: return 'Digital Output';",
          "        case 0x3: return 'Operate';",
          "        case 0x4: return 'STOP';",
          "        case 0x5: return 'PreOP';",
          "        default:  return 'PortState 0x' + ps.toString(16).toUpperCase();",
          "      }",
          "    }",
          "    // Translate Error Code numeric value to human-readable text.",
          "    function errorText(ec) {",
          "      switch (ec) {",
          "        case 0x0: return 'No error';",
          "        case 0x3: return 'Invalid Device ID';",
          "        case 0x4: return 'Invalid Vendor ID';",
          "        case 0x7: return 'Invalid cycle time';",
          "        case 0x8: return 'Invalid PD In length';",
          "        case 0x9: return 'Invalid PD Out length';",
          "        case 0xA: return 'No device detected';",
          "        case 0xB: return 'Supply low / short';",
          "        case 0xD: return 'Unspecified error';",
          "        default:  return 'Error 0x' + ec.toString(16).toUpperCase();",
          "      }",
          "    }",
          "",
          "    // Create the full text to show: \"State: <state> | <error> [0xHEX]\"",
          "    var text = ' ' + portStateText(portState) + ' | ' + errorText(errCode) +",
          "               ' [0x' + v.toString(16).toUpperCase().padStart(2,'0') + ']';",
          "",
          "    // Get the HMI control by its ID and update the displayed text.",
          "    var ctrl = TcHmi.Controls.get(ctrlId);",
          "    if (ctrl && typeof ctrl.setText === 'function') ctrl.setText(text);",
          "",
          "    // Logical LED in the PLC: true only when in \"Operate\" state and no error.",
          "    var ok = (portState === 0x3 && errCode === 0x0);",
          "    TcHmi.Symbol.writeEx2('%s%PLC1.GVL_IO.stAL1333info::bStateIOLink[' + ch + ']%/s%', ok, function(){});",
          "  });",
          "})();"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(100, 100, 100, 1)"
}
</script>
</div>
<div id="TcHmiTextBox_StateIOLinkCh6" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="175" data-tchmi-left-unit="px" data-tchmi-top="879" data-tchmi-top-unit="px" data-tchmi-width="230" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="12" data-tchmi-text-font-family="Tahoma">
<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 170, 170, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%s%PLC1.GVL_IO.stAL1333info::nStateIOLink[5]%/s%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "(function () {",
          "  // Channel index (0-based). Adjust as needed for each IO-Link channel.",
          "  var ch = 5;                  ",
          "  // ID of the target HMI TextBox control to display the decoded state.",
          "  var ctrlId = 'TcHmiTextBox_StateIOLinkCh6';    ",
          "",
          "  // Read the USINT state value from the PLC for the specified IO-Link channel.",
          "  TcHmi.Symbol.readEx2('%s%PLC1.GVL_IO.stAL1333info::nStateIOLink[' + ch + ']%/s%', function (d) {",
          "    // Exit if there was an error reading the symbol.",
          "    if (d.error !== TcHmi.Errors.NONE) return;",
          "",
          "    // Ensure the value is treated as a number.",
          "    var v = Number(d.value);",
          "    // Extract bits 3..0 for the Port State.",
          "    var portState = v & 0x0F;        ",
          "    // Extract bits 7..4 for the Error Code.",
          "    var errCode   = (v >> 4) & 0x0F; ",
          "",
          "    // Translate Port State numeric code to human-readable text.",
          "    function portStateText(ps) {",
          "      switch (ps) {",
          "        case 0x0: return 'Deactivated';",
          "        case 0x1: return 'Digital Input';",
          "        case 0x2: return 'Digital Output';",
          "        case 0x3: return 'Operate';",
          "        case 0x4: return 'STOP';",
          "        case 0x5: return 'PreOP';",
          "        default:  return 'PortState 0x' + ps.toString(16).toUpperCase();",
          "      }",
          "    }",
          "    // Translate Error Code numeric value to human-readable text.",
          "    function errorText(ec) {",
          "      switch (ec) {",
          "        case 0x0: return 'No error';",
          "        case 0x3: return 'Invalid Device ID';",
          "        case 0x4: return 'Invalid Vendor ID';",
          "        case 0x7: return 'Invalid cycle time';",
          "        case 0x8: return 'Invalid PD In length';",
          "        case 0x9: return 'Invalid PD Out length';",
          "        case 0xA: return 'No device detected';",
          "        case 0xB: return 'Supply low / short';",
          "        case 0xD: return 'Unspecified error';",
          "        default:  return 'Error 0x' + ec.toString(16).toUpperCase();",
          "      }",
          "    }",
          "",
          "    // Create the full text to show: \" <state> | <error> [0xHEX]\"",
          "    var text = ' ' + portStateText(portState) + ' | ' + errorText(errCode) +",
          "               ' [0x' + v.toString(16).toUpperCase().padStart(2,'0') + ']';",
          "",
          "    // Get the HMI control by its ID and update the displayed text.",
          "    var ctrl = TcHmi.Controls.get(ctrlId);",
          "    if (ctrl && typeof ctrl.setText === 'function') ctrl.setText(text);",
          "",
          "    // Logical LED in the PLC: true only when in \"Operate\" state and no error.",
          "    var ok = (portState === 0x3 && errCode === 0x0);",
          "    TcHmi.Symbol.writeEx2('%s%PLC1.GVL_IO.stAL1333info::bStateIOLink[' + ch + ']%/s%', ok, function(){});",
          "  });",
          "})();"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(100, 100, 100, 1)"
}
</script>
</div>
<div id="TcHmiTextBox_StateIOLinkCh7" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="175" data-tchmi-left-unit="px" data-tchmi-top="935" data-tchmi-top-unit="px" data-tchmi-width="230" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="12" data-tchmi-text-font-family="Tahoma">
<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 170, 170, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%s%PLC1.GVL_IO.stAL1333info::nStateIOLink[6]%/s%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "(function () {",
          "  // Channel index (0-based). Adjust as needed for each IO-Link channel.",
          "  var ch = 6;                  ",
          "  // ID of the target HMI TextBox control to display the decoded state.",
          "  var ctrlId = 'TcHmiTextBox_StateIOLinkCh7';    ",
          "",
          "  // Read the USINT state value from the PLC for the specified IO-Link channel.",
          "  TcHmi.Symbol.readEx2('%s%PLC1.GVL_IO.stAL1333info::nStateIOLink[' + ch + ']%/s%', function (d) {",
          "    // Exit if there was an error reading the symbol.",
          "    if (d.error !== TcHmi.Errors.NONE) return;",
          "",
          "    // Ensure the value is treated as a number.",
          "    var v = Number(d.value);",
          "    // Extract bits 3..0 for the Port State.",
          "    var portState = v & 0x0F;        ",
          "    // Extract bits 7..4 for the Error Code.",
          "    var errCode   = (v >> 4) & 0x0F; ",
          "",
          "    // Translate Port State numeric code to human-readable text.",
          "    function portStateText(ps) {",
          "      switch (ps) {",
          "        case 0x0: return 'Deactivated';",
          "        case 0x1: return 'Digital Input';",
          "        case 0x2: return 'Digital Output';",
          "        case 0x3: return 'Operate';",
          "        case 0x4: return 'STOP';",
          "        case 0x5: return 'PreOP';",
          "        default:  return 'PortState 0x' + ps.toString(16).toUpperCase();",
          "      }",
          "    }",
          "    // Translate Error Code numeric value to human-readable text.",
          "    function errorText(ec) {",
          "      switch (ec) {",
          "        case 0x0: return 'No error';",
          "        case 0x3: return 'Invalid Device ID';",
          "        case 0x4: return 'Invalid Vendor ID';",
          "        case 0x7: return 'Invalid cycle time';",
          "        case 0x8: return 'Invalid PD In length';",
          "        case 0x9: return 'Invalid PD Out length';",
          "        case 0xA: return 'No device detected';",
          "        case 0xB: return 'Supply low / short';",
          "        case 0xD: return 'Unspecified error';",
          "        default:  return 'Error 0x' + ec.toString(16).toUpperCase();",
          "      }",
          "    }",
          "",
          "    // Create the full text to show: \"State: <state> | <error> [0xHEX]\"",
          "    var text = ' ' + portStateText(portState) + ' | ' + errorText(errCode) +",
          "               ' [0x' + v.toString(16).toUpperCase().padStart(2,'0') + ']';",
          "",
          "    // Get the HMI control by its ID and update the displayed text.",
          "    var ctrl = TcHmi.Controls.get(ctrlId);",
          "    if (ctrl && typeof ctrl.setText === 'function') ctrl.setText(text);",
          "",
          "    // Logical LED in the PLC: true only when in \"Operate\" state and no error.",
          "    var ok = (portState === 0x3 && errCode === 0x0);",
          "    TcHmi.Symbol.writeEx2('%s%PLC1.GVL_IO.stAL1333info::bStateIOLink[' + ch + ']%/s%', ok, function(){});",
          "  });",
          "})();"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(100, 100, 100, 1)"
}
</script>
</div>
<div id="TcHmiTextBox_StateIOLinkCh8" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="175" data-tchmi-left-unit="px" data-tchmi-top="992" data-tchmi-top-unit="px" data-tchmi-width="230" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="12" data-tchmi-text-font-family="Tahoma">
<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 170, 170, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%s%PLC1.GVL_IO.stAL1333info::nStateIOLink[7]%/s%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "(function () {",
          "  // Channel index (0-based). Adjust as needed for each IO-Link channel.",
          "  var ch = 7;                  ",
          "  // ID of the target HMI TextBox control to display the decoded state.",
          "  var ctrlId = 'TcHmiTextBox_StateIOLinkCh8';    ",
          "",
          "  // Read the USINT state value from the PLC for the specified IO-Link channel.",
          "  TcHmi.Symbol.readEx2('%s%PLC1.GVL_IO.stAL1333info::nStateIOLink[' + ch + ']%/s%', function (d) {",
          "    // Exit if there was an error reading the symbol.",
          "    if (d.error !== TcHmi.Errors.NONE) return;",
          "",
          "    // Ensure the value is treated as a number.",
          "    var v = Number(d.value);",
          "    // Extract bits 3..0 for the Port State.",
          "    var portState = v & 0x0F;        ",
          "    // Extract bits 7..4 for the Error Code.",
          "    var errCode   = (v >> 4) & 0x0F; ",
          "",
          "    // Translate Port State numeric code to human-readable text.",
          "    function portStateText(ps) {",
          "      switch (ps) {",
          "        case 0x0: return 'Deactivated';",
          "        case 0x1: return 'Digital Input';",
          "        case 0x2: return 'Digital Output';",
          "        case 0x3: return 'Operate';",
          "        case 0x4: return 'STOP';",
          "        case 0x5: return 'PreOP';",
          "        default:  return 'PortState 0x' + ps.toString(16).toUpperCase();",
          "      }",
          "    }",
          "    // Translate Error Code numeric value to human-readable text.",
          "    function errorText(ec) {",
          "      switch (ec) {",
          "        case 0x0: return 'No error';",
          "        case 0x3: return 'Invalid Device ID';",
          "        case 0x4: return 'Invalid Vendor ID';",
          "        case 0x7: return 'Invalid cycle time';",
          "        case 0x8: return 'Invalid PD In length';",
          "        case 0x9: return 'Invalid PD Out length';",
          "        case 0xA: return 'No device detected';",
          "        case 0xB: return 'Supply low / short';",
          "        case 0xD: return 'Unspecified error';",
          "        default:  return 'Error 0x' + ec.toString(16).toUpperCase();",
          "      }",
          "    }",
          "",
          "    // Create the full text to show: \" <state> | <error> [0xHEX]\"",
          "    var text = ' ' + portStateText(portState) + ' | ' + errorText(errCode) +",
          "               ' [0x' + v.toString(16).toUpperCase().padStart(2,'0') + ']';",
          "",
          "    // Get the HMI control by its ID and update the displayed text.",
          "    var ctrl = TcHmi.Controls.get(ctrlId);",
          "    if (ctrl && typeof ctrl.setText === 'function') ctrl.setText(text);",
          "",
          "    // Logical LED in the PLC: true only when in \"Operate\" state and no error.",
          "    var ok = (portState === 0x3 && errCode === 0x0);",
          "    TcHmi.Symbol.writeEx2('%s%PLC1.GVL_IO.stAL1333info::bStateIOLink[' + ch + ']%/s%', ok, function(){});",
          "  });",
          "})();"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(100, 100, 100, 1)"
}
</script>
</div>
<div id="EL1904EStopChannel1_747" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="470" data-tchmi-left-unit="px" data-tchmi-top="599" data-tchmi-top-unit="px" data-tchmi-width="160" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="Qualifier IO-Link Ch. 1">
</div>
<div id="TcHmiTextBox_QalifierOLinkCh1" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="32" data-tchmi-height-unit="px" data-tchmi-left="640" data-tchmi-left-unit="px" data-tchmi-top="599" data-tchmi-top-unit="px" data-tchmi-width="320" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="12" data-tchmi-text-font-family="Tahoma">
<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 170, 170, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%s%PLC1.GVL_IO.stAL1333info::nQualifierIOLink[0]%/s%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "(function () {",
          "  // Channel index (0-based). Adjust for each IO-Link channel (0..7).",
          "  var ch = 0;                   ",
          "  // ID of the target HMI TextBox control to display the decoded qualifier info.",
          "  var ctrlId = 'TcHmiTextBox_QalifierOLinkCh1'; // Example: 'TcHmiTextBox_QualifierIOLinkCh1'",
          "",
          "  // Read the USINT qualifier value from the PLC for the specified IO-Link channel.",
          "  TcHmi.Symbol.readEx2('%s%PLC1.GVL_IO.stAL1333info::nQualifierIOLink[' + ch + ']%/s%', function (d) {",
          "    // Exit if there was an error reading the symbol.",
          "    if (d.error !== TcHmi.Errors.NONE) return;",
          "",
          "    // Ensure the value is treated as a number.",
          "    var q = Number(d.value);",
          "",
          "    // Decode individual bits according to IFM AL1333 manual (0xF101 register):",
          "    // Bit 0 (0x01) = DI4",
          "    var DI4  = (q & 0x01) !== 0;",
          "    // Bit 1 (0x02) = DI2",
          "    var DI2  = (q & 0x02) !== 0;",
          "    // Bit 3 (0x08) = PVO (Process Value Output valid)",
          "    var PVO  = (q & 0x08) !== 0;",
          "    // Bit 4 (0x10) = DACT (Port deactivated) - 0 means activated/usable",
          "    var DACT = (q & 0x10) !== 0;   ",
          "    // Bit 5 (0x20) = DA (Device available/detected)",
          "    var DA   = (q & 0x20) !== 0;   ",
          "    // Bit 6 (0x40) = PE (Port Error) - 1 means error present",
          "    var PE   = (q & 0x40) !== 0;   ",
          "    // Bit 7 (0x80) = PVI (Process Value Input valid)",
          "    var PVI  = (q & 0x80) !== 0;   ",
          "",
          "    // Build a descriptive string with hex code and interpreted flags.",
          "    var text =",
          "      'PQI 0x' + q.toString(16).toUpperCase().padStart(2,'0') +",
          "      ' | Dev:' + (DA ? 'Yes' : 'No') +",
          "      ' | Port:' + (DACT ? 'Deact' : 'Active') +",
          "      ' | Err:' + (PE ? 'Yes' : 'No') +",
          "      ' | PVO:' + (PVO ? 'Valid' : 'Invalid') +",
          "      ' | PVI:' + (PVI ? 'Valid' : 'Invalid') +",
          "      ' | DI2:' + (DI2 ? '1' : '0') +",
          "      ' | DI4:' + (DI4 ? '1' : '0');",
          "",
          "    // Update the HMI control text with the decoded qualifier data.",
          "    var ctrl = TcHmi.Controls.get(ctrlId);",
          "    if (ctrl && typeof ctrl.setText === 'function') ctrl.setText(text);",
          "",
          "    // Logical LED in the PLC:",
          "    // True only if a device is detected, port is active, no error, and either PVO or PVI is valid.",
          "    var ok = (DA && !DACT && !PE && (PVO || PVI));",
          "    TcHmi.Symbol.writeEx2('%s%PLC1.GVL_IO.stAL1333info::bQualifierIOLink[' + ch + ']%/s%', ok, function () {});",
          "  });",
          "})();",
          ""
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(100, 100, 100, 1)"
}
</script>
</div>
<div id="TcHmiTextBox_QalifierOLinkCh2" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="32" data-tchmi-height-unit="px" data-tchmi-left="640" data-tchmi-left-unit="px" data-tchmi-top="655" data-tchmi-top-unit="px" data-tchmi-width="320" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="12" data-tchmi-text-font-family="Tahoma">
<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 170, 170, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%s%PLC1.GVL_IO.stAL1333info::nQualifierIOLink[1]%/s%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "(function () {",
          "  // Channel index (0-based). Adjust for each IO-Link channel (0..7).",
          "  var ch = 1;                   ",
          "  // ID of the target HMI TextBox control to display the decoded qualifier info.",
          "  var ctrlId = 'TcHmiTextBox_QalifierOLinkCh2'; // Example: 'TcHmiTextBox_QualifierIOLinkCh1'",
          "",
          "  // Read the USINT qualifier value from the PLC for the specified IO-Link channel.",
          "  TcHmi.Symbol.readEx2('%s%PLC1.GVL_IO.stAL1333info::nQualifierIOLink[' + ch + ']%/s%', function (d) {",
          "    // Exit if there was an error reading the symbol.",
          "    if (d.error !== TcHmi.Errors.NONE) return;",
          "",
          "    // Ensure the value is treated as a number.",
          "    var q = Number(d.value);",
          "",
          "    // Decode individual bits according to IFM AL1333 manual (0xF101 register):",
          "    // Bit 0 (0x01) = DI4",
          "    var DI4  = (q & 0x01) !== 0;",
          "    // Bit 1 (0x02) = DI2",
          "    var DI2  = (q & 0x02) !== 0;",
          "    // Bit 3 (0x08) = PVO (Process Value Output valid)",
          "    var PVO  = (q & 0x08) !== 0;",
          "    // Bit 4 (0x10) = DACT (Port deactivated) - 0 means activated/usable",
          "    var DACT = (q & 0x10) !== 0;   ",
          "    // Bit 5 (0x20) = DA (Device available/detected)",
          "    var DA   = (q & 0x20) !== 0;   ",
          "    // Bit 6 (0x40) = PE (Port Error) - 1 means error present",
          "    var PE   = (q & 0x40) !== 0;   ",
          "    // Bit 7 (0x80) = PVI (Process Value Input valid)",
          "    var PVI  = (q & 0x80) !== 0;   ",
          "",
          "    // Build a descriptive string with hex code and interpreted flags.",
          "    var text =",
          "      'PQI 0x' + q.toString(16).toUpperCase().padStart(2,'0') +",
          "      ' | Dev:' + (DA ? 'Yes' : 'No') +",
          "      ' | Port:' + (DACT ? 'Deact' : 'Active') +",
          "      ' | Err:' + (PE ? 'Yes' : 'No') +",
          "      ' | PVO:' + (PVO ? 'Valid' : 'Invalid') +",
          "      ' | PVI:' + (PVI ? 'Valid' : 'Invalid') +",
          "      ' | DI2:' + (DI2 ? '1' : '0') +",
          "      ' | DI4:' + (DI4 ? '1' : '0');",
          "",
          "    // Update the HMI control text with the decoded qualifier data.",
          "    var ctrl = TcHmi.Controls.get(ctrlId);",
          "    if (ctrl && typeof ctrl.setText === 'function') ctrl.setText(text);",
          "",
          "    // Logical LED in the PLC:",
          "    // True only if a device is detected, port is active, no error, and either PVO or PVI is valid.",
          "    var ok = (DA && !DACT && !PE && (PVO || PVI));",
          "    TcHmi.Symbol.writeEx2('%s%PLC1.GVL_IO.stAL1333info::bQualifierIOLink[' + ch + ']%/s%', ok, function () {});",
          "  });",
          "})();"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(100, 100, 100, 1)"
}
</script>
</div>
<div id="TcHmiTextBox_QalifierOLinkCh3" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="32" data-tchmi-height-unit="px" data-tchmi-left="640" data-tchmi-left-unit="px" data-tchmi-top="711" data-tchmi-top-unit="px" data-tchmi-width="320" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="12" data-tchmi-text-font-family="Tahoma">
<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 170, 170, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%s%PLC1.GVL_IO.stAL1333info::nQualifierIOLink[2]%/s%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "(function () {",
          "  // Channel index (0-based). Adjust for each IO-Link channel (0..7).",
          "  var ch = 2;                   ",
          "  // ID of the target HMI TextBox control to display the decoded qualifier info.",
          "  var ctrlId = 'TcHmiTextBox_QalifierOLinkCh3'; // Example: 'TcHmiTextBox_QualifierIOLinkCh1'",
          "",
          "  // Read the USINT qualifier value from the PLC for the specified IO-Link channel.",
          "  TcHmi.Symbol.readEx2('%s%PLC1.GVL_IO.stAL1333info::nQualifierIOLink[' + ch + ']%/s%', function (d) {",
          "    // Exit if there was an error reading the symbol.",
          "    if (d.error !== TcHmi.Errors.NONE) return;",
          "",
          "    // Ensure the value is treated as a number.",
          "    var q = Number(d.value);",
          "",
          "    // Decode individual bits according to IFM AL1333 manual (0xF101 register):",
          "    // Bit 0 (0x01) = DI4",
          "    var DI4  = (q & 0x01) !== 0;",
          "    // Bit 1 (0x02) = DI2",
          "    var DI2  = (q & 0x02) !== 0;",
          "    // Bit 3 (0x08) = PVO (Process Value Output valid)",
          "    var PVO  = (q & 0x08) !== 0;",
          "    // Bit 4 (0x10) = DACT (Port deactivated) - 0 means activated/usable",
          "    var DACT = (q & 0x10) !== 0;   ",
          "    // Bit 5 (0x20) = DA (Device available/detected)",
          "    var DA   = (q & 0x20) !== 0;   ",
          "    // Bit 6 (0x40) = PE (Port Error) - 1 means error present",
          "    var PE   = (q & 0x40) !== 0;   ",
          "    // Bit 7 (0x80) = PVI (Process Value Input valid)",
          "    var PVI  = (q & 0x80) !== 0;   ",
          "",
          "    // Build a descriptive string with hex code and interpreted flags.",
          "    var text =",
          "      'PQI 0x' + q.toString(16).toUpperCase().padStart(2,'0') +",
          "      ' | Dev:' + (DA ? 'Yes' : 'No') +",
          "      ' | Port:' + (DACT ? 'Deact' : 'Active') +",
          "      ' | Err:' + (PE ? 'Yes' : 'No') +",
          "      ' | PVO:' + (PVO ? 'Valid' : 'Invalid') +",
          "      ' | PVI:' + (PVI ? 'Valid' : 'Invalid') +",
          "      ' | DI2:' + (DI2 ? '1' : '0') +",
          "      ' | DI4:' + (DI4 ? '1' : '0');",
          "",
          "    // Update the HMI control text with the decoded qualifier data.",
          "    var ctrl = TcHmi.Controls.get(ctrlId);",
          "    if (ctrl && typeof ctrl.setText === 'function') ctrl.setText(text);",
          "",
          "    // Logical LED in the PLC:",
          "    // True only if a device is detected, port is active, no error, and either PVO or PVI is valid.",
          "    var ok = (DA && !DACT && !PE && (PVO || PVI));",
          "    TcHmi.Symbol.writeEx2('%s%PLC1.GVL_IO.stAL1333info::bQualifierIOLink[' + ch + ']%/s%', ok, function () {});",
          "  });",
          "})();"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(100, 100, 100, 1)"
}
</script>
</div>
<div id="TcHmiTextBox_QalifierOLinkCh4" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="32" data-tchmi-height-unit="px" data-tchmi-left="640" data-tchmi-left-unit="px" data-tchmi-top="767" data-tchmi-top-unit="px" data-tchmi-width="320" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="12" data-tchmi-text-font-family="Tahoma">
<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 170, 170, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%s%PLC1.GVL_IO.stAL1333info::nQualifierIOLink[3]%/s%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "(function () {",
          "  // Channel index (0-based). Adjust for each IO-Link channel (0..7).",
          "  var ch = 3;                   ",
          "  // ID of the target HMI TextBox control to display the decoded qualifier info.",
          "  var ctrlId = 'TcHmiTextBox_QalifierOLinkCh4'; // Example: 'TcHmiTextBox_QualifierIOLinkCh1'",
          "",
          "  // Read the USINT qualifier value from the PLC for the specified IO-Link channel.",
          "  TcHmi.Symbol.readEx2('%s%PLC1.GVL_IO.stAL1333info::nQualifierIOLink[' + ch + ']%/s%', function (d) {",
          "    // Exit if there was an error reading the symbol.",
          "    if (d.error !== TcHmi.Errors.NONE) return;",
          "",
          "    // Ensure the value is treated as a number.",
          "    var q = Number(d.value);",
          "",
          "    // Decode individual bits according to IFM AL1333 manual (0xF101 register):",
          "    // Bit 0 (0x01) = DI4",
          "    var DI4  = (q & 0x01) !== 0;",
          "    // Bit 1 (0x02) = DI2",
          "    var DI2  = (q & 0x02) !== 0;",
          "    // Bit 3 (0x08) = PVO (Process Value Output valid)",
          "    var PVO  = (q & 0x08) !== 0;",
          "    // Bit 4 (0x10) = DACT (Port deactivated) - 0 means activated/usable",
          "    var DACT = (q & 0x10) !== 0;   ",
          "    // Bit 5 (0x20) = DA (Device available/detected)",
          "    var DA   = (q & 0x20) !== 0;   ",
          "    // Bit 6 (0x40) = PE (Port Error) - 1 means error present",
          "    var PE   = (q & 0x40) !== 0;   ",
          "    // Bit 7 (0x80) = PVI (Process Value Input valid)",
          "    var PVI  = (q & 0x80) !== 0;   ",
          "",
          "    // Build a descriptive string with hex code and interpreted flags.",
          "    var text =",
          "      'PQI 0x' + q.toString(16).toUpperCase().padStart(2,'0') +",
          "      ' | Dev:' + (DA ? 'Yes' : 'No') +",
          "      ' | Port:' + (DACT ? 'Deact' : 'Active') +",
          "      ' | Err:' + (PE ? 'Yes' : 'No') +",
          "      ' | PVO:' + (PVO ? 'Valid' : 'Invalid') +",
          "      ' | PVI:' + (PVI ? 'Valid' : 'Invalid') +",
          "      ' | DI2:' + (DI2 ? '1' : '0') +",
          "      ' | DI4:' + (DI4 ? '1' : '0');",
          "",
          "    // Update the HMI control text with the decoded qualifier data.",
          "    var ctrl = TcHmi.Controls.get(ctrlId);",
          "    if (ctrl && typeof ctrl.setText === 'function') ctrl.setText(text);",
          "",
          "    // Logical LED in the PLC:",
          "    // True only if a device is detected, port is active, no error, and either PVO or PVI is valid.",
          "    var ok = (DA && !DACT && !PE && (PVO || PVI));",
          "    TcHmi.Symbol.writeEx2('%s%PLC1.GVL_IO.stAL1333info::bQualifierIOLink[' + ch + ']%/s%', ok, function () {});",
          "  });",
          "})();"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(100, 100, 100, 1)"
}
</script>
</div>
<div id="TcHmiTextBox_QalifierOLinkCh5" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="32" data-tchmi-height-unit="px" data-tchmi-left="640" data-tchmi-left-unit="px" data-tchmi-top="823" data-tchmi-top-unit="px" data-tchmi-width="320" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="12" data-tchmi-text-font-family="Tahoma">
<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 170, 170, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%s%PLC1.GVL_IO.stAL1333info::nQualifierIOLink[4]%/s%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "(function () {",
          "  // Channel index (0-based). Adjust for each IO-Link channel (0..7).",
          "  var ch = 4;                   ",
          "  // ID of the target HMI TextBox control to display the decoded qualifier info.",
          "  var ctrlId = 'TcHmiTextBox_QalifierOLinkCh5'; // Example: 'TcHmiTextBox_QualifierIOLinkCh1'",
          "",
          "  // Read the USINT qualifier value from the PLC for the specified IO-Link channel.",
          "  TcHmi.Symbol.readEx2('%s%PLC1.GVL_IO.stAL1333info::nQualifierIOLink[' + ch + ']%/s%', function (d) {",
          "    // Exit if there was an error reading the symbol.",
          "    if (d.error !== TcHmi.Errors.NONE) return;",
          "",
          "    // Ensure the value is treated as a number.",
          "    var q = Number(d.value);",
          "",
          "    // Decode individual bits according to IFM AL1333 manual (0xF101 register):",
          "    // Bit 0 (0x01) = DI4",
          "    var DI4  = (q & 0x01) !== 0;",
          "    // Bit 1 (0x02) = DI2",
          "    var DI2  = (q & 0x02) !== 0;",
          "    // Bit 3 (0x08) = PVO (Process Value Output valid)",
          "    var PVO  = (q & 0x08) !== 0;",
          "    // Bit 4 (0x10) = DACT (Port deactivated) - 0 means activated/usable",
          "    var DACT = (q & 0x10) !== 0;   ",
          "    // Bit 5 (0x20) = DA (Device available/detected)",
          "    var DA   = (q & 0x20) !== 0;   ",
          "    // Bit 6 (0x40) = PE (Port Error) - 1 means error present",
          "    var PE   = (q & 0x40) !== 0;   ",
          "    // Bit 7 (0x80) = PVI (Process Value Input valid)",
          "    var PVI  = (q & 0x80) !== 0;   ",
          "",
          "    // Build a descriptive string with hex code and interpreted flags.",
          "    var text =",
          "      'PQI 0x' + q.toString(16).toUpperCase().padStart(2,'0') +",
          "      ' | Dev:' + (DA ? 'Yes' : 'No') +",
          "      ' | Port:' + (DACT ? 'Deact' : 'Active') +",
          "      ' | Err:' + (PE ? 'Yes' : 'No') +",
          "      ' | PVO:' + (PVO ? 'Valid' : 'Invalid') +",
          "      ' | PVI:' + (PVI ? 'Valid' : 'Invalid') +",
          "      ' | DI2:' + (DI2 ? '1' : '0') +",
          "      ' | DI4:' + (DI4 ? '1' : '0');",
          "",
          "    // Update the HMI control text with the decoded qualifier data.",
          "    var ctrl = TcHmi.Controls.get(ctrlId);",
          "    if (ctrl && typeof ctrl.setText === 'function') ctrl.setText(text);",
          "",
          "    // Logical LED in the PLC:",
          "    // True only if a device is detected, port is active, no error, and either PVO or PVI is valid.",
          "    var ok = (DA && !DACT && !PE && (PVO || PVI));",
          "    TcHmi.Symbol.writeEx2('%s%PLC1.GVL_IO.stAL1333info::bQualifierIOLink[' + ch + ']%/s%', ok, function () {});",
          "  });",
          "})();"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(100, 100, 100, 1)"
}
</script>
</div>
<div id="TcHmiTextBox_QalifierOLinkCh6" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="32" data-tchmi-height-unit="px" data-tchmi-left="640" data-tchmi-left-unit="px" data-tchmi-top="879" data-tchmi-top-unit="px" data-tchmi-width="320" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="12" data-tchmi-text-font-family="Tahoma">
<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 170, 170, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%s%PLC1.GVL_IO.stAL1333info::nQualifierIOLink[5]%/s%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "(function () {",
          "  // Channel index (0-based). Adjust for each IO-Link channel (0..7).",
          "  var ch = 5;                   ",
          "  // ID of the target HMI TextBox control to display the decoded qualifier info.",
          "  var ctrlId = 'TcHmiTextBox_QalifierOLinkCh6'; // Example: 'TcHmiTextBox_QualifierIOLinkCh1'",
          "",
          "  // Read the USINT qualifier value from the PLC for the specified IO-Link channel.",
          "  TcHmi.Symbol.readEx2('%s%PLC1.GVL_IO.stAL1333info::nQualifierIOLink[' + ch + ']%/s%', function (d) {",
          "    // Exit if there was an error reading the symbol.",
          "    if (d.error !== TcHmi.Errors.NONE) return;",
          "",
          "    // Ensure the value is treated as a number.",
          "    var q = Number(d.value);",
          "",
          "    // Decode individual bits according to IFM AL1333 manual (0xF101 register):",
          "    // Bit 0 (0x01) = DI4",
          "    var DI4  = (q & 0x01) !== 0;",
          "    // Bit 1 (0x02) = DI2",
          "    var DI2  = (q & 0x02) !== 0;",
          "    // Bit 3 (0x08) = PVO (Process Value Output valid)",
          "    var PVO  = (q & 0x08) !== 0;",
          "    // Bit 4 (0x10) = DACT (Port deactivated) - 0 means activated/usable",
          "    var DACT = (q & 0x10) !== 0;   ",
          "    // Bit 5 (0x20) = DA (Device available/detected)",
          "    var DA   = (q & 0x20) !== 0;   ",
          "    // Bit 6 (0x40) = PE (Port Error) - 1 means error present",
          "    var PE   = (q & 0x40) !== 0;   ",
          "    // Bit 7 (0x80) = PVI (Process Value Input valid)",
          "    var PVI  = (q & 0x80) !== 0;   ",
          "",
          "    // Build a descriptive string with hex code and interpreted flags.",
          "    var text =",
          "      'PQI 0x' + q.toString(16).toUpperCase().padStart(2,'0') +",
          "      ' | Dev:' + (DA ? 'Yes' : 'No') +",
          "      ' | Port:' + (DACT ? 'Deact' : 'Active') +",
          "      ' | Err:' + (PE ? 'Yes' : 'No') +",
          "      ' | PVO:' + (PVO ? 'Valid' : 'Invalid') +",
          "      ' | PVI:' + (PVI ? 'Valid' : 'Invalid') +",
          "      ' | DI2:' + (DI2 ? '1' : '0') +",
          "      ' | DI4:' + (DI4 ? '1' : '0');",
          "",
          "    // Update the HMI control text with the decoded qualifier data.",
          "    var ctrl = TcHmi.Controls.get(ctrlId);",
          "    if (ctrl && typeof ctrl.setText === 'function') ctrl.setText(text);",
          "",
          "    // Logical LED in the PLC:",
          "    // True only if a device is detected, port is active, no error, and either PVO or PVI is valid.",
          "    var ok = (DA && !DACT && !PE && (PVO || PVI));",
          "    TcHmi.Symbol.writeEx2('%s%PLC1.GVL_IO.stAL1333info::bQualifierIOLink[' + ch + ']%/s%', ok, function () {});",
          "  });",
          "})();"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(100, 100, 100, 1)"
}
</script>
</div>
<div id="TcHmiTextBox_QalifierOLinkCh7" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="32" data-tchmi-height-unit="px" data-tchmi-left="640" data-tchmi-left-unit="px" data-tchmi-top="935" data-tchmi-top-unit="px" data-tchmi-width="320" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="12" data-tchmi-text-font-family="Tahoma">
<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 170, 170, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%s%PLC1.GVL_IO.stAL1333info::nQualifierIOLink[6]%/s%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "(function () {",
          "  // Channel index (0-based). Adjust for each IO-Link channel (0..7).",
          "  var ch = 6;                   ",
          "  // ID of the target HMI TextBox control to display the decoded qualifier info.",
          "  var ctrlId = 'TcHmiTextBox_QalifierOLinkCh7'; // Example: 'TcHmiTextBox_QualifierIOLinkCh1'",
          "",
          "  // Read the USINT qualifier value from the PLC for the specified IO-Link channel.",
          "  TcHmi.Symbol.readEx2('%s%PLC1.GVL_IO.stAL1333info::nQualifierIOLink[' + ch + ']%/s%', function (d) {",
          "    // Exit if there was an error reading the symbol.",
          "    if (d.error !== TcHmi.Errors.NONE) return;",
          "",
          "    // Ensure the value is treated as a number.",
          "    var q = Number(d.value);",
          "",
          "    // Decode individual bits according to IFM AL1333 manual (0xF101 register):",
          "    // Bit 0 (0x01) = DI4",
          "    var DI4  = (q & 0x01) !== 0;",
          "    // Bit 1 (0x02) = DI2",
          "    var DI2  = (q & 0x02) !== 0;",
          "    // Bit 3 (0x08) = PVO (Process Value Output valid)",
          "    var PVO  = (q & 0x08) !== 0;",
          "    // Bit 4 (0x10) = DACT (Port deactivated) - 0 means activated/usable",
          "    var DACT = (q & 0x10) !== 0;   ",
          "    // Bit 5 (0x20) = DA (Device available/detected)",
          "    var DA   = (q & 0x20) !== 0;   ",
          "    // Bit 6 (0x40) = PE (Port Error) - 1 means error present",
          "    var PE   = (q & 0x40) !== 0;   ",
          "    // Bit 7 (0x80) = PVI (Process Value Input valid)",
          "    var PVI  = (q & 0x80) !== 0;   ",
          "",
          "    // Build a descriptive string with hex code and interpreted flags.",
          "    var text =",
          "      'PQI 0x' + q.toString(16).toUpperCase().padStart(2,'0') +",
          "      ' | Dev:' + (DA ? 'Yes' : 'No') +",
          "      ' | Port:' + (DACT ? 'Deact' : 'Active') +",
          "      ' | Err:' + (PE ? 'Yes' : 'No') +",
          "      ' | PVO:' + (PVO ? 'Valid' : 'Invalid') +",
          "      ' | PVI:' + (PVI ? 'Valid' : 'Invalid') +",
          "      ' | DI2:' + (DI2 ? '1' : '0') +",
          "      ' | DI4:' + (DI4 ? '1' : '0');",
          "",
          "    // Update the HMI control text with the decoded qualifier data.",
          "    var ctrl = TcHmi.Controls.get(ctrlId);",
          "    if (ctrl && typeof ctrl.setText === 'function') ctrl.setText(text);",
          "",
          "    // Logical LED in the PLC:",
          "    // True only if a device is detected, port is active, no error, and either PVO or PVI is valid.",
          "    var ok = (DA && !DACT && !PE && (PVO || PVI));",
          "    TcHmi.Symbol.writeEx2('%s%PLC1.GVL_IO.stAL1333info::bQualifierIOLink[' + ch + ']%/s%', ok, function () {});",
          "  });",
          "})();"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(100, 100, 100, 1)"
}
</script>
</div>
<div id="TcHmiTextBox_QalifierOLinkCh8" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="32" data-tchmi-height-unit="px" data-tchmi-left="640" data-tchmi-left-unit="px" data-tchmi-top="992" data-tchmi-top-unit="px" data-tchmi-width="320" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="12" data-tchmi-text-font-family="Tahoma">
<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 170, 170, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 1,
  "right": 1,
  "top": 1,
  "bottom": 1,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%s%PLC1.GVL_IO.stAL1333info::nQualifierIOLink[7]%/s%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "(function () {",
          "  // Channel index (0-based). Adjust for each IO-Link channel (0..7).",
          "  var ch = 7;                   ",
          "  // ID of the target HMI TextBox control to display the decoded qualifier info.",
          "  var ctrlId = 'TcHmiTextBox_QalifierOLinkCh8'; // Example: 'TcHmiTextBox_QualifierIOLinkCh1'",
          "",
          "  // Read the USINT qualifier value from the PLC for the specified IO-Link channel.",
          "  TcHmi.Symbol.readEx2('%s%PLC1.GVL_IO.stAL1333info::nQualifierIOLink[' + ch + ']%/s%', function (d) {",
          "    // Exit if there was an error reading the symbol.",
          "    if (d.error !== TcHmi.Errors.NONE) return;",
          "",
          "    // Ensure the value is treated as a number.",
          "    var q = Number(d.value);",
          "",
          "    // Decode individual bits according to IFM AL1333 manual (0xF101 register):",
          "    // Bit 0 (0x01) = DI4",
          "    var DI4  = (q & 0x01) !== 0;",
          "    // Bit 1 (0x02) = DI2",
          "    var DI2  = (q & 0x02) !== 0;",
          "    // Bit 3 (0x08) = PVO (Process Value Output valid)",
          "    var PVO  = (q & 0x08) !== 0;",
          "    // Bit 4 (0x10) = DACT (Port deactivated) - 0 means activated/usable",
          "    var DACT = (q & 0x10) !== 0;   ",
          "    // Bit 5 (0x20) = DA (Device available/detected)",
          "    var DA   = (q & 0x20) !== 0;   ",
          "    // Bit 6 (0x40) = PE (Port Error) - 1 means error present",
          "    var PE   = (q & 0x40) !== 0;   ",
          "    // Bit 7 (0x80) = PVI (Process Value Input valid)",
          "    var PVI  = (q & 0x80) !== 0;   ",
          "",
          "    // Build a descriptive string with hex code and interpreted flags.",
          "    var text =",
          "      'PQI 0x' + q.toString(16).toUpperCase().padStart(2,'0') +",
          "      ' | Dev:' + (DA ? 'Yes' : 'No') +",
          "      ' | Port:' + (DACT ? 'Deact' : 'Active') +",
          "      ' | Err:' + (PE ? 'Yes' : 'No') +",
          "      ' | PVO:' + (PVO ? 'Valid' : 'Invalid') +",
          "      ' | PVI:' + (PVI ? 'Valid' : 'Invalid') +",
          "      ' | DI2:' + (DI2 ? '1' : '0') +",
          "      ' | DI4:' + (DI4 ? '1' : '0');",
          "",
          "    // Update the HMI control text with the decoded qualifier data.",
          "    var ctrl = TcHmi.Controls.get(ctrlId);",
          "    if (ctrl && typeof ctrl.setText === 'function') ctrl.setText(text);",
          "",
          "    // Logical LED in the PLC:",
          "    // True only if a device is detected, port is active, no error, and either PVO or PVI is valid.",
          "    var ok = (DA && !DACT && !PE && (PVO || PVI));",
          "    TcHmi.Symbol.writeEx2('%s%PLC1.GVL_IO.stAL1333info::bQualifierIOLink[' + ch + ']%/s%', ok, function () {});",
          "  });",
          "})();"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(100, 100, 100, 1)"
}
</script>
</div>
<div id="EL1904EStopChannel1_763" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="470" data-tchmi-left-unit="px" data-tchmi-top="655" data-tchmi-top-unit="px" data-tchmi-width="160" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="Qualifier IO-Link Ch. 2">
</div>
<div id="EL1904EStopChannel1_764" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="470" data-tchmi-left-unit="px" data-tchmi-top="711" data-tchmi-top-unit="px" data-tchmi-width="160" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="Qualifier IO-Link Ch. 3">
</div>
<div id="EL1904EStopChannel1_765" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="470" data-tchmi-left-unit="px" data-tchmi-top="767" data-tchmi-top-unit="px" data-tchmi-width="160" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="Qualifier IO-Link Ch. 4">
</div>
<div id="EL1904EStopChannel1_766" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="470" data-tchmi-left-unit="px" data-tchmi-top="823" data-tchmi-top-unit="px" data-tchmi-width="160" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="Qualifier IO-Link Ch. 5">
</div>
<div id="EL1904EStopChannel1_767" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="470" data-tchmi-left-unit="px" data-tchmi-top="879" data-tchmi-top-unit="px" data-tchmi-width="160" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="Qualifier IO-Link Ch. 6">
</div>
<div id="EL1904EStopChannel1_768" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="470" data-tchmi-left-unit="px" data-tchmi-top="935" data-tchmi-top-unit="px" data-tchmi-width="160" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="Qualifier IO-Link Ch. 7">
</div>
<div id="EL1904EStopChannel1_769" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="470" data-tchmi-left-unit="px" data-tchmi-top="992" data-tchmi-top-unit="px" data-tchmi-width="160" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="Qualifier IO-Link Ch. 8">
</div>
<div id="EL1904EStopChannel1_770" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="286" data-tchmi-left-unit="px" data-tchmi-top="356" data-tchmi-top-unit="px" data-tchmi-width="189" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="IO-Link Ch. 1 Value (%)">
</div>
<div id="TcHmiTextblock_963" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="492" data-tchmi-left-unit="px" data-tchmi-top="356" data-tchmi-top-unit="px" data-tchmi-width="70" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-horizontal-alignment="Center" data-tchmi-text-vertical-alignment="Center" data-tchmi-is-enabled="False" data-tchmi-text-font-size-unit="px" data-tchmi-text="%s%PLC1.GVL_HMI.HMIAnimation::aSolventLevel[0]%/s%">
<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 2,
  "right": 2,
  "top": 2,
  "bottom": 2,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 164, 164, 1)"
}
</script>
</div>
<div id="EL1904EStopChannel1_771" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="286" data-tchmi-left-unit="px" data-tchmi-top="406" data-tchmi-top-unit="px" data-tchmi-width="189" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="IO-Link Ch. 2 Value (%)">
</div>
<div id="EL1904EStopChannel1_772" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="286" data-tchmi-left-unit="px" data-tchmi-top="456" data-tchmi-top-unit="px" data-tchmi-width="189" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="IO-Link Ch. 3 Value (%)">
</div>
<div id="EL1904EStopChannel1_773" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="286" data-tchmi-left-unit="px" data-tchmi-top="507" data-tchmi-top-unit="px" data-tchmi-width="189" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="IO-Link Ch. 4 Value (%)">
</div>
<div id="TcHmiTextblock_964" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="492" data-tchmi-left-unit="px" data-tchmi-top="406" data-tchmi-top-unit="px" data-tchmi-width="70" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-horizontal-alignment="Center" data-tchmi-text-vertical-alignment="Center" data-tchmi-is-enabled="False" data-tchmi-text-font-size-unit="px" data-tchmi-text="%s%PLC1.GVL_HMI.HMIAnimation::aSolventLevel[1]%/s%">
<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 2,
  "right": 2,
  "top": 2,
  "bottom": 2,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 164, 164, 1)"
}
</script>
</div>
<div id="TcHmiTextblock_965" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="492" data-tchmi-left-unit="px" data-tchmi-top="456" data-tchmi-top-unit="px" data-tchmi-width="70" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-horizontal-alignment="Center" data-tchmi-text-vertical-alignment="Center" data-tchmi-is-enabled="False" data-tchmi-text-font-size-unit="px" data-tchmi-text="%s%PLC1.GVL_HMI.HMIAnimation::aSolventLevel[2]%/s%">
<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 2,
  "right": 2,
  "top": 2,
  "bottom": 2,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 164, 164, 1)"
}
</script>
</div>
<div id="TcHmiTextblock_966" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="492" data-tchmi-left-unit="px" data-tchmi-top="507" data-tchmi-top-unit="px" data-tchmi-width="70" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-horizontal-alignment="Center" data-tchmi-text-vertical-alignment="Center" data-tchmi-is-enabled="False" data-tchmi-text-font-size-unit="px" data-tchmi-text="%s%PLC1.GVL_HMI.HMIAnimation::aSolventLevel[3]%/s%">
<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 2,
  "right": 2,
  "top": 2,
  "bottom": 2,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 164, 164, 1)"
}
</script>
</div>
<div id="TcHmiTextblock_967" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="880" data-tchmi-left-unit="px" data-tchmi-top="507" data-tchmi-top-unit="px" data-tchmi-width="70" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-horizontal-alignment="Center" data-tchmi-text-vertical-alignment="Center" data-tchmi-is-enabled="False" data-tchmi-text-font-size-unit="px" data-tchmi-text="0">
<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 2,
  "right": 2,
  "top": 2,
  "bottom": 2,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 164, 164, 1)"
}
</script>
</div>
<div id="TcHmiTextblock_968" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="880" data-tchmi-left-unit="px" data-tchmi-top="456" data-tchmi-top-unit="px" data-tchmi-width="70" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-horizontal-alignment="Center" data-tchmi-text-vertical-alignment="Center" data-tchmi-is-enabled="False" data-tchmi-text-font-size-unit="px" data-tchmi-text="0">
<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 2,
  "right": 2,
  "top": 2,
  "bottom": 2,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 164, 164, 1)"
}
</script>
</div>
<div id="TcHmiTextblock_969" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="880" data-tchmi-left-unit="px" data-tchmi-top="406" data-tchmi-top-unit="px" data-tchmi-width="70" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-horizontal-alignment="Center" data-tchmi-text-vertical-alignment="Center" data-tchmi-is-enabled="False" data-tchmi-text-font-size-unit="px" data-tchmi-text="0">
<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 2,
  "right": 2,
  "top": 2,
  "bottom": 2,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 164, 164, 1)"
}
</script>
</div>
<div id="EL1904EStopChannel1_774" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="674" data-tchmi-left-unit="px" data-tchmi-top="507" data-tchmi-top-unit="px" data-tchmi-width="189" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="IO-Link Ch. 8 Value (%)">
</div>
<div id="EL1904EStopChannel1_775" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="674" data-tchmi-left-unit="px" data-tchmi-top="456" data-tchmi-top-unit="px" data-tchmi-width="189" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="IO-Link Ch. 7 Value (%)">
</div>
<div id="EL1904EStopChannel1_776" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="674" data-tchmi-left-unit="px" data-tchmi-top="406" data-tchmi-top-unit="px" data-tchmi-width="189" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="IO-Link Ch. 6 Value (%)">
</div>
<div id="TcHmiTextblock_970" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="880" data-tchmi-left-unit="px" data-tchmi-top="356" data-tchmi-top-unit="px" data-tchmi-width="70" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-horizontal-alignment="Center" data-tchmi-text-vertical-alignment="Center" data-tchmi-is-enabled="False" data-tchmi-text-font-size-unit="px" data-tchmi-text="%s%PLC1.GVL_HMI.HMIAnimation::rWasteLevel%/s%">
<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 2,
  "right": 2,
  "top": 2,
  "bottom": 2,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "Solid",
  "right": "Solid",
  "top": "Solid",
  "bottom": "Solid"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-color" type="application/json">
{
  "color": "rgba(170, 164, 164, 1)"
}
</script>
</div>
<div id="EL1904EStopChannel1_777" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="674" data-tchmi-left-unit="px" data-tchmi-top="356" data-tchmi-top-unit="px" data-tchmi-width="189" data-tchmi-width-unit="px" data-tchmi-word-wrap="True" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-font-size="16" data-tchmi-text-font-family="Tahoma" data-tchmi-text="IO-Link Ch. 5 Value (%)">
</div>
<div id="TcHmiStateImage_AL13333_1" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiStateImage" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="24" data-tchmi-left-unit="px" data-tchmi-top="599" data-tchmi-top-unit="px" data-tchmi-width="26" data-tchmi-width-unit="px" data-tchmi-fallback-image="Resources/Custom/Images/Controls/RedIndicator.svg" data-tchmi-state="%s%PLC1.GVL_IO.stAL1333info::bStateIOLink[0]%/s%">
<script data-tchmi-target-attribute="data-tchmi-state-list" type="application/json">
[
  {
    "state": true,
    "stateIcon": "Resources/Custom/Images/Controls/GreenIndicator.svg"
  },
  {
    "state": false,
    "stateIcon": "Resources/Custom/Images/Controls/RedIndicator.svg"
  }
]
</script>
</div>
<div id="TcHmiStateImage_AL13333_2" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiStateImage" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="24" data-tchmi-left-unit="px" data-tchmi-top="655" data-tchmi-top-unit="px" data-tchmi-width="26" data-tchmi-width-unit="px" data-tchmi-fallback-image="Resources/Custom/Images/Controls/RedIndicator.svg" data-tchmi-state="%s%PLC1.GVL_IO.stAL1333info::bStateIOLink[1]%/s%">
<script data-tchmi-target-attribute="data-tchmi-state-list" type="application/json">
[
  {
    "state": true,
    "stateIcon": "Resources/Custom/Images/Controls/GreenIndicator.svg"
  },
  {
    "state": false,
    "stateIcon": "Resources/Custom/Images/Controls/RedIndicator.svg"
  }
]
</script>
</div>
<div id="TcHmiStateImage_AL13333_3" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiStateImage" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="24" data-tchmi-left-unit="px" data-tchmi-top="711" data-tchmi-top-unit="px" data-tchmi-width="26" data-tchmi-width-unit="px" data-tchmi-fallback-image="Resources/Custom/Images/Controls/RedIndicator.svg" data-tchmi-state="%s%PLC1.GVL_IO.stAL1333info::bStateIOLink[2]%/s%">
<script data-tchmi-target-attribute="data-tchmi-state-list" type="application/json">
[
  {
    "state": true,
    "stateIcon": "Resources/Custom/Images/Controls/GreenIndicator.svg"
  },
  {
    "state": false,
    "stateIcon": "Resources/Custom/Images/Controls/RedIndicator.svg"
  }
]
</script>
</div>
<div id="TcHmiStateImage_AL13333_4" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiStateImage" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="24" data-tchmi-left-unit="px" data-tchmi-top="767" data-tchmi-top-unit="px" data-tchmi-width="26" data-tchmi-width-unit="px" data-tchmi-fallback-image="Resources/Custom/Images/Controls/RedIndicator.svg" data-tchmi-state="%s%PLC1.GVL_IO.stAL1333info::bStateIOLink[3]%/s%">
<script data-tchmi-target-attribute="data-tchmi-state-list" type="application/json">
[
  {
    "state": true,
    "stateIcon": "Resources/Custom/Images/Controls/GreenIndicator.svg"
  },
  {
    "state": false,
    "stateIcon": "Resources/Custom/Images/Controls/RedIndicator.svg"
  }
]
</script>
</div>
<div id="TcHmiStateImage_AL13333_5" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiStateImage" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="24" data-tchmi-left-unit="px" data-tchmi-top="823" data-tchmi-top-unit="px" data-tchmi-width="26" data-tchmi-width-unit="px" data-tchmi-fallback-image="Resources/Custom/Images/Controls/RedIndicator.svg" data-tchmi-state="%s%PLC1.GVL_IO.stAL1333info::bStateIOLink[4]%/s%">
<script data-tchmi-target-attribute="data-tchmi-state-list" type="application/json">
[
  {
    "state": true,
    "stateIcon": "Resources/Custom/Images/Controls/GreenIndicator.svg"
  },
  {
    "state": false,
    "stateIcon": "Resources/Custom/Images/Controls/RedIndicator.svg"
  }
]
</script>
</div>
<div id="TcHmiStateImage_AL13333_6" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiStateImage" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="24" data-tchmi-left-unit="px" data-tchmi-top="879" data-tchmi-top-unit="px" data-tchmi-width="26" data-tchmi-width-unit="px" data-tchmi-fallback-image="Resources/Custom/Images/Controls/RedIndicator.svg" data-tchmi-state="%s%PLC1.GVL_IO.stAL1333info::bStateIOLink[5]%/s%">
<script data-tchmi-target-attribute="data-tchmi-state-list" type="application/json">
[
  {
    "state": true,
    "stateIcon": "Resources/Custom/Images/Controls/GreenIndicator.svg"
  },
  {
    "state": false,
    "stateIcon": "Resources/Custom/Images/Controls/RedIndicator.svg"
  }
]
</script>
</div>
<div id="TcHmiStateImage_AL13333_7" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiStateImage" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="24" data-tchmi-left-unit="px" data-tchmi-top="935" data-tchmi-top-unit="px" data-tchmi-width="26" data-tchmi-width-unit="px" data-tchmi-fallback-image="Resources/Custom/Images/Controls/RedIndicator.svg" data-tchmi-state="%s%PLC1.GVL_IO.stAL1333info::bStateIOLink[6]%/s%">
<script data-tchmi-target-attribute="data-tchmi-state-list" type="application/json">
[
  {
    "state": true,
    "stateIcon": "Resources/Custom/Images/Controls/GreenIndicator.svg"
  },
  {
    "state": false,
    "stateIcon": "Resources/Custom/Images/Controls/RedIndicator.svg"
  }
]
</script>
</div>
<div id="TcHmiStateImage_AL13333_8" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiStateImage" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="24" data-tchmi-left-unit="px" data-tchmi-top="992" data-tchmi-top-unit="px" data-tchmi-width="26" data-tchmi-width-unit="px" data-tchmi-fallback-image="Resources/Custom/Images/Controls/RedIndicator.svg" data-tchmi-state="%s%PLC1.GVL_IO.stAL1333info::bStateIOLink[7]%/s%">
<script data-tchmi-target-attribute="data-tchmi-state-list" type="application/json">
[
  {
    "state": true,
    "stateIcon": "Resources/Custom/Images/Controls/GreenIndicator.svg"
  },
  {
    "state": false,
    "stateIcon": "Resources/Custom/Images/Controls/RedIndicator.svg"
  }
]
</script>
</div>
<div id="TcHmiStateImage_AL13333_9" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiStateImage" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="429" data-tchmi-left-unit="px" data-tchmi-top="599" data-tchmi-top-unit="px" data-tchmi-width="26" data-tchmi-width-unit="px" data-tchmi-fallback-image="Resources/Custom/Images/Controls/RedIndicator.svg" data-tchmi-state="%s%PLC1.GVL_IO.stAL1333info::bQualifierIOLink[0]%/s%">
<script data-tchmi-target-attribute="data-tchmi-state-list" type="application/json">
[
  {
    "state": true,
    "stateIcon": "Resources/Custom/Images/Controls/GreenIndicator.svg"
  },
  {
    "state": false,
    "stateIcon": "Resources/Custom/Images/Controls/RedIndicator.svg"
  }
]
</script>
</div>
<div id="TcHmiStateImage_AL13333_10" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiStateImage" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="429" data-tchmi-left-unit="px" data-tchmi-top="655" data-tchmi-top-unit="px" data-tchmi-width="26" data-tchmi-width-unit="px" data-tchmi-fallback-image="Resources/Custom/Images/Controls/RedIndicator.svg" data-tchmi-state="%s%PLC1.GVL_IO.stAL1333info::bQualifierIOLink[1]%/s%">
<script data-tchmi-target-attribute="data-tchmi-state-list" type="application/json">
[
  {
    "state": true,
    "stateIcon": "Resources/Custom/Images/Controls/GreenIndicator.svg"
  },
  {
    "state": false,
    "stateIcon": "Resources/Custom/Images/Controls/RedIndicator.svg"
  }
]
</script>
</div>
<div id="TcHmiStateImage_AL13333_11" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiStateImage" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="429" data-tchmi-left-unit="px" data-tchmi-top="711" data-tchmi-top-unit="px" data-tchmi-width="26" data-tchmi-width-unit="px" data-tchmi-fallback-image="Resources/Custom/Images/Controls/RedIndicator.svg" data-tchmi-state="%s%PLC1.GVL_IO.stAL1333info::bQualifierIOLink[2]%/s%">
<script data-tchmi-target-attribute="data-tchmi-state-list" type="application/json">
[
  {
    "state": true,
    "stateIcon": "Resources/Custom/Images/Controls/GreenIndicator.svg"
  },
  {
    "state": false,
    "stateIcon": "Resources/Custom/Images/Controls/RedIndicator.svg"
  }
]
</script>
</div>
<div id="TcHmiStateImage_AL13333_12" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiStateImage" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="429" data-tchmi-left-unit="px" data-tchmi-top="767" data-tchmi-top-unit="px" data-tchmi-width="26" data-tchmi-width-unit="px" data-tchmi-fallback-image="Resources/Custom/Images/Controls/RedIndicator.svg" data-tchmi-state="%s%PLC1.GVL_IO.stAL1333info::bQualifierIOLink[3]%/s%">
<script data-tchmi-target-attribute="data-tchmi-state-list" type="application/json">
[
  {
    "state": true,
    "stateIcon": "Resources/Custom/Images/Controls/GreenIndicator.svg"
  },
  {
    "state": false,
    "stateIcon": "Resources/Custom/Images/Controls/RedIndicator.svg"
  }
]
</script>
</div>
<div id="TcHmiStateImage_AL13333_13" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiStateImage" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="429" data-tchmi-left-unit="px" data-tchmi-top="823" data-tchmi-top-unit="px" data-tchmi-width="26" data-tchmi-width-unit="px" data-tchmi-fallback-image="Resources/Custom/Images/Controls/RedIndicator.svg" data-tchmi-state="%s%PLC1.GVL_IO.stAL1333info::bQualifierIOLink[4]%/s%">
<script data-tchmi-target-attribute="data-tchmi-state-list" type="application/json">
[
  {
    "state": true,
    "stateIcon": "Resources/Custom/Images/Controls/GreenIndicator.svg"
  },
  {
    "state": false,
    "stateIcon": "Resources/Custom/Images/Controls/RedIndicator.svg"
  }
]
</script>
</div>
<div id="TcHmiStateImage_AL13333_14" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiStateImage" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="429" data-tchmi-left-unit="px" data-tchmi-top="879" data-tchmi-top-unit="px" data-tchmi-width="26" data-tchmi-width-unit="px" data-tchmi-fallback-image="Resources/Custom/Images/Controls/RedIndicator.svg" data-tchmi-state="%s%PLC1.GVL_IO.stAL1333info::bQualifierIOLink[5]%/s%">
<script data-tchmi-target-attribute="data-tchmi-state-list" type="application/json">
[
  {
    "state": true,
    "stateIcon": "Resources/Custom/Images/Controls/GreenIndicator.svg"
  },
  {
    "state": false,
    "stateIcon": "Resources/Custom/Images/Controls/RedIndicator.svg"
  }
]
</script>
</div>
<div id="TcHmiStateImage_AL13333_15" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiStateImage" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="429" data-tchmi-left-unit="px" data-tchmi-top="935" data-tchmi-top-unit="px" data-tchmi-width="26" data-tchmi-width-unit="px" data-tchmi-fallback-image="Resources/Custom/Images/Controls/RedIndicator.svg" data-tchmi-state="%s%PLC1.GVL_IO.stAL1333info::bQualifierIOLink[6]%/s%">
<script data-tchmi-target-attribute="data-tchmi-state-list" type="application/json">
[
  {
    "state": true,
    "stateIcon": "Resources/Custom/Images/Controls/GreenIndicator.svg"
  },
  {
    "state": false,
    "stateIcon": "Resources/Custom/Images/Controls/RedIndicator.svg"
  }
]
</script>
</div>
<div id="TcHmiStateImage_AL13333_16" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiStateImage" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="429" data-tchmi-left-unit="px" data-tchmi-top="992" data-tchmi-top-unit="px" data-tchmi-width="26" data-tchmi-width-unit="px" data-tchmi-fallback-image="Resources/Custom/Images/Controls/RedIndicator.svg" data-tchmi-state="%s%PLC1.GVL_IO.stAL1333info::bQualifierIOLink[7]%/s%">
<script data-tchmi-target-attribute="data-tchmi-state-list" type="application/json">
[
  {
    "state": true,
    "stateIcon": "Resources/Custom/Images/Controls/GreenIndicator.svg"
  },
  {
    "state": false,
    "stateIcon": "Resources/Custom/Images/Controls/RedIndicator.svg"
  }
]
</script>
</div>
</div>