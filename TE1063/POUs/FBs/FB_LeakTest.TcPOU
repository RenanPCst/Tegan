<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_LeakTest" Id="{21d6925c-1467-47b6-a1a0-80200f2aa3f7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_LeakTest
VAR_INPUT
    bExecute       		: BOOL;  		// Starts the leak test
    eSolenoidPosition 	: E_SolenoidSet;// Defines the solenoid valve positions
    tMonitorTime   		: TIME;  		// Monitoring time duration
    rPressureLimit 		: REAL;  		// Minimum required pressure limit
END_VAR

VAR_OUTPUT
    bLeakTestDone  : BOOL;  		// Indicates if the test was successful
    bLeakTestError : BOOL;  		// Indicates if an error occurred during the test
    sLTMessageError: STRING(100);  	// Error message describing the failure
END_VAR

VAR
    fbValveControl1 	: FB_ValvePositionControl;
    fbValveControl2 	: FB_ValvePositionControl;
    fbValveControl3 	: FB_ValvePositionControl;
    fbValveControl4 	: FB_ValvePositionControl;
    fbValveControl5 	: FB_ValvePositionControl;
    fbSolenoidControl 	: FB_SolenoidControl;
    fbSensorScaling   	: FB_SensorScaling;
		bPressureInput	: BOOL := FALSE;
    tStartTime      	: TIME;
    rScaledPressure 	: REAL;
    eState          	: (IDLE, POSITION_VALVES, SET_SOLENOIDS, PRESSURIZE, MONITOR, DONE, ERROR);
	
	//EventLogger Variables
	fbEventHandler : FB_EventHandler;
    bExecuteEvent  : BOOL := FALSE;
    bEventDone     : BOOL := FALSE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE eState OF
    IDLE:
        // Waits for the execution command to start the test
        IF bExecute THEN
            eState := POSITION_VALVES;
        END_IF;

    POSITION_VALVES:
        // Moves all 6-position valves to position 5
        fbValveControl1(bEnable := TRUE, iValvePosition := 5, ServoAxis := GVL_Motion.M4Valve1.Axis);
        fbValveControl2(bEnable := TRUE, iValvePosition := 5, ServoAxis := GVL_Motion.M5Valve2.Axis);
        fbValveControl3(bEnable := TRUE, iValvePosition := 5, ServoAxis := GVL_Motion.M6Valve3.Axis);
        fbValveControl4(bEnable := TRUE, iValvePosition := 5, ServoAxis := GVL_Motion.M7Valve4.Axis);
        fbValveControl5(bEnable := TRUE, iValvePosition := 5, ServoAxis := GVL_Motion.M8Valve5.Axis);
        
        // If all valves have moved successfully, proceed to setting solenoids
        IF fbValveControl1.bMoveDone AND fbValveControl2.bMoveDone AND fbValveControl3.bMoveDone AND fbValveControl4.bMoveDone AND fbValveControl5.bMoveDone THEN
            eState := SET_SOLENOIDS;
        // If any valve encounters an error, transition to ERROR state
        ELSIF fbValveControl1.bError OR fbValveControl2.bError OR fbValveControl3.bError OR fbValveControl4.bError OR fbValveControl5.bError THEN
            bLeakTestError := TRUE;
            sLTMessageError := 'Failed to position valves';
			//Event Logger message
			fbEventHandler(
				bExecute  := bExecuteEvent,
				eEventName := E_Events.ERROR,
				sSystem    := 'Leak Test',
				sMessage   := 'Failed positioning the VICI Valves!',
				bDone      => bEventDone
			);
			ResetEventTrigger();
			//moving to error state
            eState := ERROR;
        END_IF;
    
    SET_SOLENOIDS:
        // Sets the solenoids to LEAKTEST configuration
        fbSolenoidControl(bExecute := TRUE, eSolenoidSet := E_SolenoidSet.LEAKTEST);
        IF fbSolenoidControl.bDone THEN
            tStartTime := T#0S;
			//moving to next state
            eState := PRESSURIZE;
        END_IF;

    PRESSURIZE:
        // Waits for the pressurization time to complete
        tStartTime := tStartTime + T#1S;
        IF tStartTime >= tMonitorTime THEN
            // Switches solenoids to LEAKTESTMONITORING configuration before monitoring begins
            fbSolenoidControl(bExecute := TRUE, eSolenoidSet := E_SolenoidSet.LEAKTESTMONITORING);
            IF fbSolenoidControl.bDone THEN
                eState := MONITOR;
            END_IF;
        END_IF;

    MONITOR:
        // Reads and scales the pressure sensor value
		bPressureInput := TRUE;
		IF bPressureInput THEN
        	fbSensorScaling(iRawValue := GVL_IO.gAnalogInputs.rMainPressureSupplyInput, iSensorID := 1, rPressure => rScaledPressure);
        END_IF
        // Verifies if the measured pressure meets the required limit
        IF rScaledPressure >= rPressureLimit THEN
            bLeakTestDone := TRUE;
			
			//Event looger message
			fbEventHandler(
				bExecute  := bExecuteEvent,
				eEventName := E_Events.INFO,
				sSystem    := 'Leak Test',
				sMessage   := 'Leak Test performed with Success!',
				bDone      => bEventDone
			);
			ResetEventTrigger();
			//moving to next state
            eState := DONE;
        ELSE
            bLeakTestError := TRUE;
            sLTMessageError := 'Pressure below required limit';
            eState := ERROR;
			fbEventHandler(
				bExecute  := bExecuteEvent,
				eEventName := E_Events.ERROR,
				sSystem    := 'Leak Test',
				sMessage   := 'Pressure below required limit!',
				bDone      => bEventDone
			);
			ResetEventTrigger();
        END_IF;

    DONE:
        // Successfully completed the leak test
        bExecute := FALSE;

    ERROR:
        // Test encountered an error, execution halted
        bExecute := FALSE;
END_CASE;

]]></ST>
    </Implementation>
    <Action Name="ResetEventTrigger" Id="{8666df6c-be4b-4df6-ad65-7299cde62512}">
      <Implementation>
        <ST><![CDATA[IF bEventDone THEN
        bExecuteEvent := FALSE;
        bEventDone := FALSE;
END_IF;]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_LeakTest">
      <LineId Id="311" Count="21" />
      <LineId Id="389" Count="0" />
      <LineId Id="382" Count="6" />
      <LineId Id="381" Count="0" />
      <LineId Id="409" Count="0" />
      <LineId Id="333" Count="7" />
      <LineId Id="408" Count="0" />
      <LineId Id="341" Count="15" />
      <LineId Id="410" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="357" Count="4" />
      <LineId Id="413" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="399" Count="6" />
      <LineId Id="398" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="362" Count="4" />
      <LineId Id="391" Count="6" />
      <LineId Id="390" Count="0" />
      <LineId Id="367" Count="8" />
      <LineId Id="141" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_LeakTest.ResetEventTrigger">
      <LineId Id="2" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>