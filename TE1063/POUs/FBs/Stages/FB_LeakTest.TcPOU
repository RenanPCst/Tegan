<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_LeakTest" Id="{21d6925c-1467-47b6-a1a0-80200f2aa3f7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_LeakTest
VAR_INPUT
    bExecute       		: BOOL;  		// Starts the leak test
    eSolenoidPosition 	: E_SolenoidSet;// Defines the solenoid valve positions
    tMonitorTime   		: TIME;  		// Monitoring time duration
    //rPressureLimit 		: REAL;  		// Minimum required pressure limit
END_VAR

VAR_OUTPUT
    bLeakTestDone  : BOOL;  		// Indicates if the test was successful
    bLeakTestError : BOOL;  		// Indicates if an error occurred during the test
    sLTMessageError: STRING(100);  	// Error message describing the failure
END_VAR

VAR
    fbValveControl 			: ARRAY[1..5] OF FB_ValvePositionControl;
    fbSolenoidControl 		: FB_SolenoidControl;
    fbSensorScaling   		: FB_SensorScaling;
		bPressureInput		: BOOL := FALSE;
    tStartTime      		: TIME;
    rScaledPressure 		: REAL;
    eState          		: (IDLE, POSITION_VALVES, SET_SOLENOIDS, PRESSURIZE, CLOSE_AIR, MONITOR, DONE, ERROR);
	bMoveValves	   			: BOOL := FALSE;
	bPressureTime			: BOOL := FALSE;
	bPressureTaken			: BOOL := FALSE;
	rClosedSystemPressure	: REAL := 0.0;
	tonPressuring			: TON;
	tonMonitoring			: TON;
	
	//EventLogger Variables
	fbEventHandler : FB_EventHandler;
    bExecuteEvent  : BOOL := FALSE;
    bEventDone     : BOOL := FALSE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE eState OF
    IDLE:
        // Waits for the execution command to start the test
        IF bExecute AND NOT (bLeakTestDone OR bLeakTestError) THEN
            eState := POSITION_VALVES;
        END_IF;

    POSITION_VALVES:
		bMoveValves := bExecute;
        // Moves all 6-position valves to position 5
        fbValveControl[1](bEnable := bMoveValves, iValvePosition := 5, ServoAxis := GVL_Motion.aValves[1].Axis);
        fbValveControl[2](bEnable := bMoveValves, iValvePosition := 5, ServoAxis := GVL_Motion.aValves[2].Axis);
        fbValveControl[3](bEnable := bMoveValves, iValvePosition := 5, ServoAxis := GVL_Motion.aValves[3].Axis);
        fbValveControl[4](bEnable := bMoveValves, iValvePosition := 5, ServoAxis := GVL_Motion.aValves[4].Axis);
        fbValveControl[5](bEnable := bMoveValves, iValvePosition := 5, ServoAxis := GVL_Motion.aValves[5].Axis);
        
        // If all valves have moved successfully, proceed to setting solenoids
        IF fbValveControl[1].bMoveDone AND fbValveControl[2].bMoveDone AND fbValveControl[3].bMoveDone AND fbValveControl[4].bMoveDone AND fbValveControl[5].bMoveDone THEN
			bMoveValves := FALSE;
            eState := SET_SOLENOIDS;
        // If any valve encounters an error, transition to ERROR state
        ELSIF fbValveControl[1].bError OR fbValveControl[2].bError OR fbValveControl[3].bError OR fbValveControl[4].bError OR fbValveControl[5].bError THEN
            bLeakTestError := TRUE;
            sLTMessageError := 'Failed to position valves';
			//Event Logger message
			fbEventHandler(
				bExecute  := bExecuteEvent,
				eEventName := E_Events.ERROR,
				sSystem    := 'Leak Test',
				sMessage   := 'Failed positioning the VICI Valves!',
				bDone      => bEventDone
			);
			ResetEventTrigger();
			//moving to error state
            eState := ERROR;
        END_IF;
    
    SET_SOLENOIDS:
        // Sets the solenoids to LEAKTEST configuration
        fbSolenoidControl(bExecute := TRUE, eSolenoidSet := E_SolenoidSet.LEAKTEST);
        IF fbSolenoidControl.bDone THEN
			bPressureTime := TRUE;
			fbSolenoidControl(bExecute := FALSE);	//Reset fbSolenoidControl
			//moving to next state
            eState := PRESSURIZE;
        END_IF;

    PRESSURIZE:
        // Waits for the pressurization time to complete
        tonPressuring(IN := bPressureTime, PT := T#2S);
        IF tonPressuring.Q THEN
            // Switches solenoids to LEAKTESTMONITORING configuration before monitoring begins
            fbSolenoidControl(bExecute := TRUE, eSolenoidSet := E_SolenoidSet.LEAKTESTMONITORING);
            IF fbSolenoidControl.bDone THEN
				bPressureTime := FALSE;
                eState := CLOSE_AIR;
            END_IF;
        END_IF;
		
	CLOSE_AIR:
		// Sets the solenoids to LEAKTEST configuration
        fbSolenoidControl(bExecute := TRUE, eSolenoidSet := E_SolenoidSet.LEAKTESTMONITORING);
        IF fbSolenoidControl.bDone THEN
			bPressureTime := TRUE;
			fbSolenoidControl(bExecute := FALSE);	//Reset fbSolenoidControl
			//moving to next state
            eState := MONITOR;
        END_IF;
		
	
    MONITOR:
        // Reads and scales the pressure sensor value
		bPressureInput := TRUE;
		IF bPressureInput THEN
        	fbSensorScaling(iRawValue := GVL_IO.gAnalogInputs.rLeakTestPressureSensor, iSensorID := 3, rPressure => rScaledPressure);
        END_IF
		
		IF NOT 	bPressureTaken THEN
			rClosedSystemPressure := rScaledPressure * 0.95;
			bPressureTaken := TRUE;
		ELSE
			tonMonitoring(in := bPressureInput, PT := tMonitorTime);
			// Verifies if the measured pressure meets the required limit
			IF rScaledPressure >= rClosedSystemPressure AND tonMonitoring.Q THEN
				//Event looger message
				fbEventHandler(
					bExecute := bExecuteEvent, eEventName := E_Events.INFO, sSystem := 'Leak Test', sMessage := 'Leak Test performed with Success!', bDone => bEventDone);
				ResetEventTrigger();
				bPressureTaken := FALSE;
				//moving to next state
				eState := DONE;
			ELSIF rScaledPressure < rClosedSystemPressure THEN
				eState := ERROR;
				bPressureTaken := FALSE;
				fbEventHandler( bExecute  := bExecuteEvent, eEventName := E_Events.ERROR, sSystem := 'Leak Test', sMessage := 'Pressure below required limit!', bDone => bEventDone);
				ResetEventTrigger();
			END_IF;
		END_IF

    DONE:
		bLeakTestDone := TRUE;
        // Successfully completed the leak test
		IF NOT bExecute THEN
            eState := POSITION_VALVES;
            bLeakTestDone 	:= FALSE;
        END_IF;

    ERROR:
		bLeakTestError := TRUE;
        // Test encountered an error, execution halted
		IF NOT bExecute THEN
            eState := POSITION_VALVES;
            bLeakTestDone 	:= FALSE;
        END_IF;

END_CASE;

]]></ST>
    </Implementation>
    <Action Name="ResetEventTrigger" Id="{8666df6c-be4b-4df6-ad65-7299cde62512}">
      <Implementation>
        <ST><![CDATA[IF bEventDone THEN
        bExecuteEvent := FALSE;
        bEventDone := FALSE;
END_IF;]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_LeakTest">
      <LineId Id="311" Count="7" />
      <LineId Id="445" Count="0" />
      <LineId Id="319" Count="8" />
      <LineId Id="447" Count="0" />
      <LineId Id="328" Count="4" />
      <LineId Id="389" Count="0" />
      <LineId Id="382" Count="6" />
      <LineId Id="381" Count="0" />
      <LineId Id="409" Count="0" />
      <LineId Id="333" Count="6" />
      <LineId Id="451" Count="0" />
      <LineId Id="505" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="341" Count="9" />
      <LineId Id="453" Count="0" />
      <LineId Id="351" Count="2" />
      <LineId Id="494" Count="1" />
      <LineId Id="498" Count="3" />
      <LineId Id="504" Count="0" />
      <LineId Id="502" Count="1" />
      <LineId Id="354" Count="0" />
      <LineId Id="496" Count="1" />
      <LineId Id="355" Count="1" />
      <LineId Id="410" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="357" Count="1" />
      <LineId Id="509" Count="1" />
      <LineId Id="512" Count="0" />
      <LineId Id="516" Count="0" />
      <LineId Id="514" Count="0" />
      <LineId Id="455" Count="0" />
      <LineId Id="359" Count="1" />
      <LineId Id="406" Count="0" />
      <LineId Id="399" Count="1" />
      <LineId Id="398" Count="0" />
      <LineId Id="527" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="362" Count="1" />
      <LineId Id="366" Count="0" />
      <LineId Id="529" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="517" Count="0" />
      <LineId Id="368" Count="1" />
      <LineId Id="456" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="519" Count="2" />
      <LineId Id="518" Count="0" />
      <LineId Id="372" Count="1" />
      <LineId Id="458" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="524" Count="2" />
      <LineId Id="523" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_LeakTest.ResetEventTrigger">
      <LineId Id="2" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>