<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_RecoveryPhase" Id="{83f5ec5b-6c67-443f-8065-7a3e8ba1c7ee}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_RecoveryPhase

VAR_INPUT
	//RecipeParameters 	: REFERENCE TO GVL_RecipeParameters;	//Parâmetros da receita 
    //aValveConfigs 		: ARRAY [1..5] OF ST_ValveConfig;       //Configuração das válvulas de 6 posições 
    aSolenoidSets 		: ARRAY [1..5] OF ST_SolenoidSet;       //Conjunto de válvulas solenoides 
    bExecute : BOOL; 
END_VAR

VAR_OUTPUT
	bSuccess 		: BOOL;			//Indica que todas as etapas foram concluídas com sucesso 
    bError 			: BOOL;         //Indica que houve erro em alguma etapa 
    iCurrentStep 	: INT;        	//Etapa atual do processo 
END_VAR

VAR
	//aValveControllers 	: ARRAY [1..5] OF FB_ValveControl;  //Controle das válvulas de 6 posições 
    aPumpControllers 	: ARRAY [1..10] OF FB_PumpControl;  //Controle das bombas 
    bStepSuccess 		: BOOL;         					//Sucesso da etapa atual 
    bStepError 			: BOOL;           					//Erro na etapa atual 
	iValveIndex 		: INT;
	iPumpIndex 			: INT;
	bPumpReverse 		: BOOL := FALSE;
	bPumpforward 		: BOOL := TRUE;
	TON_SoakTime 		: TON;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
CASE iCurrentStep OF
    0: 
        //Espera pelo comando Execute para iniciar 
        IF bExecute THEN
            iCurrentStep := 1; //Iniciar o processo no passo 1
            bSuccess := FALSE;
            bError := FALSE;
        END_IF;

    1: 
        //Passo 1: Metering Solvent Number 1 (Rinse 1)
        bStepSuccess := TRUE;
        bStepError := FALSE;

        FOR iValveIndex := 1 TO 5 DO
            aValveControllers[iValveIndex](
                ValveConfig := aValveConfigs[iValveIndex],
                PositionRequest := RecipeParameters.aSolventN[1]
            );
            IF NOT aValveControllers[iValveIndex].PositionReached THEN
                bStepSuccess := FALSE;
            END_IF;
        END_FOR;

        IF bStepSuccess THEN
            //Configurar bombas para reverse e movimentar de acordo com os volumes
            FOR iPumpIndex := 1 TO 10 DO
                aPumpControllers[iPumpIndex](
                    rVolume := RecipeParameters.aT_IC_Volume[iPumpIndex],
                    iVelocity := RecipeParameters.aVelocity[1],
                    bDirection := bPumpReverse
                );
                IF aPumpControllers[iPumpIndex].bError THEN
                    bStepError := TRUE;
                END_IF;
            END_FOR;

            IF NOT bStepError THEN
                iCurrentStep := 2; //Ir para o próximo passo 
            ELSE
                bError := TRUE;
                iCurrentStep := -1; //Ir para estado de erro 
            END_IF;
        END_IF;

    2:
        //Passo 2: Re-circulate Solvent 1 (Rinse 1)
        bStepSuccess := TRUE;

        FOR iValveIndex := 1 TO 5 DO
            aValveControllers[iValveIndex](
                ValveConfig := aValveConfigs[iValveIndex],
                PositionRequest := 5 //Recirculação
            );
            IF NOT aValveControllers[iValveIndex].PositionReached THEN
                bStepSuccess := FALSE;
            END_IF;
        END_FOR;

        IF bStepSuccess THEN
            //Configurar bombas para forward e movimentar pelo tempo definido 
            FOR iPumpIndex := 1 TO 10 DO
                aPumpControllers[iPumpIndex](
                    rVolume := 0, //Ignorar volume no modo recirculação
                    iVelocity := RecipeParameters.aVelocity[1],
                    bDirection := bPumpForward,
                    tRunTime := RecipeParameters.tAgitate1Time
                );
                IF aPumpControllers[iPumpIndex].bError THEN
                    bStepError := TRUE;
                END_IF;
            END_FOR;

            IF NOT bStepError THEN
                iCurrentStep := 3; //Ir para o próximo passo 
            ELSE
                bError := TRUE;
                iCurrentStep := -1; //Ir para estado de erro 
            END_IF;
        END_IF;

    3:
        //Passo 3: Solvent Soak
        IF bStepSuccess THEN
            TON_SoakTime(IN := TRUE, PT := RecipeParameters.tSoakTime);

            IF TON_SoakTime.Q THEN
                iCurrentStep := 4; //Ir para o próximo passo 
            END_IF;
        END_IF;

    4:
        //Passo 4: Limpando a linha e voltando solvente para as jarras 
        bStepSuccess := TRUE;

        //Configurar bombas para reverse e movimentar volumes 
        FOR iPumpIndex := 1 TO 10 DO
            aPumpControllers[iPumpIndex](
                rVolume := RecipeParameters.aT_IC_Volume[iPumpIndex],
                iVelocity := RecipeParameters.aVelocity[1],
                bDirection := bPumpReverse
            );
            IF aPumpControllers[iPumpIndex].bError THEN
                bStepError := TRUE;
            END_IF;
        END_FOR;

        IF NOT bStepError THEN
            iCurrentStep := 5; //Ir para o próximo passo
        ELSE
            bError := TRUE;
            iCurrentStep := -1; //Ir para estado de erro
        END_IF;
	
	 5: //TODO Moving the motors and filling the vials

    -1:
        //Estado de erro
        bError := TRUE;
        bSuccess := FALSE;

    ELSE
        //Finalizar com sucesso
        bSuccess := TRUE;
        iCurrentStep := 0; //Reset para o próximo ciclo 
END_CASE;
*)]]></ST>
    </Implementation>
    <LineIds Name="FB_RecoveryPhase">
      <LineId Id="222" Count="0" />
      <LineId Id="42" Count="112" />
      <LineId Id="193" Count="1" />
      <LineId Id="155" Count="9" />
      <LineId Id="9" Count="0" />
      <LineId Id="223" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>