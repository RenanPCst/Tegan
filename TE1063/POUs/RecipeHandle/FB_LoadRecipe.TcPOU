<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_LoadRecipe" Id="{fdbedb76-49e0-47f1-8b40-c95081ed8fdc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_LoadRecipe
VAR_INPUT
	sFileName : STRING(255); // Ex: 'C:\TwinCAT\Recipes\NomeDaReceita.json'
    bExecute  : BOOL;
END_VAR
VAR_OUTPUT
	bBusy   : BOOL;
    bDone   : BOOL;
    bError  : BOOL;
    nErrId  : UDINT;
END_VAR
VAR
	fbFileOpen  : FB_FileOpen;
    fbFileRead  : FB_FileRead;
    fbFileClose : FB_FileClose;
    fbJson      : FB_JsonDomParser;

    hFile    : UINT;
    sBuffer  : STRING(8192);
    jsonRoot : SJsonValue;
    jsonVal  : SJsonValue;
    idx      : INT;
    step     : INT;

    sPath    : STRING(255);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE step OF
0:
    IF bExecute THEN
        bBusy := TRUE;
        bDone := FALSE;
        bError := FALSE;
        nErrId := 0;

        fbFileOpen(
            sNetId := '',
            sPathName := sFileName,
            nMode := FOPEN_MODEREAD OR FOPEN_MODETEXT,
            bExecute := TRUE
        );

        step := 10;
    END_IF

10:
    fbFileOpen(bExecute := FALSE);
    IF NOT fbFileOpen.bBusy THEN
        IF fbFileOpen.bError THEN
            bError := TRUE;
            nErrId := fbFileOpen.nErrId;
            step := 100;
        ELSE
            hFile := fbFileOpen.hFile;
            fbFileRead(
                sNetId := '',
                hFile := hFile,
                pReadBuff := ADR(sBuffer),
                cbReadLen := SIZEOF(sBuffer),
                bExecute := TRUE
            );
            step := 20;
        END_IF
    END_IF

20:
    fbFileRead(bExecute := FALSE);
    IF NOT fbFileRead.bBusy THEN
        IF fbFileRead.bError THEN
            bError := TRUE;
            nErrId := fbFileRead.nErrId;
            step := 90;
        ELSE
            fbFileClose(sNetId := '', hFile := hFile, bExecute := TRUE);
            step := 30;
        END_IF
    END_IF

30:
    fbFileClose(bExecute := FALSE);
    IF NOT fbFileClose.bBusy THEN
        IF fbFileClose.bError THEN
            bError := TRUE;
            nErrId := fbFileClose.nErrId;
            step := 100;
        ELSE
            step := 40;
        END_IF
    END_IF

40:
    jsonRoot := fbJson.ParseDocument(sBuffer);
    IF jsonRoot = 0 THEN
        bError := TRUE;
        nErrId := 16#F1000001; // Código customizado para JSON inválido
        step := 100;
    ELSE
        step := 50;
    END_IF

50: //Fill the variables with Json buffer info [Parse Json file]
    sPath := 'stInfo/sMethodName';
    GVL_Recipe.stCurrentRecipe.stInfo.sMethodName := fbJson.GetString(fbJson.FindMemberPath(jsonRoot, sPath));

    sPath := 'stInfo/sCreatedBy';
    GVL_Recipe.stCurrentRecipe.stInfo.sCreatedBy := fbJson.GetString(fbJson.FindMemberPath(jsonRoot, sPath));

    sPath := 'stInfo/dCreationDate';
    GVL_Recipe.stCurrentRecipe.stInfo.dCreationDate := STRING_TO_DATE(fbJson.GetString(fbJson.FindMemberPath(jsonRoot, sPath)));

    sPath := 'stInfo/iRevision';
    GVL_Recipe.stCurrentRecipe.stInfo.iRevision := fbJson.GetInt(fbJson.FindMemberPath(jsonRoot, sPath));

    FOR idx := 1 TO 4 DO
        sPath := CONCAT('stSolventsTimes/aSolventN#', INT_TO_STRING(idx-1));
        GVL_Recipe.stCurrentRecipe.stSolventsTimes.aSolventN[idx] := TO_USINT(fbJson.GetInt(fbJson.FindMemberPath(jsonRoot, sPath)));

        sPath := CONCAT('stSolventsTimes/aTime#', INT_TO_STRING(idx-1));
        GVL_Recipe.stCurrentRecipe.stSolventsTimes.aTime[idx] := STRING_TO_TIME(fbJson.GetString(fbJson.FindMemberPath(jsonRoot, sPath)));

        sPath := CONCAT('stSolventsTimes/aVelocity#', INT_TO_STRING(idx-1));
        GVL_Recipe.stCurrentRecipe.stSolventsTimes.aVelocity[idx] := TO_INT(fbJson.GetInt(fbJson.FindMemberPath(jsonRoot, sPath)));
    END_FOR

    FOR idx := 1 TO 4 DO
        sPath := CONCAT('stVolumes/aT_IC_Volume#', INT_TO_STRING(idx-1));
        GVL_Recipe.stCurrentRecipe.stVolumes.aT_IC_Volume[idx] := LREAL_TO_REAL(fbJson.GetDouble(fbJson.FindMemberPath(jsonRoot, sPath)));
		
		sPath := CONCAT('stVolumes/aS0_Volume#', INT_TO_STRING(idx-1));
        GVL_Recipe.stCurrentRecipe.stVolumes.aS0_Volume[idx] := LREAL_TO_REAL(fbJson.GetDouble(fbJson.FindMemberPath(jsonRoot, sPath)));
		
		sPath := CONCAT('stVolumes/aS1_Volume#', INT_TO_STRING(idx-1));
        GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[idx] := LREAL_TO_REAL(fbJson.GetDouble(fbJson.FindMemberPath(jsonRoot, sPath)));
		
		sPath := CONCAT('stVolumes/aS2_Volume#', INT_TO_STRING(idx-1));
        GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[idx] := LREAL_TO_REAL(fbJson.GetDouble(fbJson.FindMemberPath(jsonRoot, sPath)));
		
		sPath := CONCAT('stVolumes/aS3_Volume#', INT_TO_STRING(idx-1));
        GVL_Recipe.stCurrentRecipe.stVolumes.aS3_Volume[idx] := LREAL_TO_REAL(fbJson.GetDouble(fbJson.FindMemberPath(jsonRoot, sPath)));
		
		sPath := CONCAT('stVolumes/aS4_Volume#', INT_TO_STRING(idx-1));
        GVL_Recipe.stCurrentRecipe.stVolumes.aS4_Volume[idx] := LREAL_TO_REAL(fbJson.GetDouble(fbJson.FindMemberPath(jsonRoot, sPath)));
		
		sPath := CONCAT('stVolumes/aS5_Volume#', INT_TO_STRING(idx-1));
        GVL_Recipe.stCurrentRecipe.stVolumes.aS5_Volume[idx] := LREAL_TO_REAL(fbJson.GetDouble(fbJson.FindMemberPath(jsonRoot, sPath)));
		
		sPath := CONCAT('stVolumes/aS6_Volume#', INT_TO_STRING(idx-1));
        GVL_Recipe.stCurrentRecipe.stVolumes.aS6_Volume[idx] := LREAL_TO_REAL(fbJson.GetDouble(fbJson.FindMemberPath(jsonRoot, sPath)));
		
		sPath := CONCAT('stVolumes/aS7_Volume#', INT_TO_STRING(idx-1));
        GVL_Recipe.stCurrentRecipe.stVolumes.aS7_Volume[idx] := LREAL_TO_REAL(fbJson.GetDouble(fbJson.FindMemberPath(jsonRoot, sPath)));
		
		sPath := CONCAT('stVolumes/aF_Volume#', INT_TO_STRING(idx-1));
        GVL_Recipe.stCurrentRecipe.stVolumes.aF_Volume[idx] := LREAL_TO_REAL(fbJson.GetDouble(fbJson.FindMemberPath(jsonRoot, sPath)));
		
    END_FOR

    sPath := 'stOtherParams/tSoakTime';
    GVL_Recipe.stCurrentRecipe.stOtherParams.tSoakTime := STRING_TO_TIME(fbJson.GetString(fbJson.FindMemberPath(jsonRoot, sPath)));
	
	sPath := 'stOtherParams/tAgitate1Time';
    GVL_Recipe.stCurrentRecipe.stOtherParams.tAgitate1Time := STRING_TO_TIME(fbJson.GetString(fbJson.FindMemberPath(jsonRoot, sPath)));
	
	sPath := 'stOtherParams/tAgitate2Time';
    GVL_Recipe.stCurrentRecipe.stOtherParams.tAgitade2Time := STRING_TO_TIME(fbJson.GetString(fbJson.FindMemberPath(jsonRoot, sPath)));
	
	sPath := 'stOtherParams/iVialsToFill';
    GVL_Recipe.stCurrentRecipe.stOtherParams.iVialsToFill := TO_USINT(fbJson.GetInt(fbJson.FindMemberPath(jsonRoot, sPath)));
	
	sPath := 'stOtherParams/rVialPrimeVol';
    GVL_Recipe.stCurrentRecipe.stOtherParams.rVialPrimeVol := LREAL_TO_REAL(fbJson.GetDouble(fbJson.FindMemberPath(jsonRoot, sPath)));
	
	sPath := 'stOtherParams/rVial1FillVol';
    GVL_Recipe.stCurrentRecipe.stOtherParams.rVial1FillVol := LREAL_TO_REAL(fbJson.GetDouble(fbJson.FindMemberPath(jsonRoot, sPath)));
	
	sPath := 'stOtherParams/rVials2_4FillVol';
    GVL_Recipe.stCurrentRecipe.stOtherParams.rVials2_4FillVol := LREAL_TO_REAL(fbJson.GetDouble(fbJson.FindMemberPath(jsonRoot, sPath)));
	
	sPath := 'stOtherParams/tAirDryTime';
    GVL_Recipe.stCurrentRecipe.stOtherParams.tAirDryTime := STRING_TO_TIME(fbJson.GetString(fbJson.FindMemberPath(jsonRoot, sPath)));

    step := 60;
	
60: // Fill the HMI datagrids for recipe screen
	//Recipe Header info
	GVL_HMI.stRecipeInfo.sMethodName := GVL_Recipe.stCurrentRecipe.stInfo.sMethodName;
	GVL_HMI.stRecipeInfo.sCreatedBy := GVL_Recipe.stCurrentRecipe.stInfo.sCreatedBy;
	GVL_HMI.stRecipeInfo.dCreationDate := GVL_Recipe.stCurrentRecipe.stInfo.dCreationDate;
	GVL_HMI.stRecipeInfo.iRevision := GVL_Recipe.stCurrentRecipe.stInfo.iRevision;
	
	// Solvents and Times datagrid
	// Row 1: Solvent #
	GVL_HMI.aSolventAndTimesRows[1].Rinse1 := GVL_Recipe.stCurrentRecipe.stSolventsTimes.aSolventN[1];
	GVL_HMI.aSolventAndTimesRows[1].Rinse2 := GVL_Recipe.stCurrentRecipe.stSolventsTimes.aSolventN[2];
	GVL_HMI.aSolventAndTimesRows[1].Wash1  := GVL_Recipe.stCurrentRecipe.stSolventsTimes.aSolventN[3];
	GVL_HMI.aSolventAndTimesRows[1].Wash2  := GVL_Recipe.stCurrentRecipe.stSolventsTimes.aSolventN[4];
	
	// Row 2: Time (seconds)
	GVL_HMI.aSolventAndTimesRows[2].Rinse1 := DWORD_TO_INT(TIME_TO_DWORD(GVL_Recipe.stCurrentRecipe.stSolventsTimes.aTime[1]) / 1000); // TIME in seconds
	GVL_HMI.aSolventAndTimesRows[2].Rinse2 := DWORD_TO_INT(TIME_TO_DWORD(GVL_Recipe.stCurrentRecipe.stSolventsTimes.aTime[2]) / 1000); // TIME in seconds
	GVL_HMI.aSolventAndTimesRows[2].Wash1  := DWORD_TO_INT(TIME_TO_DWORD(GVL_Recipe.stCurrentRecipe.stSolventsTimes.aTime[3]) / 1000); // TIME in seconds
	GVL_HMI.aSolventAndTimesRows[2].Wash2  := DWORD_TO_INT(TIME_TO_DWORD(GVL_Recipe.stCurrentRecipe.stSolventsTimes.aTime[4]) / 1000); // TIME in seconds
	
	// Row 3: Velocity
	GVL_HMI.aSolventAndTimesRows[3].Rinse1 := GVL_Recipe.stCurrentRecipe.stSolventsTimes.aVelocity[1];
	GVL_HMI.aSolventAndTimesRows[3].Rinse2 := GVL_Recipe.stCurrentRecipe.stSolventsTimes.aVelocity[2];
	GVL_HMI.aSolventAndTimesRows[3].Wash1  := GVL_Recipe.stCurrentRecipe.stSolventsTimes.aVelocity[3];
	GVL_HMI.aSolventAndTimesRows[3].Wash2  := GVL_Recipe.stCurrentRecipe.stSolventsTimes.aVelocity[4];
	
	//Volumes Datagrid
	// 1:Rinse1, 2:Rinse2, 3:Wash1, 4:Wash2
    GVL_HMI.aVolumeRows[1].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aT_IC_Volume[1];
    GVL_HMI.aVolumeRows[1].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aT_IC_Volume[2];
    GVL_HMI.aVolumeRows[1].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aT_IC_Volume[3];
    GVL_HMI.aVolumeRows[1].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aT_IC_Volume[4];

    GVL_HMI.aVolumeRows[2].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aS0_Volume[1];
    GVL_HMI.aVolumeRows[2].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aS0_Volume[2];
    GVL_HMI.aVolumeRows[2].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aS0_Volume[3];
    GVL_HMI.aVolumeRows[2].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aS0_Volume[4];

    GVL_HMI.aVolumeRows[3].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[1];
    GVL_HMI.aVolumeRows[3].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[2];
   	GVL_HMI.aVolumeRows[3].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[3];
    GVL_HMI.aVolumeRows[3].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[4];
	
	GVL_HMI.aVolumeRows[4].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[1];
    GVL_HMI.aVolumeRows[4].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[2];
   	GVL_HMI.aVolumeRows[4].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[3];
    GVL_HMI.aVolumeRows[4].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[4];
	
	GVL_HMI.aVolumeRows[5].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[1];
    GVL_HMI.aVolumeRows[5].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[2];
   	GVL_HMI.aVolumeRows[5].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[3];
    GVL_HMI.aVolumeRows[5].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[4];
	
	GVL_HMI.aVolumeRows[6].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[1];
    GVL_HMI.aVolumeRows[6].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[2];
   	GVL_HMI.aVolumeRows[6].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[3];
    GVL_HMI.aVolumeRows[6].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[4];
	
	GVL_HMI.aVolumeRows[7].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[1];
    GVL_HMI.aVolumeRows[7].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[2];
   	GVL_HMI.aVolumeRows[7].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[3];
    GVL_HMI.aVolumeRows[7].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[4];
	
	GVL_HMI.aVolumeRows[8].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[1];
    GVL_HMI.aVolumeRows[8].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[2];
   	GVL_HMI.aVolumeRows[8].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[3];
    GVL_HMI.aVolumeRows[8].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[4];
	
	GVL_HMI.aVolumeRows[9].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[1];
    GVL_HMI.aVolumeRows[9].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[2];
   	GVL_HMI.aVolumeRows[9].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[3];
    GVL_HMI.aVolumeRows[9].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[4];

    GVL_HMI.aVolumeRows[10].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aF_Volume[1];
    GVL_HMI.aVolumeRows[10].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aF_Volume[2];
    GVL_HMI.aVolumeRows[10].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aF_Volume[3];
    GVL_HMI.aVolumeRows[10].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aF_Volume[4];
	
	//Other Params datagrid
	GVL_HMI.aOtherParamsRows[1].Value     := TIME_TO_DWORD(GVL_Recipe.stCurrentRecipe.stOtherParams.tSoakTime) / 1000.0; // Soak Time
	GVL_HMI.aOtherParamsRows[2].Value     := TIME_TO_DWORD(GVL_Recipe.stCurrentRecipe.stOtherParams.tAgitate1Time) / 1000.0; // Agitate 1 Time
	GVL_HMI.aOtherParamsRows[3].Value     := TIME_TO_DWORD(GVL_Recipe.stCurrentRecipe.stOtherParams.tAgitade2Time) / 1000.0; // Agitate 2 Time
	GVL_HMI.aOtherParamsRows[4].Value     := GVL_Recipe.stCurrentRecipe.stOtherParams.iVialsToFill; // Vials to Fill
	GVL_HMI.aOtherParamsRows[5].Value     := GVL_Recipe.stCurrentRecipe.stOtherParams.rVialPrimeVol; // Vial Prime Vol
	GVL_HMI.aOtherParamsRows[6].Value     := GVL_Recipe.stCurrentRecipe.stOtherParams.rVial1FillVol; // Vial 1 Fill Vol
	GVL_HMI.aOtherParamsRows[7].Value     := GVL_Recipe.stCurrentRecipe.stOtherParams.rVials2_4FillVol; // Vials 2-4 Fill Vol
	GVL_HMI.aOtherParamsRows[8].Value     := TIME_TO_DWORD(GVL_Recipe.stCurrentRecipe.stOtherParams.tAirDryTime) / 1000.0; // Air Dry Time
	
	step := 100;

90:
    fbFileClose(sNetId := '', hFile := hFile, bExecute := TRUE);
    step := 100;
	
100:
    bBusy := FALSE;
    bDone := NOT bError;
    IF NOT bExecute THEN
        step := 0;
    END_IF
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="FB_LoadRecipe">
      <LineId Id="916" Count="63" />
      <LineId Id="1059" Count="0" />
      <LineId Id="1067" Count="5" />
      <LineId Id="987" Count="28" />
      <LineId Id="1073" Count="1" />
      <LineId Id="1077" Count="21" />
      <LineId Id="1075" Count="0" />
      <LineId Id="1099" Count="1" />
      <LineId Id="1076" Count="0" />
      <LineId Id="1016" Count="3" />
      <LineId Id="1101" Count="20" />
      <LineId Id="1020" Count="1" />
      <LineId Id="1171" Count="0" />
      <LineId Id="1173" Count="0" />
      <LineId Id="1253" Count="0" />
      <LineId Id="1255" Count="0" />
      <LineId Id="1258" Count="2" />
      <LineId Id="1257" Count="0" />
      <LineId Id="1193" Count="0" />
      <LineId Id="1174" Count="0" />
      <LineId Id="1176" Count="5" />
      <LineId Id="1183" Count="5" />
      <LineId Id="1190" Count="2" />
      <LineId Id="1172" Count="0" />
      <LineId Id="1194" Count="1" />
      <LineId Id="1197" Count="9" />
      <LineId Id="1208" Count="4" />
      <LineId Id="1221" Count="0" />
      <LineId Id="1223" Count="2" />
      <LineId Id="1222" Count="0" />
      <LineId Id="1226" Count="0" />
      <LineId Id="1228" Count="2" />
      <LineId Id="1227" Count="0" />
      <LineId Id="1231" Count="0" />
      <LineId Id="1233" Count="2" />
      <LineId Id="1232" Count="0" />
      <LineId Id="1236" Count="0" />
      <LineId Id="1238" Count="2" />
      <LineId Id="1237" Count="0" />
      <LineId Id="1241" Count="0" />
      <LineId Id="1243" Count="2" />
      <LineId Id="1242" Count="0" />
      <LineId Id="1246" Count="0" />
      <LineId Id="1248" Count="2" />
      <LineId Id="1247" Count="0" />
      <LineId Id="1214" Count="4" />
      <LineId Id="1262" Count="0" />
      <LineId Id="1264" Count="0" />
      <LineId Id="1269" Count="0" />
      <LineId Id="1274" Count="0" />
      <LineId Id="1279" Count="0" />
      <LineId Id="1284" Count="0" />
      <LineId Id="1289" Count="0" />
      <LineId Id="1294" Count="0" />
      <LineId Id="1299" Count="0" />
      <LineId Id="1304" Count="0" />
      <LineId Id="1265" Count="0" />
      <LineId Id="1263" Count="0" />
      <LineId Id="1022" Count="3" />
      <LineId Id="1148" Count="0" />
      <LineId Id="1027" Count="5" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>