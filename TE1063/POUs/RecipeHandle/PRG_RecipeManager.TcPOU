<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_RecipeManager" Id="{f4641f87-7b16-4bb3-8169-d73676afbb75}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_RecipeManager
VAR
	fbLoadRecipe  	: FB_LoadRecipe;
    fbListFiles  	: FB_ListRecipeFiles;
	fbDeleteRecipe 	: FB_DeleteRecipe;
	fbSaveRecipe 	: FB_SaveRecipe;

    sPrefix      : STRING(64) := 'C:\TwinCAT\Recipes\';
    sFileName    : STRING(255);
	
	bDatagridRowsNaming		 : BOOL := FALSE;
	bClearAvailableFiles	 : BOOL := FALSE;
	bClearAvailableFilesDone : BOOL := FALSE;
	
	bDatagridToRecipeDone	: BOOL := FALSE;
		
	i	: INT;
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Naming the datagrid 1st column with the names in the HMI Recipe Screen just once
IF NOT bDatagridRowsNaming THEN
	ACT_DatagridsRowNaming();
END_IF

// <Load button> ############# Look up for the recipe files in the folder and fill up the GVL_Recipe.aAvailableFiles[]. ######################### 
IF GVL_HMI.bRefreshRecipeList THEN
	//GVL_HMI.bRecipeCorrectLoaded := FALSE;
	//GVL_HMI.bRecipeLoadFailed := FALSE;
	bClearAvailableFiles := TRUE;
	IF bClearAvailableFilesDone THEN
		fbListFiles(bExecute := TRUE);
	END_IF
ELSE
	bClearAvailableFiles := FALSE;
	bClearAvailableFilesDone := FALSE;
    fbListFiles(bExecute := FALSE);
END_IF

// Clear the Available files datagrid in the load file popup
IF bClearAvailableFiles THEN
	ACT_ClearAvailableFiles();
END_IF

// Reset load actions once its done
IF fbListFiles.bDone THEN
	GVL_HMI.bRefreshRecipeList := FALSE;
END_IF

 //Reset file name
sFileName := '';

// Run the loading recipe from selected row in the recipe load popup
sFileName := CONCAT(sPrefix, CONCAT(GVL_Recipe.sSelectedRecipeName, '.json')); // File naming assemble for the selected row in the recipe load popup
fbLoadRecipe( sFileName := sFileName, bExecute := GVL_HMI.bRecipeLoadFromFile );

IF fbLoadRecipe.bError THEN
	fbLoadRecipe( sFileName := sFileName, bExecute := FALSE);
	GVL_HMI.bRecipeLoadFailed := TRUE;
END_IF

// After the recipe loading, reseting and setting the flags
IF NOT fbLoadRecipe.bBusy AND NOT fbLoadRecipe.bError AND GVL_HMI.bRecipeLoadFromFile THEN
    GVL_HMI.bRecipeLoadFromFile := FALSE;
	GVL_HMI.bRecipeCorrectLoaded := TRUE;
END_IF
// <\Load button> ############# END ##############

// <Save Button> ############# Fill stCurrentRecipe from HMI datagrids if save button is pressed ########################
IF GVL_HMI.bRecipeSaveButton THEN
	ACT_DatagridToRecipe();
	IF bDatagridToRecipeDone THEN
		fbSaveRecipe(bExecute := TRUE, sUser := GVL_HMI.stRecipeInfo.sCreatedBy);
		IF fbSaveRecipe.bDone AND NOT fbSaveRecipe.bError THEN
			GVL_HMI.stRecipeInfo.iRevision := GVL_Recipe.stCurrentRecipe.stInfo.iRevision; //Update the datagrid revision that does not come from the grid
			fbSaveRecipe(bExecute := FALSE);
			GVL_HMI.bRecipeSaveDone := TRUE; //Response Success flag to HMI
			GVL_HMI.bRecipeSaveButton := FALSE;	
			bDatagridToRecipeDone := FALSE;
			ELSE IF fbSaveRecipe.bError THEN
				GVL_HMI.bRecipeSaveError := TRUE; //Response Error flag to HMI
			END_IF
		END_IF
		
	END_IF
END_IF
// <\Save Button> ############# END ########################

// <Cancel Button> ############# Reload the datagrids with the recipe in stCurrentRecipe if the bt cancel is pressed during new recipe ########################
IF GVL_HMI.bReloadRecipeDatagrids THEN
	ACT_RecipeToDatagrid();
END_IF
// <\Cancel Button> ############# END ########################

// <Activate Button> ############# Transfer data from stCurrentRecipe for stActivatedRecipe witch will be used on the cycle  ########################
IF GVL_HMI.bRecipeActivateButton THEN
	GVL_Recipe.stActiveRecipe := GVL_Recipe.stCurrentRecipe; //Only fill stActiveRecipe if button Activate was pressed on hmi. 
	GVL_Recipe.bIsThereRecipeActivated := TRUE;
END_IF
// <\Activate Button> ############# END ########################

// <Delete Button> ############# Moves the loaded Recipe file from the root folder for the _deleted folder ########################
IF GVL_HMI.bDeleteRecipeButton THEN
	ACT_PopulateDeleteRecipeInfo();
	GVL_HMI.bDeleteRecipeDone := FALSE;
	GVL_HMI.bDeleteRecipeError := FALSE;
END_IF

fbDeleteRecipe(bExecute := GVL_HMI.bDeleteRecipeConfirm, stFileInfo := GVL_HMI.stDeleteRecipeInfo);

IF fbDeleteRecipe.bDone THEN
	IF NOT fbDeleteRecipe.bError THEN 
		ACT_ClearStCurrentRecipe();
		ACT_ClearHMIDatagrids();
		GVL_HMI.bDeleteRecipeConfirm := FALSE;
		GVL_HMI.bDeleteRecipeDone := TRUE;
	ELSE 
		GVL_HMI.bDeleteRecipeError := TRUE;
	END_IF
END_IF

// <\Delete Button> ############# END ########################

]]></ST>
    </Implementation>
    <Action Name="ACT_ClearAvailableFiles" Id="{69c4ef56-ea89-4269-bd3f-37b671659ed2}">
      <Implementation>
        <ST><![CDATA[//Clear the GVL_Recipe.aAvailableFiles, witch is the list files datagrid data source
IF NOT bClearAvailableFilesDone THEN
	FOR i := 1 TO 50 DO
		GVL_HMI.aAvailableFiles[i].sFileName := '';
		GVL_HMI.aAvailableFiles[i].sCreatedBy := '';
		GVL_HMI.aAvailableFiles[i].iRevision := 0;
		GVL_HMI.aAvailableFiles[i].dtLastModified := DT#1970-01-01-00:00;
		GVL_HMI.aAvailableFiles[i].dCreationDate := D#1970-01-01;
	END_FOR
	
	IF i >= 50 THEN
		bClearAvailableFilesDone := TRUE;
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_ClearHMIDatagrids" Id="{ac68110a-010b-4d2e-a48f-41c3d72a6a58}">
      <Implementation>
        <ST><![CDATA[//Clear the arrays that are binding with the datagrids source on recipe HMI content
//Recipe Info fields
GVL_HMI.stRecipeInfo.dCreationDate := D#1970-01-01;
GVL_HMI.stRecipeInfo.iRevision := 0;
GVL_HMI.stRecipeInfo.sCreatedBy := '';
GVL_HMI.stRecipeInfo.sMethodName := '';

//Solvents and Times datagrid
FOR i := 1 TO 3 DO
	GVL_HMI.aSolventAndTimesRows[i].Rinse1 := 0;
	GVL_HMI.aSolventAndTimesRows[i].Rinse2 := 0;
	GVL_HMI.aSolventAndTimesRows[i].Wash1 := 0;
	GVL_HMI.aSolventAndTimesRows[i].Wash2 := 0;
END_FOR

//Volumes datagrid
FOR i := 1 TO 10 DO
	GVL_HMI.aVolumeRows[i].Rinse1 := 0;
	GVL_HMI.aVolumeRows[i].Rinse2 := 0;
	GVL_HMI.aVolumeRows[i].Wash1 := 0;
	GVL_HMI.aVolumeRows[i].Wash2 := 0;
END_FOR

//Other Parameters datagrid
FOR i := 1 TO 8 DO
	GVL_HMI.aOtherParamsRows[i].Value := 0;
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_ClearStCurrentRecipe" Id="{015909d4-6612-4235-8058-47c7ae45226c}">
      <Implementation>
        <ST><![CDATA[//Clears the array stCurrentRecipe 
//Info
GVL_Recipe.stCurrentRecipe.stInfo.dCreationDate := D#1970-01-01;
GVL_Recipe.stCurrentRecipe.stInfo.iRevision := 0;
GVL_Recipe.stCurrentRecipe.stInfo.sCreatedBy := '';
GVL_Recipe.stCurrentRecipe.stInfo.sMethodName := '';

//Other Parameters
GVL_Recipe.stCurrentRecipe.stOtherParams.iVialsToFill := 0;
GVL_Recipe.stCurrentRecipe.stOtherParams.rVial1FillVol := 0;
GVL_Recipe.stCurrentRecipe.stOtherParams.rVialPrimeVol := 0;
GVL_Recipe.stCurrentRecipe.stOtherParams.rVials2_4FillVol := 0;
GVL_Recipe.stCurrentRecipe.stOtherParams.tAgitate1Time := T#0S;
GVL_Recipe.stCurrentRecipe.stOtherParams.tAgitate2Time := T#0S;
GVL_Recipe.stCurrentRecipe.stOtherParams.tAirDryTime := T#0S;
GVL_Recipe.stCurrentRecipe.stOtherParams.tSoakTime := T#0S;

FOR i := 1 TO 4 DO
	//Solvents and Times
	GVL_Recipe.stCurrentRecipe.stSolventsTimes.aSolventN[i] := 0;
	GVL_Recipe.stCurrentRecipe.stSolventsTimes.aTime[i] := T#0S;
	GVL_Recipe.stCurrentRecipe.stSolventsTimes.aVelocity[i] := 0;
	
	//Volumes
	GVL_Recipe.stCurrentRecipe.stVolumes.aF_Volume[i] := 0;
	GVL_Recipe.stCurrentRecipe.stVolumes.aS0_Volume[i] := 0;
	GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[i] := 0;
	GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := 0;
	GVL_Recipe.stCurrentRecipe.stVolumes.aS3_Volume[i] := 0;
	GVL_Recipe.stCurrentRecipe.stVolumes.aS4_Volume[i] := 0;
	GVL_Recipe.stCurrentRecipe.stVolumes.aS5_Volume[i] := 0;
	GVL_Recipe.stCurrentRecipe.stVolumes.aS6_Volume[i] := 0;
	GVL_Recipe.stCurrentRecipe.stVolumes.aS7_Volume[i] := 0;
	GVL_Recipe.stCurrentRecipe.stVolumes.aT_IC_Volume[i] := 0;
END_FOR

]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_DatagridsRowNaming" Id="{7a5f0b3d-52d7-4ce2-b6cd-e160802e7ce0}">
      <Implementation>
        <ST><![CDATA[//Naming the HMI Recipe Screen Datagrid rows
//TcHmiDatagrid_SolventAndTimes
GVL_HMI.aSolventAndTimesRows[1].Parameter := 'Solvent #';
GVL_HMI.aSolventAndTimesRows[2].Parameter := 'Time';
GVL_HMI.aSolventAndTimesRows[3].Parameter := 'Velocity';

//TcHmiDatagrid_Volumes
GVL_HMI.aVolumeRows[1].Stage := 'T/IC';
GVL_HMI.aVolumeRows[2].Stage := 'S0';
GVL_HMI.aVolumeRows[3].Stage := 'S1';
GVL_HMI.aVolumeRows[4].Stage := 'S2';
GVL_HMI.aVolumeRows[5].Stage := 'S3';
GVL_HMI.aVolumeRows[6].Stage := 'S4';
GVL_HMI.aVolumeRows[7].Stage := 'S5';
GVL_HMI.aVolumeRows[8].Stage := 'S6';
GVL_HMI.aVolumeRows[9].Stage := 'S7';
GVL_HMI.aVolumeRows[10].Stage := 'F';

//TcHmiDatagrid_OtherParams
GVL_HMI.aOtherParamsRows[1].Parameter := 'Soak Time';
GVL_HMI.aOtherParamsRows[2].Parameter := 'Agitate 1 Time';
GVL_HMI.aOtherParamsRows[3].Parameter := 'Agitate 2 Time';
GVL_HMI.aOtherParamsRows[4].Parameter := 'Vials to Fill';
GVL_HMI.aOtherParamsRows[5].Parameter := 'Vial Prime Vol';
GVL_HMI.aOtherParamsRows[6].Parameter := 'Vial 1 Fill Vol';
GVL_HMI.aOtherParamsRows[7].Parameter := 'Vials 2-4 Fill Vol';
GVL_HMI.aOtherParamsRows[8].Parameter := 'Air Dry Time';
//TcHmiDatagrid_OtherParams - Data Units
GVL_HMI.aOtherParamsRows[1].Units     := 'sec';
GVL_HMI.aOtherParamsRows[2].Units     := 'sec';
GVL_HMI.aOtherParamsRows[3].Units     := 'sec';
GVL_HMI.aOtherParamsRows[4].Units     := 'unit';
GVL_HMI.aOtherParamsRows[5].Units     := 'ml';
GVL_HMI.aOtherParamsRows[6].Units     := 'ml';
GVL_HMI.aOtherParamsRows[7].Units     := 'ml';
GVL_HMI.aOtherParamsRows[8].Units     := 'sec';

//Finish the naming
bDatagridRowsNaming := TRUE;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_DatagridToRecipe" Id="{d800e175-fa01-48f3-8ed7-dde5a40976cb}">
      <Implementation>
        <ST><![CDATA[IF NOT bDatagridToRecipeDone THEN
	// ---- Commit RecipeInfo ----	
	GVL_Recipe.stCurrentRecipe.stInfo.sCreatedBy := GVL_HMI.stRecipeInfo.sCreatedBy;
	GVL_Recipe.stCurrentRecipe.stInfo.sMethodName := GVL_HMI.stRecipeInfo.sMethodName;
	

	// ---- Commit SolventAndTimes ----
	FOR i := 1 TO 4 DO // 1: Rinse1, 2: Rinse2, 3: Wash1, 4: Wash2
		// Solvent #
		CASE i OF
			1: GVL_Recipe.stCurrentRecipe.stSolventsTimes.aSolventN[i] := TO_USINT(GVL_HMI.aSolventAndTimesRows[1].Rinse1);
			2: GVL_Recipe.stCurrentRecipe.stSolventsTimes.aSolventN[i] := TO_USINT(GVL_HMI.aSolventAndTimesRows[1].Rinse2);
			3: GVL_Recipe.stCurrentRecipe.stSolventsTimes.aSolventN[i] := TO_USINT(GVL_HMI.aSolventAndTimesRows[1].Wash1);
			4: GVL_Recipe.stCurrentRecipe.stSolventsTimes.aSolventN[i] := TO_USINT(GVL_HMI.aSolventAndTimesRows[1].Wash2);
		END_CASE;
		// Time (convertendo para TIME)
		CASE i OF
			1: GVL_Recipe.stCurrentRecipe.stSolventsTimes.aTime[i] := DWORD_TO_TIME(GVL_HMI.aSolventAndTimesRows[2].Rinse1 * 1000);
			2: GVL_Recipe.stCurrentRecipe.stSolventsTimes.aTime[i] := DWORD_TO_TIME(GVL_HMI.aSolventAndTimesRows[2].Rinse2 * 1000);
			3: GVL_Recipe.stCurrentRecipe.stSolventsTimes.aTime[i] := DWORD_TO_TIME(GVL_HMI.aSolventAndTimesRows[2].Wash1 * 1000);
			4: GVL_Recipe.stCurrentRecipe.stSolventsTimes.aTime[i] := DWORD_TO_TIME(GVL_HMI.aSolventAndTimesRows[2].Wash2 * 1000);
		END_CASE;
		// Velocity
		CASE i OF
			1: GVL_Recipe.stCurrentRecipe.stSolventsTimes.aVelocity[i] := GVL_HMI.aSolventAndTimesRows[3].Rinse1;
			2: GVL_Recipe.stCurrentRecipe.stSolventsTimes.aVelocity[i] := GVL_HMI.aSolventAndTimesRows[3].Rinse2;
			3: GVL_Recipe.stCurrentRecipe.stSolventsTimes.aVelocity[i] := GVL_HMI.aSolventAndTimesRows[3].Wash1;
			4: GVL_Recipe.stCurrentRecipe.stSolventsTimes.aVelocity[i] := GVL_HMI.aSolventAndTimesRows[3].Wash2;
		END_CASE;
	END_FOR
	
	// ---- Commit Volumes ----
	// Cada linha do aVolumesRows corresponde a um array do struct
	// Ordem: 1:T_IC, 2:S0, 3:S1, 4:S2, 5:S3, 6:S4, 7:S5, 8:S6, 9:S7, 10:F
	FOR i := 1 TO 4 DO // Rinse1, Rinse2, Wash1, Wash2
		// T_IC
		CASE i OF
			1: GVL_Recipe.stCurrentRecipe.stVolumes.aT_IC_Volume[i] := GVL_HMI.aVolumeRows[1].Rinse1;
			2: GVL_Recipe.stCurrentRecipe.stVolumes.aT_IC_Volume[i] := GVL_HMI.aVolumeRows[1].Rinse2;
			3: GVL_Recipe.stCurrentRecipe.stVolumes.aT_IC_Volume[i] := GVL_HMI.aVolumeRows[1].Wash1;
			4: GVL_Recipe.stCurrentRecipe.stVolumes.aT_IC_Volume[i] := GVL_HMI.aVolumeRows[1].Wash2;
		END_CASE;
		// S0
		CASE i OF
			1: GVL_Recipe.stCurrentRecipe.stVolumes.aS0_Volume[i] := GVL_HMI.aVolumeRows[2].Rinse1;
			2: GVL_Recipe.stCurrentRecipe.stVolumes.aS0_Volume[i] := GVL_HMI.aVolumeRows[2].Rinse2;
			3: GVL_Recipe.stCurrentRecipe.stVolumes.aS0_Volume[i] := GVL_HMI.aVolumeRows[2].Wash1;
			4: GVL_Recipe.stCurrentRecipe.stVolumes.aS0_Volume[i] := GVL_HMI.aVolumeRows[2].Wash2;
		END_CASE;
		// S1 
		CASE i OF
			1: GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[i] := GVL_HMI.aVolumeRows[3].Rinse1;
			2: GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[i] := GVL_HMI.aVolumeRows[3].Rinse2;
			3: GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[i] := GVL_HMI.aVolumeRows[3].Wash1;
			4: GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[i] := GVL_HMI.aVolumeRows[3].Wash2;
		END_CASE;
		// S2
		CASE i OF
			1: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[4].Rinse1;
			2: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[4].Rinse2;
			3: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[4].Wash1;
			4: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[4].Wash2;
		END_CASE;
		CASE i OF
			1: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[5].Rinse1;
			2: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[5].Rinse2;
			3: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[5].Wash1;
			4: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[5].Wash2;
		END_CASE;
		CASE i OF
			1: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[6].Rinse1;
			2: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[6].Rinse2;
			3: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[6].Wash1;
			4: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[6].Wash2;
		END_CASE;
		CASE i OF
			1: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[7].Rinse1;
			2: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[7].Rinse2;
			3: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[7].Wash1;
			4: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[7].Wash2;
		END_CASE;
		CASE i OF
			1: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[8].Rinse1;
			2: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[8].Rinse2;
			3: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[8].Wash1;
			4: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[8].Wash2;
		END_CASE;
		CASE i OF
			1: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[9].Rinse1;
			2: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[9].Rinse2;
			3: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[9].Wash1;
			4: GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[i] := GVL_HMI.aVolumeRows[9].Wash2;
		END_CASE;
		CASE i OF
			1: GVL_Recipe.stCurrentRecipe.stVolumes.aF_Volume[i] := GVL_HMI.aVolumeRows[10].Rinse1;
			2: GVL_Recipe.stCurrentRecipe.stVolumes.aF_Volume[i] := GVL_HMI.aVolumeRows[10].Rinse2;
			3: GVL_Recipe.stCurrentRecipe.stVolumes.aF_Volume[i] := GVL_HMI.aVolumeRows[10].Wash1;
			4: GVL_Recipe.stCurrentRecipe.stVolumes.aF_Volume[i] := GVL_HMI.aVolumeRows[10].Wash2;
		END_CASE;
	END_FOR
	
	// ---- Commit OtherParams ----
	// Supondo a ordem das linhas conforme DataGrid (ajuste se necessário)
	GVL_Recipe.stCurrentRecipe.stOtherParams.tSoakTime        := TO_TIME(GVL_HMI.aOtherParamsRows[1].Value * 1000);
	GVL_Recipe.stCurrentRecipe.stOtherParams.tAgitate1Time    := TO_TIME(GVL_HMI.aOtherParamsRows[2].Value * 1000);
	GVL_Recipe.stCurrentRecipe.stOtherParams.tAgitate2Time    := TO_TIME(GVL_HMI.aOtherParamsRows[3].Value * 1000);
	GVL_Recipe.stCurrentRecipe.stOtherParams.iVialsToFill     := TO_USINT(GVL_HMI.aOtherParamsRows[4].Value * 1000);
	GVL_Recipe.stCurrentRecipe.stOtherParams.rVialPrimeVol    := GVL_HMI.aOtherParamsRows[5].Value;
	GVL_Recipe.stCurrentRecipe.stOtherParams.rVial1FillVol    := GVL_HMI.aOtherParamsRows[6].Value;
	GVL_Recipe.stCurrentRecipe.stOtherParams.rVials2_4FillVol := GVL_HMI.aOtherParamsRows[7].Value;
	GVL_Recipe.stCurrentRecipe.stOtherParams.tAirDryTime   	  := TO_TIME(GVL_HMI.aOtherParamsRows[8].Value * 1000);
	
	//reset flags
	
	i:=0;
	
	bDatagridToRecipeDone := TRUE;
	
END_IF


]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_PopulateDeleteRecipeInfo" Id="{441531cc-5411-489e-b8c8-b1846bd52885}">
      <Implementation>
        <ST><![CDATA[// Fill up the info fields for popup delete confirmation
GVL_HMI.stDeleteRecipeInfo.sCreatedBy := GVL_Recipe.stCurrentRecipe.stInfo.sCreatedBy;
GVL_HMI.stDeleteRecipeInfo.dCreationDate := GVL_Recipe.stCurrentRecipe.stInfo.dCreationDate;
GVL_HMI.stDeleteRecipeInfo.iRevision := GVL_Recipe.stCurrentRecipe.stInfo.iRevision;
GVL_HMI.stDeleteRecipeInfo.sMethodName := GVL_Recipe.stCurrentRecipe.stInfo.sMethodName;
GVL_HMI.stDeleteRecipeInfo.sFileName := GVL_Recipe.sSelectedRecipeName;

// Resets the flag
GVL_HMI.bDeleteRecipeButton := FALSE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_RecipeToDatagrid" Id="{947174eb-de1f-4e9d-b1cf-e0d4928d41c5}">
      <Implementation>
        <ST><![CDATA[
// SolventAndTimes
GVL_HMI.aSolventAndTimesRows[1].Rinse1 := GVL_Recipe.stCurrentRecipe.stSolventsTimes.aSolventN[1];
GVL_HMI.aSolventAndTimesRows[1].Rinse2 := GVL_Recipe.stCurrentRecipe.stSolventsTimes.aSolventN[2];
GVL_HMI.aSolventAndTimesRows[1].Wash1  := GVL_Recipe.stCurrentRecipe.stSolventsTimes.aSolventN[3];
GVL_HMI.aSolventAndTimesRows[1].Wash2  := GVL_Recipe.stCurrentRecipe.stSolventsTimes.aSolventN[4];

GVL_HMI.aSolventAndTimesRows[2].Rinse1 := TO_INT(TIME_TO_DWORD(GVL_Recipe.stCurrentRecipe.stSolventsTimes.aTime[1])/1000);
GVL_HMI.aSolventAndTimesRows[2].Rinse2 := TO_INT(TIME_TO_DWORD(GVL_Recipe.stCurrentRecipe.stSolventsTimes.aTime[2])/1000);
GVL_HMI.aSolventAndTimesRows[2].Wash1  := TO_INT(TIME_TO_DWORD(GVL_Recipe.stCurrentRecipe.stSolventsTimes.aTime[3])/1000);
GVL_HMI.aSolventAndTimesRows[2].Wash2  := TO_INT(TIME_TO_DWORD(GVL_Recipe.stCurrentRecipe.stSolventsTimes.aTime[4])/1000);

GVL_HMI.aSolventAndTimesRows[3].Rinse1 := GVL_Recipe.stCurrentRecipe.stSolventsTimes.aVelocity[1];
GVL_HMI.aSolventAndTimesRows[3].Rinse2 := GVL_Recipe.stCurrentRecipe.stSolventsTimes.aVelocity[2];
GVL_HMI.aSolventAndTimesRows[3].Wash1  := GVL_Recipe.stCurrentRecipe.stSolventsTimes.aVelocity[3];
GVL_HMI.aSolventAndTimesRows[3].Wash2  := GVL_Recipe.stCurrentRecipe.stSolventsTimes.aVelocity[4];

// Volumes
GVL_HMI.aVolumeRows[1].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aT_IC_Volume[1];
GVL_HMI.aVolumeRows[1].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aT_IC_Volume[2];
GVL_HMI.aVolumeRows[1].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aT_IC_Volume[3];
GVL_HMI.aVolumeRows[1].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aT_IC_Volume[4];

GVL_HMI.aVolumeRows[2].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aS0_Volume[1];
GVL_HMI.aVolumeRows[2].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aS0_Volume[2];
GVL_HMI.aVolumeRows[2].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aS0_Volume[3];
GVL_HMI.aVolumeRows[2].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aS0_Volume[4];

GVL_HMI.aVolumeRows[3].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[1];
GVL_HMI.aVolumeRows[3].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[2];
GVL_HMI.aVolumeRows[3].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[3];
GVL_HMI.aVolumeRows[3].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aS1_Volume[4];

GVL_HMI.aVolumeRows[4].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[1];
GVL_HMI.aVolumeRows[4].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[2];
GVL_HMI.aVolumeRows[4].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[3];
GVL_HMI.aVolumeRows[4].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aS2_Volume[4];

GVL_HMI.aVolumeRows[5].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aS3_Volume[1];
GVL_HMI.aVolumeRows[5].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aS3_Volume[2];
GVL_HMI.aVolumeRows[5].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aS3_Volume[3];
GVL_HMI.aVolumeRows[5].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aS3_Volume[4];

GVL_HMI.aVolumeRows[6].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aS4_Volume[1];
GVL_HMI.aVolumeRows[6].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aS4_Volume[2];
GVL_HMI.aVolumeRows[6].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aS4_Volume[3];
GVL_HMI.aVolumeRows[6].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aS4_Volume[4];

GVL_HMI.aVolumeRows[7].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aS5_Volume[1];
GVL_HMI.aVolumeRows[7].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aS5_Volume[2];
GVL_HMI.aVolumeRows[7].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aS5_Volume[3];
GVL_HMI.aVolumeRows[7].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aS5_Volume[4];

GVL_HMI.aVolumeRows[8].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aS6_Volume[1];
GVL_HMI.aVolumeRows[8].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aS6_Volume[2];
GVL_HMI.aVolumeRows[8].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aS6_Volume[3];
GVL_HMI.aVolumeRows[8].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aS6_Volume[4];

GVL_HMI.aVolumeRows[9].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aS7_Volume[1];
GVL_HMI.aVolumeRows[9].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aS7_Volume[2];
GVL_HMI.aVolumeRows[9].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aS7_Volume[3];
GVL_HMI.aVolumeRows[9].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aS7_Volume[4];

GVL_HMI.aVolumeRows[10].Rinse1 := GVL_Recipe.stCurrentRecipe.stVolumes.aF_Volume[1];
GVL_HMI.aVolumeRows[10].Rinse2 := GVL_Recipe.stCurrentRecipe.stVolumes.aF_Volume[2];
GVL_HMI.aVolumeRows[10].Wash1  := GVL_Recipe.stCurrentRecipe.stVolumes.aF_Volume[3];
GVL_HMI.aVolumeRows[10].Wash2  := GVL_Recipe.stCurrentRecipe.stVolumes.aF_Volume[4];

// --- Outros Params ---
GVL_HMI.aOtherParamsRows[1].Value := UDINT_TO_REAL(TIME_TO_DWORD(GVL_Recipe.stCurrentRecipe.stOtherParams.tSoakTime)/1000);
GVL_HMI.aOtherParamsRows[2].Value := UDINT_TO_REAL(TIME_TO_DWORD(GVL_Recipe.stCurrentRecipe.stOtherParams.tAgitate1Time)/1000);
GVL_HMI.aOtherParamsRows[3].Value := UDINT_TO_REAL(TIME_TO_DWORD(GVL_Recipe.stCurrentRecipe.stOtherParams.tAgitate2Time)/1000);
GVL_HMI.aOtherParamsRows[4].Value := GVL_Recipe.stCurrentRecipe.stOtherParams.iVialsToFill;
GVL_HMI.aOtherParamsRows[5].Value := GVL_Recipe.stCurrentRecipe.stOtherParams.rVialPrimeVol;
GVL_HMI.aOtherParamsRows[6].Value := GVL_Recipe.stCurrentRecipe.stOtherParams.rVial1FillVol;
GVL_HMI.aOtherParamsRows[7].Value := GVL_Recipe.stCurrentRecipe.stOtherParams.rVials2_4FillVol;
GVL_HMI.aOtherParamsRows[8].Value := UDINT_TO_REAL(TIME_TO_DWORD(GVL_Recipe.stCurrentRecipe.stOtherParams.tAirDryTime)/1000);

//Flag to initiate the save fb
GVL_HMI.bReloadRecipeDatagrids  := FALSE;

]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="PRG_RecipeManager">
      <LineId Id="260" Count="2" />
      <LineId Id="258" Count="1" />
      <LineId Id="58" Count="1" />
      <LineId Id="313" Count="1" />
      <LineId Id="227" Count="0" />
      <LineId Id="233" Count="2" />
      <LineId Id="61" Count="0" />
      <LineId Id="236" Count="1" />
      <LineId Id="62" Count="1" />
      <LineId Id="252" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="231" Count="1" />
      <LineId Id="253" Count="0" />
      <LineId Id="87" Count="3" />
      <LineId Id="242" Count="4" />
      <LineId Id="274" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="275" Count="1" />
      <LineId Id="279" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="264" Count="3" />
      <LineId Id="312" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="192" Count="1" />
      <LineId Id="198" Count="0" />
      <LineId Id="315" Count="1" />
      <LineId Id="337" Count="0" />
      <LineId Id="202" Count="1" />
      <LineId Id="341" Count="2" />
      <LineId Id="201" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="170" Count="2" />
      <LineId Id="254" Count="1" />
      <LineId Id="150" Count="2" />
      <LineId Id="154" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="305" Count="1" />
      <LineId Id="283" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="309" Count="1" />
      <LineId Id="299" Count="0" />
      <LineId Id="303" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="304" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="271" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="104" Count="0" />
    </LineIds>
    <LineIds Name="PRG_RecipeManager.ACT_ClearAvailableFiles">
      <LineId Id="5" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="2" Count="1" />
      <LineId Id="6" Count="3" />
      <LineId Id="4" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PRG_RecipeManager.ACT_ClearHMIDatagrids">
      <LineId Id="42" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="44" Count="2" />
      <LineId Id="48" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="25" Count="2" />
      <LineId Id="23" Count="1" />
      <LineId Id="49" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="32" Count="3" />
      <LineId Id="10" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="PRG_RecipeManager.ACT_ClearStCurrentRecipe">
      <LineId Id="58" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="11" Count="2" />
      <LineId Id="57" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="18" Count="6" />
      <LineId Id="30" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="46" Count="8" />
      <LineId Id="45" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="PRG_RecipeManager.ACT_DatagridsRowNaming">
      <LineId Id="4" Count="1" />
      <LineId Id="1" Count="2" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="19" Count="8" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="32" Count="5" />
      <LineId Id="74" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="PRG_RecipeManager.ACT_DatagridToRecipe">
      <LineId Id="37" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="158" Count="2" />
      <LineId Id="157" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="38" Count="55" />
      <LineId Id="118" Count="4" />
      <LineId Id="117" Count="0" />
      <LineId Id="124" Count="4" />
      <LineId Id="123" Count="0" />
      <LineId Id="130" Count="4" />
      <LineId Id="129" Count="0" />
      <LineId Id="136" Count="4" />
      <LineId Id="135" Count="0" />
      <LineId Id="142" Count="4" />
      <LineId Id="141" Count="0" />
      <LineId Id="95" Count="19" />
      <LineId Id="149" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="152" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PRG_RecipeManager.ACT_PopulateDeleteRecipeInfo">
      <LineId Id="8" Count="0" />
      <LineId Id="2" Count="3" />
      <LineId Id="1" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="PRG_RecipeManager.ACT_RecipeToDatagrid">
      <LineId Id="353" Count="0" />
      <LineId Id="274" Count="76" />
      <LineId Id="352" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>