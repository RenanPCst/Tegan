<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{cebf6aa5-5e58-48d5-8759-1298446923a5}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN

VAR
	// Controle do Eixo
	PosFB				: FB_GetPosition;
	MoveFB				: FB_MotorControl;
	fbSetZero			: MC_SetPosition;
	fbReadStatus		: MC_ReadStatus;
	rCurrentPosition 	: LREAL;
	bGetPosition		: BOOL := FALSE;
	bMoveStart			: BOOL := FALSE;
	bMoveDone			: BOOL;
	bPosError			: BOOL;
	nPosErrorID			: UDINT;

    // Status e Erros
    bPowerStatus  : BOOL;              		// Indica se o motor está habilitado
    bBusy         : BOOL;              		// Indica se o eixo está em movimento
    bDone         : BOOL;              		// Indica que a posição foi atingida
    bError        : BOOL;              		// Indica erro
    nErrorID      : UDINT;             		// Código do erro
	sState		  : STRING;					// String contendo o estado do erro 
	
	//miscelanious variable for testing purporses
	bLockDoors	  	: BOOL 	:= FALSE;	   	// Variable that sends the lock doors signal
	bResetDone		: BOOL;
	bResetError		: BOOL;
	iResetErrorID	: UDINT;
	
	//Instâncias do FB para dois motores
	M1_Motor : FB_MotorControl;
    M2_Motor : FB_MotorControl;
    M3_Motor : FB_MotorControl;

	//Variaveis para a leitura da posicao atual dos motores
	bReadPosition 			: BOOL := FALSE;
	bReadPosValidation		: BOOL;
	bReadPosBusy			: BOOL;
	bReadPositionError		: BOOL;
	iReadPosErrorId			: UDINT;
	rActualPosition			: LREAL;
	
	//Variarives de mudanca de posicao
	bExecutePositionChange	:	BOOL := FALSE;
	bDonePositionChange		:	BOOL;
	bBusyPositionChange		:	BOOL;
	bActivePositionChange	:	BOOL;
	bCommandAborted			:	BOOL;
	bErrorPositionChange	:	BOOL;
	iErrorIDPositionChange	:	UDINT;
	
	rM1Position				:	LREAL;
	rM2Position				:	LREAL;
	rM3Position				:	LREAL;
	rM4Position				:	LREAL;
	rM5Position				:	LREAL;
	rM6Position				:	LREAL;
	rM7Position				:	LREAL;
	rM8Position				:	LREAL;
	
	bZeroDone				:	BOOL;
	bZeroError				:	BOOL;
	nZeroErrorID			:	UDINT;
	bSetZero				:	BOOL := FALSE;
	
	//variaveis para ler o status do motor
	bReadStatus				: 	BOOL := FALSE;
	Busy					: 	BOOL;
	Error					: 	BOOL;
	ErrorID					: 	UDINT;
	ErrorStop				: 	BOOL;
	Disabled				: 	BOOL;
	Stopping				: 	BOOL;
	StandStill				: 	BOOL;
	DiscreteMotion			: 	BOOL;
	ContinuousMotion		: 	BOOL;
	SynchronizedMotion		: 	BOOL;
	Homing					: 	BOOL;
	ConstantVelocity		: 	BOOL;
	Accelerating			: 	BOOL;
	Decelerating			: 	BOOL;
	Status					: 	ST_AxisStatus;
	
	//teste de movimento da valvula m4
	ValveController : FB_ValvePositionControl; // Instância do FB
    EnableServo     : BOOL := FALSE;
    DesiredPos      : INT;   // Escolher posição (1 a 6)
    MoveNow         : BOOL := FALSE;
    ValveInPosition : BOOL;
	
	//mc power
	fbMcPower : MC_Power;
	bPowerEnable	: BOOL := FALSE;
	PowerErrorID	: UDINT;
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Call State Machine

//PRG_StateMachine(); 
PRG_UpdateVariablesMoving();

//Safety
GVL_IO.bInResetSignal := GVL_Safety.bResetButtonVISU;
GVL_IO.bInAckSignal   := GVL_Safety.bAckButtonVISU;

GVL_Safety.bSafetyRestart 			:= GVL_IO.bInResetSignal;
GVL_Safety.bSafetyErrorAck			:= GVL_IO.bInResetSignal;
GVL_Motion.M1Motor.bTS_ErrorAck		:= GVL_IO.bInResetSignal;
GVL_Safety.iM4STOErrorAck			:= GVL_IO.bInResetSignal;
GVL_Safety.iM5STOErrorAck			:= GVL_IO.bInResetSignal;
GVL_Safety.iM6STOErrorAck			:= GVL_IO.bInResetSignal;
GVL_Safety.iM7STOErrorAck			:= GVL_IO.bInResetSignal;
GVL_Safety.iM8STOErrorAck			:= GVL_IO.bInResetSignal;

GVL_Safety.bSafetyRun				:= TRUE;
GVL_Motion.M1Motor.bTS_Run			:= TRUE;
GVL_Safety.iM4STORun				:= TRUE;
GVL_Safety.iM5STORun				:= TRUE;
GVL_Safety.iM6STORun				:= TRUE;
GVL_Safety.iM7STORun				:= TRUE;
GVL_Safety.iM8STORun				:= TRUE;

(*
IF GVL_Safety.bM1STOErrorAck THEN
	GVL_Motion.M1Motor.bTS_ErrorAck := TRUE;
ELSE
	GVL_Motion.M1Motor.bTS_ErrorAck := FALSE;
END_IF
*)
IF bLockDoors THEN
	GVL_Safety.SafetyOutputs.bLockDoorSafety := TRUE;
	ELSE
	GVL_Safety.SafetyOutputs.bLockDoorSafety := FALSE;
END_IF

//teste de movimento dos motores M1, M2 e M3

//Obter a posição atual do motor M1
IF bGetPosition THEN	
	PosFB(
		bEnable			:=	bGetPosition,
		AxisRef			:=	GVL_Motion.M1Motor.Axis,
		bError			=>	bPosError,
		nErrorID		=>	nPosErrorID,
		rPosition		=>	rM1Position
	);
END_IF

//Obter a posição atual do motor M2
IF bGetPosition THEN	
	PosFB(
		bEnable			:=	bGetPosition,
		AxisRef			:=	GVL_Motion.M2Motor.Axis,
		bError			=>	bPosError,
		nErrorID		=>	nPosErrorID,
		rPosition		=>	rM2Position
	);
END_IF

//Obter a posição atual do motor M3
IF bGetPosition THEN	
	PosFB(
		bEnable			:=	bGetPosition,
		AxisRef			:=	GVL_Motion.M3Motor.Axis,
		bError			=>	bPosError,
		nErrorID		=>	nPosErrorID,
		rPosition		=>	rM3Position
	);		
END_IF

//Obter a posição atual do motor M4
IF bGetPosition THEN	
	PosFB(
		bEnable			:=	bGetPosition,
		AxisRef			:=	GVL_Motion.M4Valve1.Axis,
		bError			=>	bPosError,
		nErrorID		=>	nPosErrorID,
		rPosition		=>	rM4Position
	);		
END_IF

//Obter a posição atual do motor M5
IF bGetPosition THEN	
	PosFB(
		bEnable			:=	bGetPosition,
		AxisRef			:=	GVL_Motion.M5Valve2.Axis,
		bError			=>	bPosError,
		nErrorID		=>	nPosErrorID,
		rPosition		=>	rM5Position
	);		
END_IF

//Obter a posição atual do motor M6
IF bGetPosition THEN	
	PosFB(
		bEnable			:=	bGetPosition,
		AxisRef			:=	GVL_Motion.M6Valve3.Axis,
		bError			=>	bPosError,
		nErrorID		=>	nPosErrorID,
		rPosition		=>	rM6Position
	);		
END_IF

//Obter a posição atual do motor M7
IF bGetPosition THEN	
	PosFB(
		bEnable			:=	bGetPosition,
		AxisRef			:=	GVL_Motion.M7Valve4.Axis,
		bError			=>	bPosError,
		nErrorID		=>	nPosErrorID,
		rPosition		=>	rM7Position
	);		
END_IF

//Obter a posição atual do motor M8
IF bGetPosition THEN	
	PosFB(
		bEnable			:=	bGetPosition,
		AxisRef			:=	GVL_Motion.M8Valve5.Axis,
		bError			=>	bPosError,
		nErrorID		=>	nPosErrorID,
		rPosition		=>	rM8Position
	);		
END_IF

fbMcPower(
    Axis := GVL_Motion.M4Valve1.Axis,
    Enable := bPowerEnable,
    Enable_Positive := bPowerEnable, // Só habilita se o drive estiver pronto
    Enable_Negative := bPowerEnable,
	ErrorID	=>	PowerErrorID
);

//read status motor m4
IF bReadStatus THEN	
	fbReadStatus(
		Enable 				:= bReadStatus,
		Axis				:= GVL_Motion.M4Valve1.Axis,
		Busy				=> Busy,
		Error				=> Error,
		ErrorID				=> ErrorID,
		ErrorStop			=> ErrorStop,
		Disabled			=> Disabled,
		Stopping			=> Stopping,
		StandStill			=> StandStill,
		DiscreteMotion		=> DiscreteMotion,
		ContinuousMotion	=> ContinuousMotion,
		SynchronizedMotion	=> SynchronizedMotion,
		Homing				=> Homing,
		ConstantVelocity	=> ConstantVelocity,
		Accelerating		=> Accelerating,
		Decelerating		=> Decelerating,
		Status				=> Status
		
	);		
END_IF

DesiredPos := 5;

IF NOT ValveInPosition AND EnableServo THEN
ValveController(
    bEnable 		:= EnableServo,
	ServoAxis		:= GVL_Motion.M4Valve1.Axis,
    ValvePosition 	:= DesiredPos,
	MoveDone		=> ValveInPosition
);
END_IF


//target positions test for the motors
GVL_Motion.M1Motor.iPosition 		:= 0;
GVL_Motion.M1Motor.qTargetVelocity	:= 15;

GVL_Motion.M3Motor.iTargetPosition	:= 0;
GVL_Motion.M3Motor.iTargetVelocity	:= 5;

GVL_Motion.M2Motor.iTargetPosition	:= 0;
GVL_Motion.M2Motor.iTargetVelocity	:= 5;

//Set position 0
fbSetZero(
    Execute := bSetZero,
    Axis := GVL_Motion.M3Motor.Axis,
    Position := 0.0,  // Define a posição atual como zero
    Done => bZeroDone,
    Error => bZeroError,
    ErrorID => nZeroErrorID
);

//Moving the motor 3 for testing purposes
IF bMoveStart AND GVL_Safety.iMotorsSTOEnabled THEN
    MoveFB(
        bEnable 	:= TRUE,
        AxisRef 	:= GVL_Motion.M2Motor.Axis, 
        nPosition 	:= GVL_Motion.M2Motor.iTargetPosition, 
        nVelocity 	:= GVL_Motion.M2Motor.iTargetVelocity,
        bDone		=> bMoveDone,
        bError		=> bPosError,
        nErrorID	=> nPosErrorID,
        sState		=> sState
    );
END_IF

// Reset bMoveStart_M1 when move is completed
IF bMoveDone THEN
    bMoveStart := FALSE;
END_IF



]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="744" Count="0" />
      <LineId Id="751" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="1388" Count="0" />
      <LineId Id="1386" Count="0" />
      <LineId Id="865" Count="0" />
      <LineId Id="976" Count="0" />
      <LineId Id="872" Count="0" />
      <LineId Id="871" Count="0" />
      <LineId Id="868" Count="1" />
      <LineId Id="1814" Count="0" />
      <LineId Id="2073" Count="0" />
      <LineId Id="2080" Count="3" />
      <LineId Id="1810" Count="0" />
      <LineId Id="870" Count="0" />
      <LineId Id="1158" Count="0" />
      <LineId Id="2074" Count="0" />
      <LineId Id="2084" Count="3" />
      <LineId Id="1815" Count="0" />
      <LineId Id="1467" Count="1" />
      <LineId Id="1472" Count="0" />
      <LineId Id="1469" Count="0" />
      <LineId Id="1471" Count="0" />
      <LineId Id="1470" Count="0" />
      <LineId Id="1194" Count="0" />
      <LineId Id="1193" Count="0" />
      <LineId Id="1195" Count="0" />
      <LineId Id="1197" Count="1" />
      <LineId Id="1196" Count="0" />
      <LineId Id="866" Count="0" />
      <LineId Id="821" Count="0" />
      <LineId Id="1678" Count="0" />
      <LineId Id="1667" Count="8" />
      <LineId Id="1706" Count="0" />
      <LineId Id="1685" Count="9" />
      <LineId Id="1684" Count="0" />
      <LineId Id="1696" Count="9" />
      <LineId Id="1666" Count="0" />
      <LineId Id="1876" Count="0" />
      <LineId Id="1816" Count="0" />
      <LineId Id="1818" Count="7" />
      <LineId Id="1817" Count="0" />
      <LineId Id="1877" Count="0" />
      <LineId Id="1827" Count="8" />
      <LineId Id="1826" Count="0" />
      <LineId Id="1878" Count="0" />
      <LineId Id="1837" Count="8" />
      <LineId Id="1836" Count="0" />
      <LineId Id="1879" Count="0" />
      <LineId Id="1847" Count="8" />
      <LineId Id="1846" Count="0" />
      <LineId Id="1880" Count="0" />
      <LineId Id="1857" Count="8" />
      <LineId Id="1856" Count="0" />
      <LineId Id="2037" Count="0" />
      <LineId Id="2039" Count="5" />
      <LineId Id="2038" Count="0" />
      <LineId Id="2001" Count="0" />
      <LineId Id="1992" Count="2" />
      <LineId Id="1999" Count="0" />
      <LineId Id="2002" Count="0" />
      <LineId Id="2004" Count="14" />
      <LineId Id="2003" Count="0" />
      <LineId Id="2000" Count="0" />
      <LineId Id="1991" Count="0" />
      <LineId Id="2077" Count="0" />
      <LineId Id="2072" Count="0" />
      <LineId Id="2078" Count="0" />
      <LineId Id="2067" Count="0" />
      <LineId Id="2028" Count="1" />
      <LineId Id="2079" Count="0" />
      <LineId Id="2030" Count="0" />
      <LineId Id="2036" Count="0" />
      <LineId Id="2032" Count="0" />
      <LineId Id="2075" Count="0" />
      <LineId Id="1882" Count="0" />
      <LineId Id="1881" Count="0" />
      <LineId Id="1581" Count="0" />
      <LineId Id="1579" Count="0" />
      <LineId Id="1584" Count="0" />
      <LineId Id="1745" Count="0" />
      <LineId Id="1744" Count="0" />
      <LineId Id="1746" Count="0" />
      <LineId Id="1748" Count="0" />
      <LineId Id="1747" Count="0" />
      <LineId Id="1749" Count="0" />
      <LineId Id="1707" Count="0" />
      <LineId Id="1580" Count="0" />
      <LineId Id="1709" Count="7" />
      <LineId Id="1708" Count="0" />
      <LineId Id="1537" Count="0" />
      <LineId Id="1727" Count="15" />
      <LineId Id="1312" Count="0" />
      <LineId Id="1322" Count="0" />
      <LineId Id="1078" Count="0" />
      <LineId Id="951" Count="0" />
      <LineId Id="767" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>