<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{cebf6aa5-5e58-48d5-8759-1298446923a5}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN

VAR
	// Axis Motion Controls
	PosFB				: FB_GetPosition;
	MoveFB				: FB_MotorControl;
	fbSetZero			: MC_SetPosition;
	fbReadStatus		: MC_ReadStatus;
	rCurrentPosition 	: LREAL;
	bGetPosition		: BOOL := FALSE;
	bMoveStart			: BOOL := FALSE;
	bMoveDone			: BOOL;
	bPosError			: BOOL;
	nPosErrorID			: UDINT;

    // Axis Motion Status and Errors
    bPowerStatus  	: BOOL;              		// Indicates whether the engine is enabled
    bBusy         	: BOOL;              		// Indicates whether the axis is moving
    bDone         	: BOOL;              		// Indicates that the position has been reached
    bError        	: BOOL;              		// Indicates error
    nErrorID      	: UDINT;             		// Error code
	sState		  	: STRING;					// String containing the error status
		
	bZeroDone		:	BOOL;
	bZeroError		:	BOOL;
	nZeroErrorID	:	UDINT;
	bSetZero		:	BOOL := FALSE;
	
	//Moviment testing Motos and Valves
	fbValveController : FB_ValvePositionControl; 	//FB Instance
		EnableServo     : BOOL := FALSE;
		DesiredPos      : INT;   				// Choose valve position(1 a 6)
		MoveNow         : BOOL := FALSE;
		ValveInPosition : BOOL;
	
	//MC_Power responsible to enable the motor
	fbMcPower 		: FB_MCPower;
		bPowerEnable	: BOOL := FALSE;
		bPumpEnable		: BOOL := FALSE;
		bPowerError		: BOOL := FALSE;
		PowerErrorID	: UDINT;
	
	//Balance FB call and Testing
	fbTcpClient						: FB_TCPClient;
		bConnectionDone				: BOOL 			:= FALSE;
		fMeasuredWeight				: REAL;
    	sResponseMessage			: STRING(255);
    	bStartCommunication			: BOOL 			:= FALSE;  
    	tAdjustableDelay			: TIME 			:= T#100MS;  //Configured time between the states.
		
	//Event Logger call and testing
	fbEventHandler		: FB_EventHandler;
		bExecuteEvent	: BOOL := FALSE;
		bEventDone		: BOOL := FALSE;
	
	//Alarm Raise and Confirm Example
	fbAlarm				: FB_AlarmHandler;
		bAlarmEvent		: BOOL := FALSE;
		bConfirm		: BOOL := FALSE;
		bDoSomething	: BOOL;
		
	//Pressure Scaling Value testing
	fbSensorScaling		: FB_SensorScaling;
		bPressureInput	: BOOL := FALSE;
		rPressureSensor	: REAL;
		bPressureExecute: BOOL := FALSE;
		
	//Home Positioning M1
	fbHomeM1		: FB_HomePosition;
	fbHomeM2		: FB_HomePosition;
	fbHomeM3		: FB_HomePosition;
		
	//testting
	axisTest : POINTER TO AXIS_REF;
	fbMotorsPowerUp : FB_MotorsPowerUP;
		bPowerUp	: BOOL := FALSE;
	
	fbMoveRelative		: FB_MCMoveRelative;
		bStartRelMov	: BOOL := FALSE;
		
	fbSetPosition		: MC_SetPosition;
		bSetPosition	: BOOL := FALSE;
	
	fbStop : MC_Stop;

	bDebug1 : BOOL := FALSE;
	bDebug2 : BOOL := FALSE;
	bDebug3 : BOOL := FALSE;
	bDebug4 : BOOL := FALSE;
	bDebug5 : BOOL := FALSE;
	bDebug6 : BOOL := FALSE;
	bDebug7 : BOOL := FALSE;
	bDebug8 : BOOL := FALSE;
	bDebug9 : BOOL := FALSE;
	bDebug10: BOOL := FALSE;
	bTestMovFwd : BOOL := FALSE;
	bTestMovBwd : BOOL := FALSE;
	testTon : TON;
	bEnableDone, bHomeDone : BOOL := FALSE;
	
	rM1Position 	: ARRAY[1..3] OF LREAL;
	rValvePosition 	: ARRAY[1..5] OF LREAL;
	rPumpPosition 	: ARRAY[1..10] OF LREAL;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Call State Machine and peripheral programs
PRG_MasterControl(); 
PRG_UpdateVariablesMoving();
PRG_SafetyHandle();
//Can be put into Low task event
PRG_HMIControl();
PRG_ShutdownPLC();
PRG_TowerAlarmLamps();
PRG_AxisAssignment();
PRG_RecipeManager();

//################ TESTING AREA ################################

//GVL_Motion.aMotors[1].Jog(bFwd := bDebug1, bBwd := bDebug8);

IF bDebug2 THEN
	bDebug2 :=  NOT GVL_Motion.aPumpsLinear[1].MoveAbsolute(rPosition := -9, rVelocity := 1, rAcc := 2, rDec := 2) AND
				NOT GVL_Motion.aPumpsLinear[2].MoveAbsolute(rPosition := -9, rVelocity := 1, rAcc := 2, rDec := 2) AND
				NOT GVL_Motion.aPumpsLinear[3].MoveAbsolute(rPosition := -9, rVelocity := 1, rAcc := 2, rDec := 2) AND
				NOT GVL_Motion.aPumpsLinear[4].MoveAbsolute(rPosition := -9, rVelocity := 1, rAcc := 2, rDec := 2) AND
				NOT GVL_Motion.aPumpsLinear[5].MoveAbsolute(rPosition := -9, rVelocity := 1, rAcc := 2, rDec := 2) AND
				NOT GVL_Motion.aPumpsLinear[6].MoveAbsolute(rPosition := -9, rVelocity := 1, rAcc := 2, rDec := 2) AND
				NOT GVL_Motion.aPumpsLinear[7].MoveAbsolute(rPosition := -9, rVelocity := 1, rAcc := 2, rDec := 2) AND
				NOT GVL_Motion.aPumpsLinear[8].MoveAbsolute(rPosition := -9, rVelocity := 1, rAcc := 2, rDec := 2) AND
				NOT GVL_Motion.aPumpsLinear[9].MoveAbsolute(rPosition := -9, rVelocity := 1, rAcc := 2, rDec := 2) AND
				NOT GVL_Motion.aPumpsLinear[10].MoveAbsolute(rPosition := -9, rVelocity := 1, rAcc := 2, rDec := 2);
END_IF

IF bHomeDone THEN
	//bHomeDone := NOT GVL_Motion.aMotors[1].Home(pHomeSensor := ADR(GVL_IO.gDigInputs.bStageCollection_Home), bHomeRequest := bHomeDone);
	bHomeDone := NOT GVL_Motion.aPumpsLinear[1].Home( pHomeSensor := ADR(GVL_Motion.aPumps[1].Linear.iHomeSensor.0), 
													  rVelocity := GVL_Motion.aPumps[1].Linear.rHomeVel, 
													  rAcc := GVL_Motion.aPumps[1].Linear.rHomeAcc, 
													  rDec := GVL_Motion.aPumps[1].Linear.rHomeDec
													  );
END_IF
	
IF bDebug3 THEN
	rM1Position[1] 	:= GVL_Motion.aMotors[1].GetPosition();
	rM1Position[2] 	:= GVL_Motion.aMotors[2].GetPosition();
	rM1Position[3] 	:= GVL_Motion.aMotors[3].GetPosition();	

	rPumpPosition[1] := GVL_Motion.aPumpsLinear[1].GetPosition();
	rPumpPosition[2] := GVL_Motion.aPumpsLinear[2].GetPosition();
	rPumpPosition[3] := GVL_Motion.aPumpsLinear[3].GetPosition();
	rPumpPosition[4] := GVL_Motion.aPumpsLinear[4].GetPosition();
	rPumpPosition[5] := GVL_Motion.aPumpsLinear[5].GetPosition();
	rPumpPosition[6] := GVL_Motion.aPumpsLinear[6].GetPosition();
	rPumpPosition[7] := GVL_Motion.aPumpsLinear[7].GetPosition();
	rPumpPosition[8] := GVL_Motion.aPumpsLinear[8].GetPosition();
	rPumpPosition[9] := GVL_Motion.aPumpsLinear[9].GetPosition();
	rPumpPosition[10] := GVL_Motion.aPumpsLinear[10].GetPosition();

	rValvePosition[1]	:= GVL_Motion.aValvesObj[1].GetPosition();
	rValvePosition[2]	:= GVL_Motion.aValvesObj[2].GetPosition();
	rValvePosition[3]	:= GVL_Motion.aValvesObj[3].GetPosition();
	rValvePosition[4]	:= GVL_Motion.aValvesObj[4].GetPosition();
	rValvePosition[5]	:= GVL_Motion.aValvesObj[5].GetPosition();
END_IF

IF bDebug4 THEN
	bDebug4 := NOT GVL_Motion.aMotors[1].MoveAbsolute(rPosition := 0, rVelocity := 15, rAcc := 15, rDec := 15);
END_IF

IF bDebug5 THEN
	bDebug5 := NOT GVL_Motion.aMotors[1].MoveAbsolute(rPosition := -100, rVelocity := 15, rAcc := 15, rDec := 15);
END_IF

IF bDebug6 THEN
	bDebug6 := NOT GVL_Motion.aValvesObj[3].MoveValve( iPosition := 3, rVelocity := 10, rAcc := 10, rDec := 10);
END_IF

IF bDebug7 THEN
	bDebug7 := NOT GVL_Motion.aValvesObj[3].MoveValve( iPosition := 1, rVelocity := 10, rAcc := 10, rDec := 10);
END_IF

IF bDebug9 THEN
	bDebug9 := NOT GVL_Motion.aMotors[1].Stop();
END_IF

IF bDebug10 THEN
	bDebug10 := NOT GVL_Motion.aValvesObj[1].Stop();
END_IF


//<pumps volume dispenser test>------------------------------------------------------------------------------------------------------------------

//9mm Linear pump opening – 0.079 µL/step
//5mL Testing 
//GVL_Motion.aPumps[1].Rotary.fDistance := 63291; //[5000 / 0.079] 

fbMoveRelative(
	Axis			:= GVL_Motion.aPumps[1].Rotary.Axis,
	Execute			:= bStartRelMov,
	Distance		:= GVL_Motion.aPumps[1].Rotary.fDistance,
	Velocity		:= GVL_Motion.aPumps[1].Rotary.fRelVelocity,
	Acceleration	:= GVL_Motion.aPumps[1].Rotary.fAcceleration,
	Deceleration	:= GVL_Motion.aPumps[1].Rotary.fDeceleration,
	Done			=> GVL_Motion.aPumps[1].Rotary.bInPosition,
	Error			=> GVL_Motion.aPumps[1].Rotary.bError,
	ErrorID			=> GVL_Motion.aPumps[1].Rotary.nErrorID
);


//<\pumps volume dispenser test>------------------------------------------------------------------------------------------------------------------

//<Event Logger Test>----------------------------------------------------------------------------------------------------------------------------
// Events call
fbEventHandler(
	bExecute 	:= bExecuteEvent,		// Triggers the event
	eEventName 	:= E_Events.INFO,		// Selects the type of event to be triggered.
	sSystem		:= 'Safety',			// System message
	sMessage	:= 'Doors not closed!',	// Alarm Message
	bDone		=> bEventDone			// Event Listed
);

IF bEventDone THEN
	bExecuteEvent 	:= FALSE;
	bEventDone		:= FALSE;	
END_IF

//Alarms Call
fbAlarm(
	evtEntry 	:= TC_Events.ASRS.Error,	// Selects the type of event to be triggered.
	bEvt 		:= bAlarmEvent, 			// Triggers the alarm. If TRUE the alarm is raised and when turn into FALSE the alarm is cleared.
	bConfirm 	:= bConfirm,				// Confirms the Alarm State
	sSystem		:= 'Motor M1',				// System message
	sMessage	:= 'Over Voltage!'			// Alarm Message
);
//Do something while the alarm is raised
IF fbAlarm.eConfirmationState = TcEventConfirmationState.WaitForConfirmation THEN
	bDoSomething 	:= TRUE;
ELSE
	bDoSomething 	:= FALSE;
END_IF

//<\Event Logger Test>---------------------------------------------------------------------------------------------------------------------------

//<Balance Test>---------------------------------------------------------------------------------------------------------------------------------

// FB_TCPClient instance to handle the connection with the Balance and interpretate it's response
fbTcpClient(
    sRemoteHost 	:= GVL_Settings.aBalanceIP,		//Server Ip address
    nRemotePort 	:= GVL_Settings.nBalancePort,	//Server communication Port
    bTrigger 		:= bStartCommunication,				//Triggers the communication
    tStateDelay 	:= tAdjustableDelay,  				//Time delay between the steps [closeAll > Connection > Send > Receive > Parse > Close Connection]
    sParsedResponse	=> sResponseMessage, 				//Personalized Resposse message
    fWeight 		=> fMeasuredWeight, 				//Parsed LReal Weight meassured if eveything goes ok
	bConnectionDone	=> bConnectionDone,					//Communication Finished
    bBusy 			=> ,								//Busy status
    bError 			=> ,								//Error status
    nErrorID 		=> 									//Error ID if in error
);

// Reset Trigger after FB finished
IF bConnectionDone THEN
    bStartCommunication := FALSE;
END_IF

//<\Balance Test>---------------------------------------------------------------------------------------------------------------------------------

//<Pressure Testing>------------------------------------------------------------------------------------------------------------------------------
IF bPressureInput THEN
	fbSensorScaling(iRawValue := GVL_IO.gAnalogInputs.rMainPressureSupplyInput, iSensorID := 1, rPressure => rPressureSensor);
END_IF
//<\Pressure Testing>-----------------------------------------------------------------------------------------------------------------------------




]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="3102" Count="3" />
      <LineId Id="3568" Count="0" />
      <LineId Id="3567" Count="0" />
      <LineId Id="3784" Count="0" />
      <LineId Id="3873" Count="1" />
      <LineId Id="4065" Count="0" />
      <LineId Id="3651" Count="0" />
      <LineId Id="3106" Count="0" />
      <LineId Id="4161" Count="0" />
      <LineId Id="5183" Count="0" />
      <LineId Id="4713" Count="1" />
      <LineId Id="4716" Count="0" />
      <LineId Id="4950" Count="3" />
      <LineId Id="4955" Count="4" />
      <LineId Id="4712" Count="0" />
      <LineId Id="4377" Count="0" />
      <LineId Id="3875" Count="0" />
      <LineId Id="4379" Count="0" />
      <LineId Id="4926" Count="0" />
      <LineId Id="4943" Count="3" />
      <LineId Id="4183" Count="0" />
      <LineId Id="4165" Count="0" />
      <LineId Id="3967" Count="0" />
      <LineId Id="4927" Count="0" />
      <LineId Id="4948" Count="1" />
      <LineId Id="4947" Count="0" />
      <LineId Id="4930" Count="4" />
      <LineId Id="4936" Count="1" />
      <LineId Id="4940" Count="2" />
      <LineId Id="4172" Count="1" />
      <LineId Id="4819" Count="3" />
      <LineId Id="4171" Count="0" />
      <LineId Id="4177" Count="0" />
      <LineId Id="4176" Count="0" />
      <LineId Id="4280" Count="0" />
      <LineId Id="4179" Count="0" />
      <LineId Id="4382" Count="2" />
      <LineId Id="4381" Count="0" />
      <LineId Id="4388" Count="2" />
      <LineId Id="4387" Count="0" />
      <LineId Id="4395" Count="2" />
      <LineId Id="4394" Count="0" />
      <LineId Id="4499" Count="0" />
      <LineId Id="4605" Count="1" />
      <LineId Id="4603" Count="0" />
      <LineId Id="4607" Count="2" />
      <LineId Id="3653" Count="0" />
      <LineId Id="5068" Count="0" />
      <LineId Id="5063" Count="0" />
      <LineId Id="3654" Count="0" />
      <LineId Id="3673" Count="0" />
      <LineId Id="3669" Count="0" />
      <LineId Id="3674" Count="0" />
      <LineId Id="3691" Count="0" />
      <LineId Id="3690" Count="0" />
      <LineId Id="3675" Count="2" />
      <LineId Id="3681" Count="2" />
      <LineId Id="3686" Count="3" />
      <LineId Id="3678" Count="0" />
      <LineId Id="3668" Count="0" />
      <LineId Id="3656" Count="1" />
      <LineId Id="3652" Count="0" />
      <LineId Id="3107" Count="58" />
      <LineId Id="3172" Count="0" />
      <LineId Id="3321" Count="3" />
      <LineId Id="767" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>