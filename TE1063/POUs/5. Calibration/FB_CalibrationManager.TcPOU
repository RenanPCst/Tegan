<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_CalibrationManager" Id="{f5b6651e-f67d-465b-b243-425be4d72cd5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CalibrationManager
VAR_INPUT
    bExecute         : BOOL;
    bAbort           : BOOL;
    eSolvent         : E_SolventType;
    aPumpSettings    : ARRAY[1..10] OF ST_CalibrationPump;
    tDelayStart      : TIME;
    bPrintReport     : BOOL;
END_VAR

VAR_OUTPUT
    aPumpResults     : ARRAY[1..10] OF ST_CalibrationPump;
    bDone            : BOOL;
    bBusy            : BOOL;
    sStatus          : STRING;
END_VAR

VAR
    eStep            : E_CalibStep := E_CalibStep.IDLE;
    iPumpIndex       : INT := 1;
    iReplicate       : INT := 0;
    tonCalDelay      : TON;

    aPumpMask        : ARRAY[1..10] OF BOOL;
    aVolumeSetpoint  : ARRAY[1..10] OF REAL;
    aDirection       : ARRAY[1..10] OF E_PumpDirection;
    aVelocity        : ARRAY[1..10] OF REAL;

    fbPumps          : FB_AllPumpsController;
    rWeightBefore    : LREAL;
    rWeightAfter     : LREAL;
    rVolumeDelta     : LREAL;
    bRequestWeight   : BOOL := FALSE;
    rScaleWeight     : LREAL;
    bReadReturnWeight : BOOL := FALSE;
	bPumpMoveRequest  : BOOL := FALSE;

    rAcceptanceCrit  : REAL := 0.5;
    iAllowableFail   : INT := 2;
    iMaxReplicates   : INT := 2;
	
	aPumpStatus : ST_ActuatorStatus;
	
	i : USINT;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE eStep OF

    E_CalibStep.IDLE:
        bBusy := FALSE;
        bDone := FALSE;
        sStatus := 'Idle';
        IF bExecute THEN
            bBusy := TRUE;
            iPumpIndex := 1;
            iReplicate := 0;
            eStep := E_CalibStep.DELAY;
        END_IF

    E_CalibStep.DELAY:
		tonCalDelay(IN := TRUE, PT := tDelayStart);
        sStatus := 'Waiting delay...';
        IF tonCalDelay.Q THEN
            bRequestWeight := TRUE;
            eStep := E_CalibStep.WEIGH_BEFORE;
			tonCalDelay(IN := FALSE);
        END_IF

    E_CalibStep.WEIGH_BEFORE:
		sStatus := 'Requesting weight...';
        IF bRequestWeight THEN
            rScaleWeight := GVL_Calibration.fbScaleDevice.RequestWeight();
            IF GVL_Calibration.fbScaleDevice.bWeightReady THEN
                rWeightBefore := rScaleWeight;
                bRequestWeight := NOT GVL_Calibration.fbScaleDevice.Reset();
                eStep := E_CalibStep.WITHDRAW_BACKWARD;
				sStatus := CONCAT('Weight Received: ', CONCAT(TO_STRING(rWeightBefore),'g'));
            END_IF
        END_IF

    E_CalibStep.WITHDRAW_BACKWARD:
        FOR i := 1 TO 10 DO
            aPumpMask[i] := FALSE;
            aVolumeSetpoint[i] := 0.0;
            aVelocity[i] := 1.0;
            aDirection[i] := E_PumpDirection.BACKWARD;
        END_FOR

        IF aPumpSettings[iPumpIndex].bSelected THEN
            aPumpMask[iPumpIndex] := TRUE;
            aVolumeSetpoint[iPumpIndex] := aPumpSettings[iPumpIndex].rTargetVolume;
			
			IF NOT bPumpMoveRequest THEN
				bPumpMoveRequest :=	fbPumps.MoveByVolume( aPumpIds := aPumpMask,
														  aVolume := aVolumeSetpoint,
														  aPumpDirection := aDirection,
														  aVelocity := aVelocity
														 );
			END_IF
			
			IF bPumpMoveRequest THEN
				bRequestWeight := TRUE;
            	eStep := E_CalibStep.WEIGH_AFTER_BACKWARD;
				bPumpMoveRequest := FALSE;
			END_IF
			
			aPumpStatus := GVL_Motion.aPumpsRotary[iPumpIndex].GetStatus();
			IF aPumpStatus.bBusy THEN
				sStatus := CONCAT('Pump ', CONCAT(TO_STRING(iPumpIndex),' in reverse movement'));
			END_IF
			
        ELSE
            eStep := E_CalibStep.NEXT_PUMP;
        END_IF

    E_CalibStep.WEIGH_AFTER_BACKWARD:
		sStatus := 'Requesting weight...';
        IF bRequestWeight THEN
            rScaleWeight := GVL_Calibration.fbScaleDevice.RequestWeight();
            IF GVL_Calibration.fbScaleDevice.bWeightReady THEN
                rWeightAfter := rScaleWeight;
                bRequestWeight := NOT GVL_Calibration.fbScaleDevice.Reset();
				sStatus := CONCAT('Weight Received: ', CONCAT(TO_STRING(rWeightAfter),'g'));
                rVolumeDelta := rWeightBefore - rWeightAfter;

                IF ABS(rVolumeDelta - aPumpSettings[iPumpIndex].rTargetVolume) * 100.0 / aPumpSettings[iPumpIndex].rTargetVolume <= rAcceptanceCrit THEN
                    eStep := E_CalibStep.RETURN_FORWARD;
                ELSE
                    aPumpResults[iPumpIndex].iFailures := aPumpResults[iPumpIndex].iFailures + 1;
                    IF aPumpResults[iPumpIndex].iFailures > iAllowableFail THEN
                        aPumpResults[iPumpIndex].eStatus := E_CalibrationStatus.FAILED;
                        eStep := E_CalibStep.NEXT_PUMP;
                    ELSE
                        eStep := E_CalibStep.RETURN_FORWARD;
                    END_IF
                END_IF
            END_IF
        END_IF

    E_CalibStep.RETURN_FORWARD:
        FOR i := 1 TO 10 DO
            aPumpMask[i] := FALSE;
            aVolumeSetpoint[i] := 0.0;
            aVelocity[i] := 1.0;
            aDirection[i] := E_PumpDirection.FORWARD;
        END_FOR
		
        aPumpMask[iPumpIndex] := TRUE;
        aVolumeSetpoint[iPumpIndex] := aPumpSettings[iPumpIndex].rTargetVolume;
		
		IF NOT bPumpMoveRequest THEN
			bPumpMoveRequest := fbPumps.MoveByVolume( aPumpIds := aPumpMask,
													  aVolume := aVolumeSetpoint,
													  aPumpDirection := aDirection,
													  aVelocity := aVelocity
													);
		END_IF
        
		IF bPumpMoveRequest THEN
			bRequestWeight := TRUE;
        	eStep := E_CalibStep.WEIGH_AFTER_FORWARD;
			bPumpMoveRequest := FALSE;
		END_IF
		
		aPumpStatus := GVL_Motion.aPumpsRotary[iPumpIndex].GetStatus();
		IF aPumpStatus.bBusy THEN
			sStatus := CONCAT('Pump ', CONCAT(TO_STRING(iPumpIndex),' in direct movement'));
		END_IF
        
    E_CalibStep.WEIGH_AFTER_FORWARD:
		sStatus := 'Requesting weight...';
        IF bRequestWeight THEN
            rScaleWeight := GVL_Calibration.fbScaleDevice.RequestWeight();
            IF GVL_Calibration.fbScaleDevice.bWeightReady THEN
                rWeightAfter := rScaleWeight;
                bRequestWeight := NOT GVL_Calibration.fbScaleDevice.Reset();
				sStatus := CONCAT('Weight Received: ', CONCAT(TO_STRING(rWeightAfter),'g'));
                rVolumeDelta := rWeightAfter - rWeightBefore;

                IF ABS(rVolumeDelta - aPumpSettings[iPumpIndex].rTargetVolume) * 100.0 / aPumpSettings[iPumpIndex].rTargetVolume <= rAcceptanceCrit THEN
                    aPumpResults[iPumpIndex].eStatus := E_CalibrationStatus.PASSED;
                ELSE
                    aPumpResults[iPumpIndex].eStatus := E_CalibrationStatus.FAILED;
                END_IF
                eStep := E_CalibStep.NEXT_PUMP;
            END_IF
        END_IF

    E_CalibStep.NEXT_PUMP:
        iPumpIndex := iPumpIndex + 1;
        iReplicate := 0;
        IF iPumpIndex <= 10 THEN
            bRequestWeight := TRUE;
            eStep := E_CalibStep.WEIGH_BEFORE;
        ELSE
            eStep := E_CalibStep.COMPLETE;
        END_IF

    E_CalibStep.COMPLETE:
        sStatus := 'Calibration Completed';
        bDone := TRUE;
        bBusy := FALSE;
        eStep := E_CalibStep.IDLE;

END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="FB_CalibrationManager">
      <LineId Id="383" Count="6" />
      <LineId Id="391" Count="6" />
      <LineId Id="533" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="400" Count="2" />
      <LineId Id="535" Count="0" />
      <LineId Id="403" Count="2" />
      <LineId Id="520" Count="0" />
      <LineId Id="406" Count="5" />
      <LineId Id="521" Count="0" />
      <LineId Id="412" Count="14" />
      <LineId Id="525" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="429" Count="4" />
      <LineId Id="528" Count="2" />
      <LineId Id="532" Count="0" />
      <LineId Id="536" Count="0" />
      <LineId Id="531" Count="0" />
      <LineId Id="549" Count="1" />
      <LineId Id="552" Count="2" />
      <LineId Id="551" Count="0" />
      <LineId Id="436" Count="4" />
      <LineId Id="560" Count="0" />
      <LineId Id="441" Count="4" />
      <LineId Id="561" Count="0" />
      <LineId Id="446" Count="26" />
      <LineId Id="537" Count="0" />
      <LineId Id="540" Count="0" />
      <LineId Id="542" Count="2" />
      <LineId Id="538" Count="1" />
      <LineId Id="478" Count="1" />
      <LineId Id="545" Count="0" />
      <LineId Id="547" Count="1" />
      <LineId Id="546" Count="0" />
      <LineId Id="555" Count="0" />
      <LineId Id="557" Count="2" />
      <LineId Id="556" Count="0" />
      <LineId Id="480" Count="0" />
      <LineId Id="483" Count="0" />
      <LineId Id="562" Count="0" />
      <LineId Id="484" Count="4" />
      <LineId Id="563" Count="0" />
      <LineId Id="489" Count="27" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>