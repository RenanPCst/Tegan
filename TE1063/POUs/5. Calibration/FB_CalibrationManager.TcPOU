<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_CalibrationManager" Id="{f5b6651e-f67d-465b-b243-425be4d72cd5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CalibrationManager
VAR_INPUT
    bExecute         : BOOL; // Trigger to start calibration
    bAbort           : BOOL; // Trigger to abort trigger
    eSolvent         : E_SolventType; // Selected solvent type
	rSolventDensity  : LREAL; //Solvent Density
    aPumpSettings    : ARRAY[1..10] OF ST_CalibrationPump; // Pump input settings
    tDelayStart      : TIME; // Optional delay before calibration starts
    bPrintReport     : BOOL; // Option to print report at end
END_VAR

VAR_OUTPUT
    aPumpResults     : ARRAY[1..10] OF ST_CalibrationPump; // Pump result structure
    bDone            : BOOL; // Signals end of calibration
    bBusy            : BOOL; // Calibration in progress
    sStatus          : STRING; // Textual status
	iDataCount		 : INT; // Number of positions used into GVL_Calibration.aCalibCheckResult array
END_VAR

VAR
    eStep             	  : E_CalibStep := E_CalibStep.IDLE; // Main step enum
    iPumpIndex        	  : INT := 1; // Tracks current pump
    iReplicate        	  : INT := 0; // Tracks current replicate
	bStartCalibration 	  : BOOL := FALSE;
	bCalibrationRequested : BOOL := FALSE;

    tonCalDelay      : TON; // General delay timer
    tonStepTimeout   : TON; // Timeout per step
	tonWeigthStabilization : TON; //Time after the pump finish to wait for stable weigth
	
	bExecutePulse   : R_TRIG; // Edge detection for bExecute

    aPumpMask        : ARRAY[1..10] OF BOOL; // Mask for pump selection
    aVolumeSetpoint  : ARRAY[1..10] OF REAL; // Target volume for each pump
    aDirection       : ARRAY[1..10] OF E_PumpDirection; // Direction per pump
    aVelocity        : ARRAY[1..10] OF REAL; // Velocity per pump

    fbPumps          : FB_AllPumpsController; // Instance of pump controller
    rWeightBefore    : LREAL; // Weight before pump operation
    rWeightAfter     : LREAL; // Weight after pump operation
    rWeightDelta     : LREAL; // Weight difference
	rVolume			 : LREAL; // Volume calculated 
    bRequestWeight   : BOOL := FALSE; // Trigger for requesting scale
	bWeightReady	 : BOOL := FALSE; // Trigger when weigth is ready
    rScaleWeight     : LREAL; // Latest scale result
	rDistanceByVol	 : LREAL; // MoveRelative distance
	rPercentDifference : LREAL; //Percentual Difference between net volume and tagert volume
	
    rAcceptanceCrit  : REAL := 0.5; // Acceptance percentage (from HMI)
    iAllowableFail   : INT := 2; 	// Max failures from pump settings
    iMaxReplicates   : INT := 2; 	// Replicate count (from HMI)
	iResultIndex	 : INT;		 	// Array index on calibration results
	
	bMovePump		 : BOOL := FALSE;
    bMoveMotorM2     : BOOL := FALSE; // Motion trigger M2
    bMoveMotorM3     : BOOL := FALSE; // Motion trigger M3
    bMoveValve       : ARRAY[1..5] OF BOOL; // Valve position tracking

    i                : USINT;// Loop index helper
    bBoxPresent      : BOOL; // True if calibration box detected
    bBoxWeightOK     : BOOL; // True if calibration box has valid weight

    tStepTimeout     : TIME := T#60S; // Default timeout per step;
	tWeightStable	 : TIME := T#20S; // Default waiting time befe request weight
	
	// Scale-attention handling (9999 pause)
    bScaleAttention  : BOOL := FALSE; // TRUE while waiting operator
	bCalBoxAttention : BOOL := FALSE; // TRUE while waiting operator
    eStepResume      : E_CalibStep := E_CalibStep.IDLE; // Step to return to after fix
	
	// Timestamp generation (local system time)
    fbLocalSystemTime : FB_LocalSystemTime;
    stLocal           : TIMESTRUCT;
    sStamp            : STRING(32);
    sHH               : STRING(2);
    sMM               : STRING(2);
    sSS               : STRING(2);
    sMMo              : STRING(3);
    sDD               : STRING(2);
	bDTReady		  : BOOL := FALSE;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// bExecute Rising edge
bExecutePulse(CLK := bExecute);

// FB Trigger
IF bExecutePulse.Q AND eStep = E_CalibStep.IDLE THEN
    bStartCalibration := TRUE;
END_IF

// Abort logic
IF bAbort THEN
    eStep := E_CalibStep.ERROR;
END_IF

// State machine
CASE eStep OF

    E_CalibStep.IDLE:
    	bBusy := FALSE;
		bDone := FALSE;
		sStatus := 'Idle';
		IF bStartCalibration THEN
			bBusy := TRUE;
			iPumpIndex := 1;
			iReplicate := 0;
			iResultIndex := 1; // first log row
			bStartCalibration := FALSE;
			eStep := E_CalibStep.DELAY;
		END_IF

    E_CalibStep.DELAY:

        tonCalDelay(IN := TRUE, PT := tDelayStart);
        sStatus := 'Waiting delay...';
        IF tonCalDelay.Q THEN
            tonCalDelay(IN := FALSE);
            tonStepTimeout(IN := FALSE);
            eStep := E_CalibStep.CHECKING_WEIGH;
			bRequestWeight := TRUE;
        END_IF

	
    E_CalibStep.CHECKING_WEIGH:

		tonStepTimeout(IN := TRUE, PT := tStepTimeout);
		sStatus := 'Checking the Calibration Box Weigth';
        bBoxPresent := GVL_IO.gDigInputs.bCalibrationBoxPresent;
		
		// Request non-blocking reading
		IF bRequestWeight THEN
			rScaleWeight := GVL_Calibration.fbScaleDevice.RequestWeight();
			IF GVL_Calibration.fbScaleDevice.bWeightReady THEN
				// if returns 9999 pause and wait operator
				IF rScaleWeight = 9999.0 THEN
					tonCalDelay(IN := FALSE);
					tonStepTimeout(IN := FALSE);
					tonWeigthStabilization(IN := FALSE);
	
					GVL_HMI.bScaleNeedsAtention := TRUE;
					bScaleAttention := TRUE;
	
					bRequestWeight := FALSE;
					bWeightReady   := FALSE;
	
					eStepResume := E_CalibStep.CHECKING_WEIGH;
					eStep := E_CalibStep.SCALE_ATTENTION;
				ELSE
					bWeightReady   := TRUE;
					bRequestWeight := NOT GVL_Calibration.fbScaleDevice.Reset();
				END_IF
			END_IF
		END_IF

		IF bWeightReady THEN
			
			bBoxWeightOK := (rScaleWeight >= 1100.0) AND (rScaleWeight <= 1300.0);
			
			IF tonStepTimeout.Q THEN
				//GVL_HMI.aAlarmFlags[1] := TRUE; // Timeout during motor positioning
				sStatus := 'Timeout while positioning motors';
				eStep := E_CalibStep.ERROR;
			ELSIF NOT bBoxPresent THEN
				//GVL_HMI.bCalibrationBoxMissing := TRUE;
				sStatus := 'Calibration box not present!';
				eStep := E_CalibStep.IDLE;
			ELSIF NOT bBoxWeightOK THEN
				//GVL_HMI.bCalibrationBoxEmpty := TRUE;
				tonCalDelay(IN := FALSE);
				tonStepTimeout(IN := FALSE);
				tonWeigthStabilization(IN := FALSE);
	
				// Show HMI popup asking operator to fill box to 1100–1300 g
				GVL_HMI.bCalBoxNeedsAttention := TRUE;
				bCalBoxAttention := TRUE;
	
				// Clear current weight request state
				bRequestWeight := FALSE;
				bWeightReady   := FALSE;
	
				// Resume back to this same step after operator presses Continue
				eStepResume := E_CalibStep.CHECKING_WEIGH;
				eStep       := E_CalibStep.CALBOX_ATTENTION;
			ELSE
				//Proceed
				bWeightReady := FALSE;
				eStep := E_CalibStep.POSITION_MOTORS;
				rAcceptanceCrit := GVL_HMI.stHMICalibParameters.rAcceptanceCriteria;
			END_IF
		END_IF
	
	E_CalibStep.POSITION_MOTORS:
	
		sStatus := 'Positioning motors M2 and M3';
		// Positioning motors M2 and M3 to calibration position 
		IF NOT bMoveMotorM3 THEN
			bMoveMotorM3 := GVL_Motion.aMotors[3].MoveAbsolute(GVL_Settings.stMachineParam.aM3Position[6], GVL_Settings.stMachineParam.rM3Velocity, GVL_Settings.stMachineParam.rM3Accleration, GVL_Settings.stMachineParam.rM3Deceleration);
		END_IF
		IF NOT bMoveMotorM2 AND bMoveMotorM3 THEN
			bMoveMotorM2 := GVL_Motion.aMotors[2].MoveAbsolute(GVL_Settings.stMachineParam.aM2Position[4], GVL_Settings.stMachineParam.rM2Velocity, GVL_Settings.stMachineParam.rM2Accleration, GVL_Settings.stMachineParam.rM2Deceleration);
		END_IF
		IF bMoveMotorM2 AND bMoveMotorM3 THEN
			bMoveMotorM2 := FALSE;
			bMoveMotorM3 := FALSE;
			tonStepTimeout(IN := FALSE);
			eStep := E_CalibStep.POSITION_VALVES;
		END_IF

	
    E_CalibStep.POSITION_VALVES:
		
		tonStepTimeout(IN := TRUE, PT := tStepTimeout);
        sStatus := 'Positioning valves to Position 6';
		// Positioning the valves to the needles, position 6 
        FOR i := 1 TO 5 DO
            IF NOT bMoveValve[i] THEN
                bMoveValve[i] := GVL_Motion.aValvesObj[i].MoveValve(iPosition := 6, rVelocity := GVL_Motion.aValves[i].rTargetVel, rAcc := GVL_Motion.aValves[i].rAcceleration, rDec := GVL_Motion.aValves[i].rDeceleration);
            END_IF
        END_FOR
       IF bMoveValve[1] AND bMoveValve[2] AND bMoveValve[3] AND bMoveValve[4] AND bMoveValve[5] THEN
			FOR i := 1 TO 5 DO bMoveValve[i] := FALSE; END_FOR
			tonStepTimeout(IN := FALSE);
			eStep := E_CalibStep.FILLJAR_FORWARD; 
		ELSIF tonStepTimeout.Q THEN
			sStatus := 'Timeout while positioning valves';
			eStep := E_CalibStep.ERROR;
		END_IF

	
	E_CalibStep.FILLJAR_FORWARD:

		sStatus := CONCAT('Filling up the jar number: ', TO_STRING(iPumpIndex));
		
		IF aPumpSettings[iPumpIndex].bSelected THEN
			rDistanceByVol := F_VolumeToSteps_Path(rVolume := (aPumpSettings[iPumpIndex].rTargetVolume + 50), iPumpIndex := iPumpIndex, ePath := E_PumpPath.FromCalBox);
			// Filling up the jar to start the calibration
			IF NOT bMovePump THEN
				bMovePump := GVL_Motion.aPumpsRotary[iPumpIndex].MoveRelative(	Distance := rDistanceByVol, 
																				Velocity := GVL_Settings.stPumpParameters.iMeterVelocity, 
																				Acc := GVL_Settings.stPumpParameters.iMeterVelocity, 
																				Dec := GVL_Settings.stPumpParameters.iMeterVelocity
																			 );
			END_IF
	
			IF bMovePump THEN
				tonWeigthStabilization(IN := TRUE, PT := tWeightStable);
				sStatus := 'Waiting for weight stabilization...';
				IF tonWeigthStabilization.Q THEN
					bMovePump := FALSE;
					tonWeigthStabilization(IN := FALSE);
					bRequestWeight := TRUE;
					bWeightReady := FALSE;
					eStep := E_CalibStep.WEIGH_BEFORE;
				END_IF
			END_IF
		ELSE
			// If the pumps was not selected go to next one
			eStep := E_CalibStep.NEXT_PUMP;
		END_IF

	
    E_CalibStep.WEIGH_BEFORE:

        sStatus := 'Taring scale...';
        IF bRequestWeight AND NOT bWeightReady THEN
            rScaleWeight := GVL_Calibration.fbScaleDevice.RequestWeight();
            IF GVL_Calibration.fbScaleDevice.bWeightReady THEN
                IF rScaleWeight = 9999.0 THEN
					tonCalDelay(IN := FALSE);
					tonStepTimeout(IN := FALSE);
					tonWeigthStabilization(IN := FALSE);
	
					GVL_HMI.bScaleNeedsAtention := TRUE;
					bScaleAttention := TRUE;
	
					bRequestWeight := FALSE;
					bWeightReady   := FALSE;
	
					eStepResume := E_CalibStep.WEIGH_BEFORE;
					eStep := E_CalibStep.SCALE_ATTENTION;
				ELSE
					rWeightBefore := rScaleWeight;
					
					GVL_HMI.aCalPumpResults[iPumpIndex].rTareWeight := rWeightBefore;
					GVL_Calibration.aCalibCheckResult[iResultIndex].rTareWeight := rWeightBefore;
					GVL_calibration.stPumpCalibrationData[iResultIndex].rTareWeigth := rWeightBefore;
					GVL_Calibration.aCalibCheckResult[iResultIndex].nPumpIndex := TO_USINT(iPumpIndex);
					GVL_Calibration.stPumpCalibrationData[iResultIndex].iPumpNumber := TO_USINT(iPumpIndex);
	
					bWeightReady   := TRUE;
					bRequestWeight := NOT GVL_Calibration.fbScaleDevice.Reset();
				END_IF
            END_IF
		END_IF
		IF bWeightReady THEN
			IF (rWeightBefore >= 0 AND rWeightBefore <= 1300) THEN
				GVL_HMI.aCalPumpResults[iPumpIndex].rTareWeight := rWeightBefore;
				GVL_Calibration.aCalibCheckResult[iResultIndex].rTareWeight := rWeightBefore;
				GVL_calibration.stPumpCalibrationData[iResultIndex].rTareWeigth := rWeightBefore;
				GVL_Calibration.aCalibCheckResult[iResultIndex].nPumpIndex := TO_USINT(iPumpIndex);
				GVL_Calibration.stPumpCalibrationData[iResultIndex].iPumpNumber := TO_USINT(iPumpIndex);
				rDistanceByVol := 0.0;
				bWeightReady := FALSE;
				eStep := E_CalibStep.WITHDRAW_BACKWARDS;
			ELSE
				eStep := E_CalibStep.ERROR;
			END_IF
		END_IF        

	
    E_CalibStep.WITHDRAW_BACKWARDS:

		sStatus := CONCAT(CONCAT('Check ',CONCAT(TO_STRING(iReplicate + 1),CONCAT(' | Pumping to calibration box: ', TO_STRING(aVolumeSetpoint[iPumpIndex])))),' ml');

		aVolumeSetpoint[iPumpIndex] := aPumpSettings[iPumpIndex].rTargetVolume;
		GVL_Calibration.aCalibCheckResult[iResultIndex].rTargetVolume := aPumpSettings[iPumpIndex].rTargetVolume;
		GVL_calibration.stPumpCalibrationData[iResultIndex].rTargetVolume := aPumpSettings[iPumpIndex].rTargetVolume;
		rDistanceByVol := F_VolumeToSteps_Path(rVolume := aVolumeSetpoint[iPumpIndex], iPumpIndex := iPumpIndex, ePath := E_PumpPath.FillCalBox );
		GVL_Calibration.aCalibCheckResult[iResultIndex].nRevsDone := TO_UINT(rDistanceByVol/360);
		GVL_calibration.stPumpCalibrationData[iResultIndex].iPumpRevs := TO_UINT(rDistanceByVol/360);
		
		IF NOT bMovePump THEN
			bMovePump := GVL_Motion.aPumpsRotary[iPumpIndex].MoveRelative( 	Distance := - rDistanceByVol, 
																			Velocity := GVL_Settings.stPumpParameters.iMeterVelocity, 
																			Acc := GVL_Settings.stPumpParameters.iMeterVelocity, 
																			Dec := GVL_Settings.stPumpParameters.iMeterVelocity	
																		 	);
		END_IF
		
		IF bMovePump THEN
			tonWeigthStabilization(in := TRUE, pt := tWeightStable);
			sStatus :='Waiting for weight stabilization...';
			IF tonWeigthStabilization.Q THEN
				bRequestWeight := TRUE;
				bMovePump := FALSE;
				tonWeigthStabilization(IN := FALSE);
				eStep := E_CalibStep.WEIGH_AFTER;
			END_IF
		END_IF


	
    E_CalibStep.WEIGH_AFTER:

		sStatus := 'Requesting Gross Weight... ';
	
        IF bRequestWeight AND NOT bWeightReady THEN
            rScaleWeight := GVL_Calibration.fbScaleDevice.RequestWeight();
            IF GVL_Calibration.fbScaleDevice.bWeightReady THEN
                IF rScaleWeight = 9999.0 THEN
					tonCalDelay(IN := FALSE);
					tonStepTimeout(IN := FALSE);
					tonWeigthStabilization(IN := FALSE);
	
					GVL_HMI.bScaleNeedsAtention := TRUE;
					bScaleAttention := TRUE;
	
					bRequestWeight := FALSE;
					bWeightReady   := FALSE;
	
					eStepResume := E_CalibStep.WEIGH_AFTER;
					eStep := E_CalibStep.SCALE_ATTENTION;
				ELSE
					rWeightAfter := rScaleWeight;
					GVL_HMI.aCalPumpResults[iPumpIndex].rGrossWeight := rWeightAfter;
	
					bWeightReady := TRUE;
					// NET (weight delta)
					rWeightDelta := rWeightAfter - rWeightBefore;
					GVL_HMI.aCalPumpResults[iPumpIndex].rActualVolume := rWeightDelta;
	
					// Mirror to logs
					GVL_Calibration.aCalibCheckResult[iResultIndex].rGrossWeight := rWeightAfter;
					GVL_calibration.stPumpCalibrationData[iResultIndex].rGrossWeigth := rWeightAfter;
					GVL_Calibration.aCalibCheckResult[iResultIndex].rNetWeight := rWeightDelta;
					GVL_calibration.stPumpCalibrationData[iResultIndex].rNetWeigth := rWeightDelta;
	
					// Density-based volume
					GVL_calibration.stPumpCalibrationData[iResultIndex].rNetVolume := rWeightDelta / rSolventDensity;
					rVolume := GVL_calibration.stPumpCalibrationData[iResultIndex].rNetVolume;
	
					bRequestWeight := NOT GVL_Calibration.fbScaleDevice.Reset();
				END_IF
			END_IF	
		END_IF	
		
		 // Produce a timestamp: DD-MMM-YYYY HH:MM:SS
        fbLocalSystemTime(bEnable := TRUE, dwCycle := 5);
		
        IF fbLocalSystemTime.bValid THEN
            stLocal := fbLocalSystemTime.systemTime;

            sMMo := F_MonthString(stLocal.wMonth);
            sDD  := F_TwoDigits(stLocal.wDay);
            sHH  := F_TwoDigits(stLocal.wHour);
            sMM  := F_TwoDigits(stLocal.wMinute);
            sSS  := F_TwoDigits(stLocal.wSecond);

			sStamp := CONCAT(sDD, '-');			//DD-
			sStamp := CONCAT(sStamp, sMMo);		//DD-MMM
			sStamp := CONCAT(sStamp, '-');		//DD-MMM-
			sStamp := CONCAT(sStamp, INT_TO_STRING(stLocal.wYear)); //DD-MMM-YYYY
			sStamp := CONCAT(sStamp, ' '); 		//DD-MMM-YYYY 
			sStamp := CONCAT(sStamp, sHH);		//DD-MMM-YYYY HH
			sStamp := CONCAT(sStamp, ':');		//DD-MMM-YYYY HH:
			sStamp := CONCAT(sStamp, sMM);		//DD-MMM-YYYY HH:MM
			sStamp := CONCAT(sStamp, ':');		//DD-MMM-YYYY HH:MM:
			sStamp := CONCAT(sStamp, sSS); 		//DD-MMM-YYYY HH:MM:SS

			bDTReady := TRUE;			
        ELSE
            sStamp := '00000000_000000'; // Fallback if system time is not valid
        END_IF
		
		IF bWeightReady AND bDTReady THEN
			
			rPercentDifference := ((rVolume - aPumpSettings[iPumpIndex].rTargetVolume)  / aPumpSettings[iPumpIndex].rTargetVolume) * 100;
			GVL_Calibration.stPumpCalibrationData[iResultIndex].rDifferenceUl := rVolume - aPumpSettings[iPumpIndex].rTargetVolume;
			GVL_Calibration.stPumpCalibrationData[iResultIndex].dDateTime := sStamp;
			GVL_Calibration.stPumpCalibrationData[iResultIndex].rDifferencePercent := rPercentDifference;
			GVL_Calibration.stPumpCalibrationData[iResultIndex].rCriteria := rAcceptanceCrit;
			
			//pupulate gross weight and net weight
			IF rPercentDifference <= rAcceptanceCrit THEN
				aPumpResults[iPumpIndex].eStatus := E_CalibrationStatus.PASSED;
				GVL_HMI.aCalPumpResults[iPumpIndex].eStatus := E_CalibrationStatus.PASSED;
 				GVL_Calibration.aCalibCheckResult[iResultIndex].eStatus := E_CalibrationStatus.PASSED;
			ELSE
				GVL_HMI.aCalPumpResults[iPumpIndex].eStatus := E_CalibrationStatus.ADJUSTMENT_NEEDED;
 				GVL_Calibration.aCalibCheckResult[iResultIndex].eStatus := E_CalibrationStatus.ADJUSTMENT_NEEDED;
				(*
				aPumpResults[iPumpIndex].iFailures := aPumpResults[iPumpIndex].iFailures + 1;
				aPumpResults[iPumpIndex].eStatus := E_CalibrationStatus.FAILED;
				GVL_HMI.aCalPumpResults[iPumpIndex].iFailures := aPumpResults[iPumpIndex].iFailures; 
				GVL_HMI.aCalPumpResults[iPumpIndex].eStatus := aPumpResults[iPumpIndex].eStatus; 
				GVL_Motion.aPumps[iPumpIndex].Rotary.rPumpFactorFromCalBox :=
					GVL_Motion.aPumps[iPumpIndex].Rotary.rPumpFactorFromCalBox *
					(rVolumeDelta / aPumpSettings[iPumpIndex].rTargetVolume);
				iReplicate := 0;
				*)
				//eStep := E_CalibStep.PUMPFACTOR_ADJUST;
			END_IF
			
			iReplicate := iReplicate + 1;
			
			GVL_Calibration.stPumpCalibrationData[iResultIndex].sStep := CONCAT('Check ', TO_STRING(iReplicate));
			
			iResultIndex := iResultIndex + 1;
			
			IF iReplicate >= GVL_Calibration.iReplicatesSetpoint THEN
				eStep := E_CalibStep.EMPTYJAR_BACKWARDS;
			ELSE
				eStep := E_CalibStep.RETURN_FORWARD;
			END_IF
			bWeightReady := FALSE;
		END_IF
	
    E_CalibStep.RETURN_FORWARD:

		sStatus := CONCAT('Returning solvent back to the Jar number : ',TO_STRING(iPumpIndex));
		rDistanceByVol := F_VolumeToSteps_Path(rVolume := (aPumpSettings[iPumpIndex].rTargetVolume + 7), iPumpIndex := iPumpIndex, ePath := E_PumpPath.FromCalBox);
			
        IF NOT bMovePump THEN
			bMovePump := GVL_Motion.aPumpsRotary[iPumpIndex].MoveRelative( 	Distance := rDistanceByVol, 
																			Velocity := GVL_Settings.stPumpParameters.iMeterVelocity, 
																			Acc := GVL_Settings.stPumpParameters.iMeterVelocity, 
																			Dec := GVL_Settings.stPumpParameters.iMeterVelocity
																		  	);
		END_IF
		
		IF bMovePump THEN
			tonWeigthStabilization(IN := TRUE, PT := tWeightStable);
			sStatus := 'Waiting for weight stabilization...';
			IF tonWeigthStabilization.Q THEN
				bMovePump := FALSE;
				tonWeigthStabilization(IN := FALSE);
				bRequestWeight := TRUE;
				bWeightReady := FALSE;
				eStep := E_CalibStep.WEIGH_BEFORE; // Starts next replication
			END_IF
		END_IF

  
	E_CalibStep.EMPTYJAR_BACKWARDS:

		sStatus := CONCAT('Empty the jar number: ',TO_STRING(iPumpIndex));
		aVolumeSetpoint[iPumpIndex] := aPumpSettings[iPumpIndex].rTargetVolume;
		rDistanceByVol := F_VolumeToSteps_Path(rVolume := (aVolumeSetpoint[iPumpIndex] + 50), iPumpIndex := iPumpIndex, ePath := E_PumpPath.FromCalBox );
		
        IF NOT bMovePump THEN
			bMovePump := GVL_Motion.aPumpsRotary[iPumpIndex].MoveRelative( 	Distance := - rDistanceByVol, 
																			Velocity := GVL_Settings.stPumpParameters.iMeterVelocity, 
																			Acc := GVL_Settings.stPumpParameters.iMeterVelocity, 
																			Dec := GVL_Settings.stPumpParameters.iMeterVelocity
																		  	);
		END_IF
		
		IF bMovePump THEN
			bMovePump := FALSE;
			eStep := E_CalibStep.NEXT_PUMP;
		END_IF
	
    E_CalibStep.NEXT_PUMP:
        iPumpIndex := iPumpIndex + 1;
        iReplicate := 0;
        IF iPumpIndex <= 10 THEN
            eStep := E_CalibStep.FILLJAR_FORWARD;
        ELSE
            eStep := E_CalibStep.HOMING_MOTORS;
        END_IF

	
    E_CalibStep.HOMING_MOTORS:
        sStatus := 'Returning M2 and M3 to home';
		IF NOT bMoveMotorM2 THEN
			bMoveMotorM2 := GVL_Motion.aMotors[2].MoveAbsolute(	GVL_Settings.stMachineParam.aM2Position[1], 
																GVL_Settings.stMachineParam.rM2Velocity, 
																GVL_Settings.stMachineParam.rM2Accleration, 
																GVL_Settings.stMachineParam.rM2Deceleration
																);
		END_IF
		IF NOT bMoveMotorM3 AND bMoveMotorM2 THEN
			bMoveMotorM3 := GVL_Motion.aMotors[3].MoveAbsolute(	GVL_Settings.stMachineParam.aM3Position[1], 
																GVL_Settings.stMachineParam.rM3Velocity, 
																GVL_Settings.stMachineParam.rM3Accleration, 
																GVL_Settings.stMachineParam.rM3Deceleration
																);
		END_IF
		
		IF bMoveMotorM2 AND bMoveMotorM3 THEN
			bMoveMotorM2 := FALSE;
			bMoveMotorM3 := FALSE;
			tonStepTimeout(IN := FALSE);
			eStep := E_CalibStep.REPORT_INFO_UPDATE;
		END_IF
   
	E_CalibStep.REPORT_INFO_UPDATE: //TODO: Update the variables without hardcode
		
		//Report Info
		GVL_Calibration.stPumpCalReportInfo.sReportName := GVL_Constant.sPumpCalibrationReportName;
		GVL_Calibration.stPumpCalReportInfo.sReoportSubName := GVL_Constant.sPumpCalibrationReportSubName;
		GVL_Calibration.stPumpCalReportInfo.sDatabaseName := GVL_Constant.sDatabaseName;
		GVL_Calibration.stPumpCalReportInfo.sReportDate := sStamp;
		GVL_Calibration.stPumpCalReportInfo.sPrintedBy := 'Administrator';
		GVL_Calibration.stPumpCalReportInfo.sSystemID := GVL_Constant.sSystemID;
		GVL_Calibration.stPumpCalReportInfo.iPage := 0;
		
		//Calibration Info
		GVL_Retain.iCalibrationNumber := GVL_Retain.iCalibrationNumber + 1;
		GVL_Calibration.stPumpCalibrationInfo.iCalibrationNumber := TO_INT(GVL_Retain.iCalibrationNumber);
		GVL_Calibration.stPumpCalibrationInfo.iAllowableFailures := 2;
		GVL_Calibration.stPumpCalibrationInfo.iCalIntervalDays := 0;
		GVL_Calibration.stPumpCalibrationInfo.iReplicates := GVL_Calibration.iReplicatesSetpoint;
		GVL_Calibration.stPumpCalibrationInfo.iSolventID := '1';
		GVL_Calibration.stPumpCalibrationInfo.iSysMasterListRev := 0;
		GVL_Calibration.stPumpCalibrationInfo.iSysSettingsRev := 0;
		GVL_Calibration.stPumpCalibrationInfo.iUserID := 'vd24';
		
		eStep := E_CalibStep.COMPLETE; 		
		
	E_CalibStep.CALBOX_ATTENTION:
    // Pause here while the operator adjusts the box weight on the scale.
    // No timeouts are running in this state.

    bBusy   := TRUE;
    sStatus := 'Calibration box weight out of range. Please fill to 1100–1300g and press Continue.';

    // Continue pressed on HMI?
    IF GVL_HMI.bCalBoxFixed THEN
        // Clear HMI flags
        GVL_HMI.bCalBoxNeedsAttention := FALSE;
        GVL_HMI.bCalBoxFixed := FALSE;

        bCalBoxAttention := FALSE;

        // Re-arm the same step to re-request a fresh weight
        bRequestWeight := TRUE;
        bWeightReady   := FALSE;

        // Return exactly where we paused (CHECKING_WEIGH)
        eStep := eStepResume;

		ELSIF bAbort THEN
			sStatus := 'Calibration aborted during calibration box attention.';
			eStep   := E_CalibStep.ERROR;
		END_IF	
		
	E_CalibStep.SCALE_ATTENTION:
		bBusy := TRUE;
		sStatus := 'Scale requires attention. Please fix on the device and press Continue.';
		// Wait for operator to press "Continue" (HMI toggles this)
		IF GVL_HMI.bScaleFixed THEN
			GVL_HMI.bScaleNeedsAtention := FALSE;
			GVL_HMI.bScaleFixed := FALSE;
			bScaleAttention := FALSE;
	
			// Re-arm reading for the same step
			bRequestWeight := TRUE;
			bWeightReady   := FALSE;
	
			// Resume exactly where we were
			eStep := eStepResume;
	
		ELSIF bAbort THEN
			sStatus := 'Calibration aborted during scale attention.';
			eStep := E_CalibStep.ERROR;
		END_IF
	
		
    E_CalibStep.COMPLETE:
        sStatus := 'Calibration Complete';
		iDataCount := iResultIndex - 1;
        bDone := TRUE;
        bBusy := FALSE;
        // Remains here till external reset
	
    E_CalibStep.ERROR:
        bBusy := FALSE;
        bDone := FALSE;
        sStatus := 'Calibration aborted due to error.';
        // Remains here till external reset

END_CASE]]></ST>
    </Implementation>
    <Method Name="Reset" Id="{c7d0a07f-1407-4f39-a43b-1c9fdbfdf587}">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR_INPUT
	bHard : BOOL := FALSE;
END_VAR
VAR
	iLocal : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// 1) Stop motion/actuators best-effort (ignore returns; repeated calls are safe)
IF (SIZEOF(GVL_Motion.aMotors) >= 3*SIZEOF(GVL_Motion.aMotors[1])) THEN
    GVL_Motion.aMotors[2].Stop();
    GVL_Motion.aMotors[3].Stop();
END_IF

FOR iLocal := 1 TO 10 DO
    GVL_Motion.aPumpsRotary[iLocal].Stop();
END_FOR

FOR iLocal := 1 TO 5 DO
    GVL_Motion.aValvesObj[iLocal].Stop();
END_FOR

GVL_Calibration.fbScaleDevice.Reset();

// 2) Disarm timers/edge detectors and clear triggers
tonCalDelay(IN := FALSE);
tonStepTimeout(IN := FALSE);
tonWeigthStabilization(IN := FALSE);

// Drop R_TRIG by passing CLK := FALSE this cycle
bExecutePulse(CLK := FALSE);

// 3) Clear internal flags and intermediate states
bStartCalibration     := FALSE;
bCalibrationRequested := FALSE;

bRequestWeight        := FALSE;
bWeightReady          := FALSE;

bMovePump             := FALSE;
bMoveMotorM2          := FALSE;
bMoveMotorM3          := FALSE;
FOR iLocal := 1 TO 5 DO
    bMoveValve[iLocal] := FALSE;
END_FOR

// 4) Reset indexes and temporaries
iPumpIndex    := 1;
iReplicate    := 0;
iResultIndex  := 1;

rWeightBefore := 0.0;
rWeightAfter  := 0.0;
rWeightDelta  := 0.0;
rVolume       := 0.0;
rScaleWeight  := 0.0;
rDistanceByVol:= 0.0;

// 5) Optional “hard” cleanup: clear selections and results
IF bHard THEN
    FOR iLocal := 1 TO 10 DO
        aPumpMask[iLocal]       := FALSE;
        aVolumeSetpoint[iLocal] := 0.0;
        aVelocity[iLocal]       := 0.0;
        aDirection[iLocal]      := E_PumpDirection.Forward; // default

        // Public result mirror (if you want a clean slate)
        aPumpResults[iLocal].eStatus        := E_CalibrationStatus.UNKNOWN;
        aPumpResults[iLocal].bAdjustment    := FALSE;
        aPumpResults[iLocal].bBusy          := FALSE;
        aPumpResults[iLocal].bSelected      := FALSE;
        aPumpResults[iLocal].iFailures      := 0;
        aPumpResults[iLocal].rActualVolume  := 0.0;
        aPumpResults[iLocal].rTargetVolume  := 0.0;
        aPumpResults[iLocal].tElapsed       := T#0S;
        aPumpResults[iLocal].tStartTime     := T#0S;

        // If you mirror HMI results elsewhere, clear here as needed.
    END_FOR
END_IF

// 6) Normalize outputs and step
bBusy   := FALSE;
bDone   := FALSE;
sStatus := 'Idle (reset)';
eStep   := E_CalibStep.IDLE;

// 7) Idempotent return
Reset := TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_CalibrationManager">
      <LineId Id="1795" Count="10" />
      <LineId Id="1204" Count="0" />
      <LineId Id="2444" Count="0" />
      <LineId Id="1203" Count="0" />
      <LineId Id="867" Count="2" />
      <LineId Id="2445" Count="9" />
      <LineId Id="878" Count="2" />
      <LineId Id="1434" Count="0" />
      <LineId Id="881" Count="4" />
      <LineId Id="887" Count="0" />
      <LineId Id="1129" Count="0" />
      <LineId Id="888" Count="1" />
      <LineId Id="1450" Count="0" />
      <LineId Id="890" Count="0" />
      <LineId Id="1437" Count="0" />
      <LineId Id="1044" Count="1" />
      <LineId Id="891" Count="0" />
      <LineId Id="1067" Count="0" />
      <LineId Id="2455" Count="22" />
      <LineId Id="1069" Count="0" />
      <LineId Id="1079" Count="0" />
      <LineId Id="1082" Count="0" />
      <LineId Id="1348" Count="0" />
      <LineId Id="1346" Count="1" />
      <LineId Id="1085" Count="9" />
      <LineId Id="2505" Count="13" />
      <LineId Id="1095" Count="0" />
      <LineId Id="1115" Count="0" />
      <LineId Id="2519" Count="0" />
      <LineId Id="1128" Count="0" />
      <LineId Id="1110" Count="0" />
      <LineId Id="2147" Count="0" />
      <LineId Id="1083" Count="1" />
      <LineId Id="1824" Count="0" />
      <LineId Id="921" Count="0" />
      <LineId Id="1438" Count="0" />
      <LineId Id="1116" Count="0" />
      <LineId Id="2520" Count="0" />
      <LineId Id="1117" Count="10" />
      <LineId Id="1941" Count="0" />
      <LineId Id="1114" Count="0" />
      <LineId Id="1452" Count="0" />
      <LineId Id="922" Count="0" />
      <LineId Id="1439" Count="0" />
      <LineId Id="1046" Count="0" />
      <LineId Id="923" Count="0" />
      <LineId Id="2521" Count="0" />
      <LineId Id="924" Count="4" />
      <LineId Id="1825" Count="6" />
      <LineId Id="937" Count="0" />
      <LineId Id="1350" Count="0" />
      <LineId Id="1454" Count="0" />
      <LineId Id="1351" Count="0" />
      <LineId Id="1832" Count="1" />
      <LineId Id="2522" Count="0" />
      <LineId Id="1834" Count="4" />
      <LineId Id="2523" Count="3" />
      <LineId Id="1839" Count="16" />
      <LineId Id="1354" Count="0" />
      <LineId Id="1453" Count="0" />
      <LineId Id="939" Count="0" />
      <LineId Id="1441" Count="0" />
      <LineId Id="940" Count="0" />
      <LineId Id="942" Count="2" />
      <LineId Id="2547" Count="14" />
      <LineId Id="2571" Count="0" />
      <LineId Id="2563" Count="7" />
      <LineId Id="946" Count="0" />
      <LineId Id="948" Count="0" />
      <LineId Id="1061" Count="0" />
      <LineId Id="1132" Count="0" />
      <LineId Id="1135" Count="0" />
      <LineId Id="1857" Count="0" />
      <LineId Id="1856" Count="0" />
      <LineId Id="2011" Count="0" />
      <LineId Id="2257" Count="1" />
      <LineId Id="1391" Count="0" />
      <LineId Id="1263" Count="0" />
      <LineId Id="1136" Count="2" />
      <LineId Id="1133" Count="1" />
      <LineId Id="950" Count="0" />
      <LineId Id="1456" Count="0" />
      <LineId Id="951" Count="0" />
      <LineId Id="1442" Count="0" />
      <LineId Id="1139" Count="0" />
      <LineId Id="957" Count="0" />
      <LineId Id="960" Count="0" />
      <LineId Id="1873" Count="0" />
      <LineId Id="2013" Count="0" />
      <LineId Id="1233" Count="0" />
      <LineId Id="1875" Count="0" />
      <LineId Id="2014" Count="0" />
      <LineId Id="1230" Count="0" />
      <LineId Id="1240" Count="0" />
      <LineId Id="1238" Count="0" />
      <LineId Id="2527" Count="3" />
      <LineId Id="1239" Count="0" />
      <LineId Id="1231" Count="0" />
      <LineId Id="1241" Count="0" />
      <LineId Id="1384" Count="1" />
      <LineId Id="1383" Count="0" />
      <LineId Id="1388" Count="1" />
      <LineId Id="2339" Count="0" />
      <LineId Id="1386" Count="1" />
      <LineId Id="1244" Count="0" />
      <LineId Id="965" Count="1" />
      <LineId Id="1457" Count="0" />
      <LineId Id="967" Count="0" />
      <LineId Id="1443" Count="0" />
      <LineId Id="1271" Count="1" />
      <LineId Id="969" Count="2" />
      <LineId Id="2572" Count="32" />
      <LineId Id="1270" Count="0" />
      <LineId Id="1265" Count="2" />
      <LineId Id="2098" Count="1" />
      <LineId Id="2140" Count="0" />
      <LineId Id="2100" Count="7" />
      <LineId Id="2127" Count="0" />
      <LineId Id="2108" Count="0" />
      <LineId Id="2129" Count="8" />
      <LineId Id="2144" Count="1" />
      <LineId Id="2115" Count="1" />
      <LineId Id="2096" Count="1" />
      <LineId Id="1268" Count="0" />
      <LineId Id="1940" Count="0" />
      <LineId Id="2022" Count="0" />
      <LineId Id="2260" Count="0" />
      <LineId Id="2146" Count="0" />
      <LineId Id="2023" Count="0" />
      <LineId Id="2025" Count="0" />
      <LineId Id="2024" Count="0" />
      <LineId Id="1390" Count="0" />
      <LineId Id="975" Count="1" />
      <LineId Id="1276" Count="0" />
      <LineId Id="1861" Count="0" />
      <LineId Id="978" Count="0" />
      <LineId Id="1862" Count="1" />
      <LineId Id="1392" Count="0" />
      <LineId Id="979" Count="1" />
      <LineId Id="1278" Count="1" />
      <LineId Id="981" Count="3" />
      <LineId Id="1393" Count="1" />
      <LineId Id="1404" Count="0" />
      <LineId Id="2007" Count="0" />
      <LineId Id="2005" Count="0" />
      <LineId Id="2028" Count="0" />
      <LineId Id="2026" Count="0" />
      <LineId Id="2006" Count="0" />
      <LineId Id="2027" Count="0" />
      <LineId Id="2020" Count="0" />
      <LineId Id="1405" Count="0" />
      <LineId Id="1407" Count="1" />
      <LineId Id="1410" Count="0" />
      <LineId Id="985" Count="0" />
      <LineId Id="1411" Count="0" />
      <LineId Id="1269" Count="0" />
      <LineId Id="1458" Count="0" />
      <LineId Id="994" Count="0" />
      <LineId Id="1444" Count="0" />
      <LineId Id="1273" Count="0" />
      <LineId Id="1864" Count="0" />
      <LineId Id="1274" Count="0" />
      <LineId Id="1248" Count="1" />
      <LineId Id="2531" Count="3" />
      <LineId Id="1002" Count="0" />
      <LineId Id="1247" Count="0" />
      <LineId Id="1251" Count="0" />
      <LineId Id="1865" Count="7" />
      <LineId Id="1396" Count="0" />
      <LineId Id="1253" Count="0" />
      <LineId Id="1004" Count="0" />
      <LineId Id="1459" Count="0" />
      <LineId Id="1005" Count="0" />
      <LineId Id="1445" Count="0" />
      <LineId Id="1415" Count="0" />
      <LineId Id="1433" Count="0" />
      <LineId Id="1416" Count="0" />
      <LineId Id="1432" Count="0" />
      <LineId Id="1425" Count="1" />
      <LineId Id="2535" Count="3" />
      <LineId Id="1427" Count="4" />
      <LineId Id="1414" Count="0" />
      <LineId Id="1460" Count="0" />
      <LineId Id="1006" Count="8" />
      <LineId Id="1461" Count="0" />
      <LineId Id="1015" Count="1" />
      <LineId Id="1217" Count="1" />
      <LineId Id="2539" Count="3" />
      <LineId Id="1219" Count="2" />
      <LineId Id="2543" Count="3" />
      <LineId Id="1222" Count="6" />
      <LineId Id="1215" Count="0" />
      <LineId Id="1462" Count="0" />
      <LineId Id="2148" Count="0" />
      <LineId Id="2158" Count="0" />
      <LineId Id="2161" Count="0" />
      <LineId Id="2150" Count="0" />
      <LineId Id="2152" Count="5" />
      <LineId Id="2149" Count="0" />
      <LineId Id="2162" Count="0" />
      <LineId Id="2164" Count="0" />
      <LineId Id="2163" Count="0" />
      <LineId Id="2166" Count="7" />
      <LineId Id="2175" Count="0" />
      <LineId Id="2160" Count="0" />
      <LineId Id="2480" Count="24" />
      <LineId Id="2418" Count="0" />
      <LineId Id="2479" Count="0" />
      <LineId Id="2419" Count="0" />
      <LineId Id="2423" Count="17" />
      <LineId Id="2422" Count="0" />
      <LineId Id="2421" Count="0" />
      <LineId Id="2420" Count="0" />
      <LineId Id="1021" Count="1" />
      <LineId Id="2010" Count="0" />
      <LineId Id="1819" Count="1" />
      <LineId Id="1817" Count="0" />
      <LineId Id="1463" Count="0" />
      <LineId Id="1027" Count="0" />
      <LineId Id="1821" Count="2" />
      <LineId Id="1031" Count="0" />
      <LineId Id="1464" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_CalibrationManager.Reset">
      <LineId Id="189" Count="79" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>