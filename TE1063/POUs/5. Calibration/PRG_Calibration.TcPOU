<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_Calibration" Id="{f2ab8e02-eb8c-441d-b1b0-c2b3833b2b19}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_Calibration
VAR_OUTPUT
    bCalibrationFinished : BOOL;  // Done Flag
END_VAR
VAR
	fbLeakTest : FB_LeakTest;
	bLeakTestReset : BOOL := FALSE;
	
	fbCalibrationManager : FB_CalibrationManager;

    bStartCalibrationPrev : BOOL;
    bStartCalibrationEdge : BOOL;
	
	iLastRepSetpoint : INT := -1;
    i : INT;
	
	bLinearPumpsEnabled		: BOOL := FALSE;
	bLinearPumpsHomed		: BOOL := FALSE;
	bLinearPumpsOldPosStart	: BOOL := FALSE;
	bLinearPumpsOldPosDone	: BOOL := FALSE;
	aLinearPumpsEnable 		: ARRAY[1..10] OF BOOL;
	aLinearPumpsHoming 		: ARRAY[1..10] OF BOOL;
	bLinearPumpsOldPosMove	: ARRAY[1..10] OF BOOL;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF GVL_HMI.bCalLeakTestButton THEN
	bLeakTestReset := FALSE;
END_IF

(* Scale *) //------------------------------------------------------------------------------------------------------------------------------------------------------------
// Instancing and calling fbScaleDevice object
GVL_Calibration.fbScaleDevice(sRemoteHost := GVL_Settings.aBalanceIP, nRemotePort := GVL_Settings.nBalancePort);

(* Leak Test *) //--------------------------------------------------------------------------------------------------------------------------------------------------------
// Leak Test request from HMI
fbLeakTest(bExecute := GVL_HMI.bCalLeakTestButton, eSolenoidPosition := E_SolenoidSet.LEAKTEST, tMonitorTime := T#10S, rSystemPressure => GVL_HMI.rCalLealTestPressure);

// Leak Test post treatment
IF fbLeakTest.bLeakTestDone AND NOT fbLeakTest.bLeakTestError THEN
	GVL_HMI.bCalLeakTestPass := TRUE;
	GVL_HMI.bCalLeakTestError := FALSE;
	GVL_HMI.bCalLeakTestButton := FALSE;
	IF NOT bLeakTestReset THEN
		bLeakTestReset := fbLeakTest.Reset();
	END_IF
END_IF

IF fbLeakTest.bLeakTestError THEN
	GVL_HMI.bCalLeakTestError := TRUE;
	GVL_HMI.bCalLeakTestPass := FALSE;
	GVL_HMI.bCalLeakTestButton := FALSE;
	IF NOT bLeakTestReset THEN
		bLeakTestReset := fbLeakTest.Reset();
	END_IF
END_IF

(* Calibration Procedure *) //---------------------------------------------------------------------------------------------------------------------------------------------
//Calibration procedure trigger
IF GVL_HMI.HMIDigInputs.bHMIEStartCalibration THEN
	GVL_Calibration.bStartCalibration := TRUE;
	GVL_Calibration.aCalibPumps := GVL_HMI.aCalibPumps;
	GVL_HMI.HMIDigInputs.bHMIEStartCalibration := FALSE;
	GVL_Calibration.iReplicatesSetpoint := GVL_HMI.iReplicatesSetpoint;
	GVL_Calibration.rAcceptanceCriteria := GVL_HMI.rAcceptanceCriteria;
	GVL_Calibration.tDelayStart := TO_TIME(GVL_HMI.iDelayStart*1000*60); //int convertion from minutes to ms
END_IF

IF GVL_IO.gDigInputs.bCalibrationBoxPresent THEN
	bStartCalibrationEdge := GVL_Calibration.bStartCalibration AND NOT bStartCalibrationPrev;
	bStartCalibrationPrev := GVL_Calibration.bStartCalibration;
ELSE
	GVL_Calibration.bStartCalibration := FALSE;
END_IF


//calibration procedure calling
(*
fbCalibrationManager(
    bExecute := bStartCalibrationEdge,
    bAbort := GVL_Calibration.bAbortCalibration,
    eSolvent := GVL_Calibration.eCalibSolvent,
    aPumpSettings := GVL_Calibration.aCalibPumps,
    tDelayStart := GVL_Calibration.tDelayStart,
    bPrintReport := GVL_Calibration.bPrintWhenComplete,
    aPumpResults => GVL_Calibration.aCalibPumps,
    bDone => GVL_Calibration.bCalibrationDone,
    bBusy => GVL_Calibration.bCalibrationRunning,
    sStatus => GVL_Calibration.sGlobalStatus
);
GVL_Calibration.sGlobalStatus := fbCalibrationManager.sStatus;
*)

IF fbCalibrationManager.bDone THEN
	GVL_HMI.HMIDigInputs.bHMIEStartCalibration := FALSE;
	//fbCalibrationManager.Reset();
END_IF

(* Linear Pumps Enable *) //---------------------------------------------------------------------------------------------------------------------------------------------
IF GVL_HMI.bCalLinearPumpsEnableBt THEN
	bLinearPumpsEnabled := EnableLinearPumps();
	IF bLinearPumpsEnabled THEN
		FOR i := 1 TO 10 DO
			aLinearPumpsEnable[i] := FALSE;
		END_FOR
		GVL_HMI.bCalLinearPumpsEnableBt := FALSE;
		bLinearPumpsEnabled := FALSE;
	END_IF
END_IF

(* Linear Pumps Homing *) //---------------------------------------------------------------------------------------------------------------------------------------------
IF GVL_HMI.bCalLinearPumpsHomeBt THEN
	bLinearPumpsHomed := HomeLinearPumps();
	IF bLinearPumpsHomed THEN
		//GVL_HMI.bCalLinearPumpsHomeBt := FALSE;
		bLinearPumpsHomed := FALSE;
	END_IF
END_IF

(* Linear Pumps Moving *) //---------------------------------------------------------------------------------------------------------------------------------------------]]></ST>
    </Implementation>
    <Method Name="EnableLinearPumps" Id="{22115b95-e372-40ed-a15e-77965f9e6360}">
      <Declaration><![CDATA[METHOD EnableLinearPumps : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Enabling Linear Pumps
FOR i := 1 TO 10 DO
	aLinearPumpsEnable[i] := GVL_Motion.aPumpsLinear[i].Enable();
END_FOR

//Testing if all motors were anabled
IF aLinearPumpsEnable[1] AND aLinearPumpsEnable[2] AND aLinearPumpsEnable[3] AND aLinearPumpsEnable[4] AND aLinearPumpsEnable[5] AND aLinearPumpsEnable[6] AND aLinearPumpsEnable[7] AND aLinearPumpsEnable[8] AND aLinearPumpsEnable[9] AND aLinearPumpsEnable[10] THEN
	FOR i := 1 TO 10 DO
		aLinearPumpsEnable[i] := FALSE;
	END_FOR
	EnableLinearPumps := TRUE;
	RETURN;
ELSE
	EnableLinearPumps := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomeLinearPumps" Id="{6200dfda-dea4-466c-9cdb-75115aff6d05}">
      <Declaration><![CDATA[METHOD HomeLinearPumps : BOOL
VAR_INPUT
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Check if all pumps completed their move
bLinearPumpsHomed := aLinearPumpsHoming[1] AND aLinearPumpsHoming[2] AND(* aLinearPumpsHoming[3] AND*) aLinearPumpsHoming[4] AND
					 aLinearPumpsHoming[5] AND aLinearPumpsHoming[6] AND aLinearPumpsHoming[7] AND aLinearPumpsHoming[8] AND 
					 aLinearPumpsHoming[9] AND aLinearPumpsHoming[10];
					 
IF NOT bLinearPumpsHomed THEN
	//Homing Linear Pumps 1 to 10. 
	IF NOT aLinearPumpsHoming[1] THEN
		aLinearPumpsHoming[1] := GVL_Motion.aPumpsLinear[1].Home( pHomeSensor := ADR(GVL_Motion.aPumps[1].Linear.iHomeSensor.0), 
																rVelocity := GVL_Motion.aPumps[1].Linear.rHomeVel, 
																rAcc := GVL_Motion.aPumps[1].Linear.rHomeAcc, 
																rDec := GVL_Motion.aPumps[1].Linear.rHomeDec
																);
	END_IF
	IF NOT aLinearPumpsHoming[2] THEN
		aLinearPumpsHoming[2] := GVL_Motion.aPumpsLinear[2].Home( pHomeSensor := ADR(GVL_Motion.aPumps[2].Linear.iHomeSensor.0), 
																rVelocity := GVL_Motion.aPumps[2].Linear.rHomeVel, 
																rAcc := GVL_Motion.aPumps[2].Linear.rHomeAcc, 
																rDec := GVL_Motion.aPumps[2].Linear.rHomeDec
																);
	END_IF(*
	IF NOT aLinearPumpsHoming[3] THEN
		aLinearPumpsHoming[3] := GVL_Motion.aPumpsLinear[3].Home( pHomeSensor := ADR(GVL_Motion.aPumps[3].Linear.iHomeSensor.0), 
																rVelocity := GVL_Motion.aPumps[3].Linear.rHomeVel, 
																rAcc := GVL_Motion.aPumps[3].Linear.rHomeAcc, 
																rDec := GVL_Motion.aPumps[3].Linear.rHomeDec
																);
	END_IF*)
	IF NOT aLinearPumpsHoming[4] THEN
		aLinearPumpsHoming[4] := GVL_Motion.aPumpsLinear[4].Home( pHomeSensor := ADR(GVL_Motion.aPumps[4].Linear.iHomeSensor.0), 
																rVelocity := GVL_Motion.aPumps[4].Linear.rHomeVel, 
																rAcc := GVL_Motion.aPumps[4].Linear.rHomeAcc, 
																rDec := GVL_Motion.aPumps[4].Linear.rHomeDec
																);
	END_IF
	IF NOT aLinearPumpsHoming[5] THEN
		aLinearPumpsHoming[5] := GVL_Motion.aPumpsLinear[5].Home( pHomeSensor := ADR(GVL_Motion.aPumps[5].Linear.iHomeSensor.0), 
																rVelocity := GVL_Motion.aPumps[5].Linear.rHomeVel, 
																rAcc := GVL_Motion.aPumps[5].Linear.rHomeAcc, 
																rDec := GVL_Motion.aPumps[5].Linear.rHomeDec
																);
	END_IF
	IF NOT aLinearPumpsHoming[6] THEN
		aLinearPumpsHoming[6] := GVL_Motion.aPumpsLinear[6].Home( pHomeSensor := ADR(GVL_Motion.aPumps[6].Linear.iHomeSensor.0), 
																rVelocity := GVL_Motion.aPumps[6].Linear.rHomeVel, 
																rAcc := GVL_Motion.aPumps[6].Linear.rHomeAcc, 
																rDec := GVL_Motion.aPumps[6].Linear.rHomeDec
																);
	END_IF
	IF NOT aLinearPumpsHoming[7] THEN
		aLinearPumpsHoming[7] := GVL_Motion.aPumpsLinear[7].Home( pHomeSensor := ADR(GVL_Motion.aPumps[7].Linear.iHomeSensor.0), 
																rVelocity := GVL_Motion.aPumps[7].Linear.rHomeVel, 
																rAcc := GVL_Motion.aPumps[7].Linear.rHomeAcc, 
																rDec := GVL_Motion.aPumps[7].Linear.rHomeDec
																);
	END_IF
	IF NOT aLinearPumpsHoming[8] THEN
		aLinearPumpsHoming[8] := GVL_Motion.aPumpsLinear[8].Home( pHomeSensor := ADR(GVL_Motion.aPumps[8].Linear.iHomeSensor.0), 
																rVelocity := GVL_Motion.aPumps[8].Linear.rHomeVel, 
																rAcc := GVL_Motion.aPumps[8].Linear.rHomeAcc, 
																rDec := GVL_Motion.aPumps[8].Linear.rHomeDec
																);
	END_IF
	IF NOT aLinearPumpsHoming[9] THEN
		aLinearPumpsHoming[9] := GVL_Motion.aPumpsLinear[9].Home( pHomeSensor := ADR(GVL_Motion.aPumps[9].Linear.iHomeSensor.0), 
																rVelocity := GVL_Motion.aPumps[9].Linear.rHomeVel, 
																rAcc := GVL_Motion.aPumps[9].Linear.rHomeAcc, 
																rDec := GVL_Motion.aPumps[9].Linear.rHomeDec
																);
	END_IF
	IF NOT aLinearPumpsHoming[10] THEN
		aLinearPumpsHoming[10] := GVL_Motion.aPumpsLinear[10].Home( pHomeSensor := ADR(GVL_Motion.aPumps[10].Linear.iHomeSensor.0), 
																rVelocity := GVL_Motion.aPumps[10].Linear.rHomeVel, 
																rAcc := GVL_Motion.aPumps[10].Linear.rHomeAcc, 
																rDec := GVL_Motion.aPumps[10].Linear.rHomeDec
																);
	END_IF
END_IF

IF bLinearPumpsHomed THEN
	bLinearPumpsOldPosStart := TRUE;
END_IF	

//Check if all pumps completed their move
bLinearPumpsOldPosDone := bLinearPumpsOldPosMove[1] AND bLinearPumpsOldPosMove[2] AND(* bLinearPumpsOldPosMove[3] AND*) bLinearPumpsOldPosMove[4] AND
					 	  bLinearPumpsOldPosMove[5] AND bLinearPumpsOldPosMove[6] AND bLinearPumpsOldPosMove[7] AND bLinearPumpsOldPosMove[8] AND 
					 	  bLinearPumpsOldPosMove[9] AND bLinearPumpsOldPosMove[10];

IF bLinearPumpsOldPosStart THEN
	// Move all Linear Pumps for old position
	IF NOT bLinearPumpsOldPosMove[1] THEN
		bLinearPumpsOldPosMove[1] := GVL_Motion.aPumpsLinear[1].MoveAbsolute( rPosition := GVL_Retain.rLinearPumpOldPosition[1], rVelocity := GVL_Motion.aPumps[1].Linear.rHomeVel, 
																	rAcc := GVL_Motion.aPumps[1].Linear.rHomeAcc, 
																	rDec := GVL_Motion.aPumps[1].Linear.rHomeDec
																	);
	END_IF
	IF NOT bLinearPumpsOldPosMove[2] THEN
		bLinearPumpsOldPosMove[2] := GVL_Motion.aPumpsLinear[2].MoveAbsolute( rPosition := GVL_Retain.rLinearPumpOldPosition[2], rVelocity := GVL_Motion.aPumps[2].Linear.rHomeVel, 
																	rAcc := GVL_Motion.aPumps[2].Linear.rHomeAcc, 
																	rDec := GVL_Motion.aPumps[2].Linear.rHomeDec
																	);
	END_IF(*
	IF NOT bLinearPumpsOldPosMove[3] THEN
		bLinearPumpsOldPosMove[3] := GVL_Motion.aPumpsLinear[3].MoveAbsolute( rPosition := GVL_Retain.rLinearPumpOldPosition[3], rVelocity := GVL_Motion.aPumps[3].Linear.rHomeVel, 
																	rAcc := GVL_Motion.aPumps[3].Linear.rHomeAcc, 
																	rDec := GVL_Motion.aPumps[3].Linear.rHomeDec
																	);
	END_IF*)
	IF NOT bLinearPumpsOldPosMove[4] THEN
		bLinearPumpsOldPosMove[4] := GVL_Motion.aPumpsLinear[4].MoveAbsolute( rPosition := GVL_Retain.rLinearPumpOldPosition[4], rVelocity := GVL_Motion.aPumps[4].Linear.rHomeVel, 
																	rAcc := GVL_Motion.aPumps[4].Linear.rHomeAcc, 
																	rDec := GVL_Motion.aPumps[4].Linear.rHomeDec
																	);
	END_IF
	IF NOT bLinearPumpsOldPosMove[5] THEN
		bLinearPumpsOldPosMove[5] := GVL_Motion.aPumpsLinear[5].MoveAbsolute( rPosition := GVL_Retain.rLinearPumpOldPosition[5], rVelocity := GVL_Motion.aPumps[5].Linear.rHomeVel, 
																	rAcc := GVL_Motion.aPumps[5].Linear.rHomeAcc, 
																	rDec := GVL_Motion.aPumps[5].Linear.rHomeDec
																	);
	END_IF
	IF NOT bLinearPumpsOldPosMove[6] THEN
		bLinearPumpsOldPosMove[6] := GVL_Motion.aPumpsLinear[6].MoveAbsolute( rPosition := GVL_Retain.rLinearPumpOldPosition[6], rVelocity := GVL_Motion.aPumps[6].Linear.rHomeVel, 
																	rAcc := GVL_Motion.aPumps[6].Linear.rHomeAcc, 
																	rDec := GVL_Motion.aPumps[6].Linear.rHomeDec
																	);
	END_IF
	IF NOT bLinearPumpsOldPosMove[7] THEN
		bLinearPumpsOldPosMove[7] := GVL_Motion.aPumpsLinear[7].MoveAbsolute( rPosition := GVL_Retain.rLinearPumpOldPosition[7], rVelocity := GVL_Motion.aPumps[7].Linear.rHomeVel, 
																	rAcc := GVL_Motion.aPumps[7].Linear.rHomeAcc, 
																	rDec := GVL_Motion.aPumps[7].Linear.rHomeDec
																	);
	END_IF
	IF NOT bLinearPumpsOldPosMove[8] THEN
		bLinearPumpsOldPosMove[8] := GVL_Motion.aPumpsLinear[8].MoveAbsolute( rPosition := GVL_Retain.rLinearPumpOldPosition[8], rVelocity := GVL_Motion.aPumps[8].Linear.rHomeVel, 
																	rAcc := GVL_Motion.aPumps[8].Linear.rHomeAcc, 
																	rDec := GVL_Motion.aPumps[8].Linear.rHomeDec
																	);
	END_IF
	IF NOT bLinearPumpsOldPosMove[9] THEN
		bLinearPumpsOldPosMove[9] := GVL_Motion.aPumpsLinear[9].MoveAbsolute( rPosition := GVL_Retain.rLinearPumpOldPosition[9], rVelocity := GVL_Motion.aPumps[9].Linear.rHomeVel, 
																	rAcc := GVL_Motion.aPumps[9].Linear.rHomeAcc, 
																	rDec := GVL_Motion.aPumps[9].Linear.rHomeDec
																	);
	END_IF
	IF NOT bLinearPumpsOldPosMove[10] THEN
		bLinearPumpsOldPosMove[10] := GVL_Motion.aPumpsLinear[10].MoveAbsolute( rPosition := GVL_Retain.rLinearPumpOldPosition[10], rVelocity := GVL_Motion.aPumps[10].Linear.rHomeVel, 
																	rAcc := GVL_Motion.aPumps[10].Linear.rHomeAcc, 
																	rDec := GVL_Motion.aPumps[10].Linear.rHomeDec
																	);
	END_IF
END_IF

//If all movement were completed, return method
IF bLinearPumpsHomed AND bLinearPumpsOldPosDone THEN
	FOR i := 1 TO 10 DO
		aLinearPumpsHoming[i] := FALSE;
		bLinearPumpsOldPosMove[i] := FALSE;
	END_FOR
	bLinearPumpsHomed := FALSE;
	bLinearPumpsOldPosStart := FALSE;
	bLinearPumpsOldPosDone	:= FALSE;
	HomeLinearPumps := TRUE; 
	RETURN;
ELSE
	HomeLinearPumps := FALSE; 
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{27813d8d-2df7-44d9-b974-4b44cba9f55d}">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Reset Calibration Flags
bLeakTestReset := FALSE;

bStartCalibrationPrev := FALSE;
bStartCalibrationEdge := FALSE;


bLinearPumpsEnabled		 := FALSE;
bLinearPumpsHomed		 := FALSE;
bLinearPumpsOldPosStart	 := FALSE;
bLinearPumpsOldPosDone	 := FALSE;

FOR i := 1 TO 10 DO
	aLinearPumpsEnable[i] := FALSE;
	aLinearPumpsHoming[i] := FALSE;
	bLinearPumpsOldPosMove[i] := FALSE;
END_FOR

Reset := TRUE;
RETURN;
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="PRG_Calibration">
      <LineId Id="44" Count="2" />
      <LineId Id="186" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="38" Count="2" />
      <LineId Id="21" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="48" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="65" Count="1" />
      <LineId Id="156" Count="1" />
      <LineId Id="159" Count="4" />
      <LineId Id="158" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="167" Count="2" />
      <LineId Id="166" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="70" Count="10" />
      <LineId Id="129" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="212" Count="2" />
      <LineId Id="208" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="219" Count="2" />
      <LineId Id="225" Count="2" />
      <LineId Id="197" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="195" Count="0" />
    </LineIds>
    <LineIds Name="PRG_Calibration.EnableLinearPumps">
      <LineId Id="6" Count="3" />
      <LineId Id="16" Count="0" />
      <LineId Id="10" Count="1" />
      <LineId Id="19" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="PRG_Calibration.HomeLinearPumps">
      <LineId Id="6" Count="1" />
      <LineId Id="80" Count="1" />
      <LineId Id="317" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="246" Count="70" />
      <LineId Id="245" Count="0" />
      <LineId Id="144" Count="1" />
      <LineId Id="148" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="222" Count="2" />
      <LineId Id="221" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="150" Count="58" />
      <LineId Id="146" Count="1" />
      <LineId Id="236" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="233" Count="1" />
      <LineId Id="232" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="230" Count="1" />
      <LineId Id="242" Count="1" />
      <LineId Id="228" Count="0" />
      <LineId Id="82" Count="1" />
    </LineIds>
    <LineIds Name="PRG_Calibration.Reset">
      <LineId Id="9" Count="2" />
      <LineId Id="14" Count="1" />
      <LineId Id="18" Count="5" />
      <LineId Id="26" Count="2" />
      <LineId Id="30" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>