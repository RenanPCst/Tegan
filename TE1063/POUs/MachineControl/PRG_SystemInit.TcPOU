<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_SystemInit" Id="{de7516f5-b372-4654-9a26-44141ec2f79b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_SystemInit
VAR_OUTPUT
	bDone           : BOOL := FALSE;
END_VAR
VAR
	i               : INT;
    bAllDone        : BOOL := FALSE;
    bStartedAction  : BOOL := FALSE;
    bInitComplete   : BOOL := FALSE;
	bVerticalMotorsDone		: BOOL := FALSE;   
	bLinearMotorsHomingDone	: BOOL := FALSE; 
	bValvesHomingDone 		: BOOL := FALSE;
	bLinearPumpsDone		: BOOL := FALSE;
	bPerformHoming		: BOOL := FALSE;
	
	bAllResetDone	: BOOL := FALSE;
	bEnableDone		: BOOL := FALSE;
	bResetCheck		: ARRAY[1..8] OF BOOL;
	
	aMotorsEnabled 	: ARRAY[1..3] OF BOOL;
	aValvesEnabled 	: ARRAY[1..5] OF BOOL;
	
	bHomeMotorDone	: ARRAY[1..3] OF BOOL;
	bHomeValveDone  : ARRAY[1..5] OF BOOL;
		
	bMoveValve1Request	: BOOL := TRUE;
	bMoveValve2Request	: BOOL := TRUE;
	
	bMoveMotorsRequest	: ARRAY[1..3] OF BOOL;
	bMoveMotorDone		: ARRAY[1..3] OF BOOL;
	
	tonResetDelay	: ton;
	
	stStatus : ST_ActuatorStatus;
	
END_VAR


]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Step 1: Enable all motors and valves ****************************************************************************************************
IF NOT bEnableDone THEN
	IF NOT GVL_Motion.bInitialHomingDone THEN
		FOR i := 1 TO 3 DO
			aMotorsEnabled[i] := GVL_Motion.aMotors[i].Enable();
		END_FOR
	
		FOR i := 1 TO 5 DO
			aValvesEnabled[i] := GVL_Motion.aValvesObj[i].Enable();
		END_FOR
		
		IF aMotorsEnabled[1] AND aMotorsEnabled[2] AND aMotorsEnabled[3] AND aValvesEnabled[1] AND aValvesEnabled[2] AND aValvesEnabled[3] AND aValvesEnabled[4] AND aValvesEnabled[5] THEN
			bEnableDone := TRUE;
		END_IF
	ELSE
		bEnableDone := TRUE;
	END_IF
END_IF

// Step 2: Reset all motors and valves ******************************************************************************************************
IF NOT bAllResetDone AND bEnableDone THEN
	

	IF NOT bResetCheck[1] THEN
		bResetCheck[1] := GVL_Motion.aMotors[1].Reset();
	END_IF
	IF NOT bResetCheck[2] THEN
			bResetCheck[2] := GVL_Motion.aMotors[2].Reset();
	END_IF
	IF NOT bResetCheck[3] THEN
			bResetCheck[3] := GVL_Motion.aMotors[3].Reset();
	END_IF
	IF NOT bResetCheck[4] THEN
			bResetCheck[4] := GVL_Motion.aValvesObj[1].Reset();
	END_IF
	IF NOT bResetCheck[5] THEN
			bResetCheck[5] := GVL_Motion.aValvesObj[2].Reset();
	END_IF
	IF NOT bResetCheck[6] THEN
			bResetCheck[6] := GVL_Motion.aValvesObj[3].Reset();
	END_IF
	IF NOT bResetCheck[7] THEN
			bResetCheck[7] := GVL_Motion.aValvesObj[4].Reset();
	END_IF
	IF NOT bResetCheck[8] THEN
			bResetCheck[8] := GVL_Motion.aValvesObj[5].Reset();
	END_IF
	
	IF bResetCheck[1] AND bResetCheck[2] AND bResetCheck[3] AND bResetCheck[4] AND bResetCheck[5] AND bResetCheck[6] AND bResetCheck[7] AND bResetCheck[8] THEN
		bAllResetDone := TRUE;
	END_IF
	
END_IF

//Timer to delay time between reset and move command
IF NOT bAllResetDone THEN
	tonResetDelay(IN := FALSE, PT := T#2S);
ELSE
	tonResetDelay(IN := TRUE, PT := T#2S);
END_IF

// Step 3: If the process hasn't started yet **************************************************************************************************
IF NOT bStartedAction AND bAllResetDone AND tonResetDelay.Q THEN
    // If the system hasn't performed homing yet
    IF NOT GVL_Motion.bInitialHomingDone THEN
        bPerformHoming := TRUE;

        // Start homing for vertical motors (Stage Collection and Sample Recovery Vertical)
        bHomeMotorDone[1] := GVL_Motion.aMotors[1].Home(
            pHomeSensor := ADR(GVL_IO.gDigInputs.bStageCollection_Home),
            bHomeRequest := bPerformHoming
        );
        bHomeMotorDone[2] := GVL_Motion.aMotors[2].Home(
            pHomeSensor := ADR(GVL_IO.gDigInputs.bSampleRecovery_Vertical_Home),
            bHomeRequest := bPerformHoming
        );

        // If both vertical motors finished homing
        IF bHomeMotorDone[1] AND bHomeMotorDone[2] THEN
            bVerticalMotorsDone := TRUE;
        END_IF

        // Start homing for the linear horizontal motor if vertical ones are done
        IF bVerticalMotorsDone THEN
            bHomeMotorDone[3] := GVL_Motion.aMotors[3].Home(
                pHomeSensor := ADR(GVL_IO.gDigInputs.bSampleRecovery_Horizontal_Home),
                bHomeRequest := bPerformHoming
            );
        END_IF

        // Confirm linear motor 3 is done
        IF bHomeMotorDone[3] THEN
            bLinearMotorsHomingDone := TRUE;
        END_IF
		
        // Move all valves to position 1 (home position)
		IF NOT bHomeValveDone[1] THEN
			bHomeValveDone[1] := GVL_Motion.aValvesObj[1].MoveValve(iPosition := 1, rVelocity := 15, rAcc := 10, rDec := 10);
		END_IF
        
		IF NOT bHomeValveDone[2] THEN
			bHomeValveDone[2] := GVL_Motion.aValvesObj[2].MoveValve(iPosition := 1, rVelocity := 15, rAcc := 10, rDec := 10);
		END_IF

        IF NOT bHomeValveDone[3] THEN
			bHomeValveDone[3] := GVL_Motion.aValvesObj[3].MoveValve(iPosition := 1, rVelocity := 10, rAcc := 10, rDec := 10);
		END_IF
		
		IF NOT bHomeValveDone[4] THEN
			bHomeValveDone[4] := GVL_Motion.aValvesObj[4].MoveValve(iPosition := 1, rVelocity := 10, rAcc := 10, rDec := 10);
		END_IF

		IF NOT bHomeValveDone[5] THEN
			bHomeValveDone[5] := GVL_Motion.aValvesObj[5].MoveValve(iPosition := 1, rVelocity := 10, rAcc := 10, rDec := 10);
		END_IF        
	
		
        // Check if all valves completed their move
        bValvesHomingDone := bHomeValveDone[1] AND bHomeValveDone[2] AND bHomeValveDone[3] AND bHomeValveDone[4] AND bHomeValveDone[5];

        // If all motors and valves completed their homing, finalize
        IF bLinearMotorsHomingDone AND bValvesHomingDone THEN
            bPerformHoming := FALSE;
            bStartedAction := TRUE;
        END_IF
		
		//TODO: Linear pumps should be homing here as well! **************************************************************************************
		
    ELSE
        // If homing has already been done, move motors and valves to zero/default position
        IF NOT bMoveMotorDone[1] THEN //Move Motor 1
			bMoveMotorDone[1] := GVL_Motion.aMotors[1].MoveAbsolute(rPosition := 0, rVelocity := 15, rAcc := 10, rDec := 10);
        END_IF
		
		IF NOT bMoveMotorDone[2] THEN //Move Motor 2
			bMoveMotorDone[2] := GVL_Motion.aMotors[2].MoveAbsolute(rPosition := 0, rVelocity := 15, rAcc := 10, rDec := 10);
        END_IF
		
		
		IF NOT bMoveMotorDone[3] AND bMoveMotorDone[2] THEN //Move Motor 3 after motor 2 is done
			bMoveMotorDone[3] := GVL_Motion.aMotors[3].MoveAbsolute(rPosition := 0, rVelocity := 15, rAcc := 10, rDec := 10);
        END_IF
		
        // Move all valves to position 1 (home position)
		IF NOT bHomeValveDone[1] THEN
			bHomeValveDone[1] := GVL_Motion.aValvesObj[1].MoveValve(iPosition := 1, rVelocity := 15, rAcc := 10, rDec := 10);
		END_IF
		IF NOT bHomeValveDone[2] THEN
			bHomeValveDone[2] := GVL_Motion.aValvesObj[2].MoveValve(iPosition := 1, rVelocity := 15, rAcc := 10, rDec := 10);
		END_IF
		IF NOT bHomeValveDone[3] THEN
			bHomeValveDone[3] := GVL_Motion.aValvesObj[3].MoveValve(iPosition := 1, rVelocity := 15, rAcc := 10, rDec := 10);
		END_IF
		IF NOT bHomeValveDone[4] THEN
			bHomeValveDone[4] := GVL_Motion.aValvesObj[4].MoveValve(iPosition := 1, rVelocity := 15, rAcc := 10, rDec := 10);
		END_IF
		IF NOT bHomeValveDone[5] THEN
			bHomeValveDone[5] := GVL_Motion.aValvesObj[5].MoveValve(iPosition := 1, rVelocity := 15, rAcc := 10, rDec := 10);
		END_IF

		//TODO: Linear pumps should be homed as well. TODO: ###############################################################
		
		IF bHomeValveDone[1] AND bHomeValveDone[2] AND bHomeValveDone[3] AND bHomeValveDone[4] AND bHomeValveDone[5] AND bMoveMotorDone[1] AND bMoveMotorDone[2] AND bMoveMotorDone[3] THEN
			bStartedAction := TRUE;
		END_IF
        
    END_IF
END_IF

// Step 4: Check if all motors completed their action
IF bStartedAction THEN
	bAllDone := TRUE;
	
	FOR i := 1 TO 3 DO
		stStatus := GVL_Motion.aMotors[i].GetStatus();
	
		// If any motor is not done yet
		IF NOT stStatus.bDone THEN
			bAllDone := FALSE;
		END_IF
	
		// If any motor returned an error, abort with immediate fault
		IF stStatus.bError THEN
			GVL_HMI.eMachineMode := E_MachineMode.IMEDIATE_FAULT;
			RETURN;
		END_IF
	END_FOR
	
	// Step 5: Check if all valves completed their action
	FOR i := 1 TO 2 DO
		stStatus := GVL_Motion.aValvesObj[i].GetStatus();
	
		// If any valve is not done yet
		IF NOT stStatus.bDone THEN
			bAllDone := FALSE;
		END_IF
	
		// If any valve returned an error, abort with immediate fault
		IF stStatus.bError THEN
			GVL_HMI.eMachineMode := E_MachineMode.IMEDIATE_FAULT;
			RETURN;
		END_IF
	END_FOR
	
END_IF

// Step 6: Finalize the initialization process if everything is done
IF bAllDone AND bEnableDone AND bAllResetDone AND NOT bInitComplete THEN
    // Mark that homing has been done, so it won’t run again on next power-up
    IF NOT GVL_Motion.bInitialHomingDone THEN
        GVL_Motion.bInitialHomingDone := TRUE;
    END_IF

    bInitComplete := TRUE;
    bDone := TRUE;
END_IF
]]></ST>
    </Implementation>
    <Method Name="Reset" Id="{9d292ea2-dd87-459a-a476-a8e8f5acf2de}">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR_INPUT	
END_VAR
VAR
	bResetRequest 	: BOOL := FALSE;
	bResetExecute 	: BOOL := FALSE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bResetRequest THEN
    bResetExecute := TRUE;
    bResetRequest := TRUE;
	Reset := FALSE;
END_IF

IF bResetExecute THEN
	bDone	:= FALSE;

	bAllDone         		:= FALSE;
	bStartedAction  		:= FALSE;
	bInitComplete    		:= FALSE;
	bVerticalMotorsDone		:= FALSE;   
	bLinearMotorsHomingDone	:= FALSE; 
	bValvesHomingDone 		:= FALSE;
	bLinearPumpsDone		:= FALSE;
	bPerformHoming		 	:= FALSE;
	
	bAllResetDone	 := FALSE;
	bEnableDone		 := FALSE;
		
	FOR i := 1 TO 8 DO
		bResetCheck[i] := FALSE;
	END_FOR
	
	bHomeMotorDone[1] := FALSE;
	bHomeMotorDone[2] := FALSE;
	bHomeMotorDone[3] := FALSE;
	
	bMoveMotorDone[1] := FALSE;
	bMoveMotorDone[2] := FALSE;
	bMoveMotorDone[3] := FALSE;
	
	bHomeValveDone[1] := FALSE;
	bHomeValveDone[2] := FALSE;
	bHomeValveDone[3] := FALSE;
	bHomeValveDone[4] := FALSE;
	bHomeValveDone[5] := FALSE;
		
	IF bResetRequest THEN
		bResetExecute := FALSE;
		bResetRequest := FALSE;
		Reset := TRUE;
		RETURN;
	ELSE
		Reset := FALSE;
	END_IF
END_IF

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="PRG_SystemInit">
      <LineId Id="679" Count="37" />
      <LineId Id="718" Count="14" />
      <LineId Id="921" Count="5" />
      <LineId Id="920" Count="0" />
      <LineId Id="733" Count="86" />
      <LineId Id="821" Count="2" />
      <LineId Id="966" Count="1" />
      <LineId Id="965" Count="0" />
      <LineId Id="969" Count="1" />
      <LineId Id="968" Count="0" />
      <LineId Id="972" Count="1" />
      <LineId Id="971" Count="0" />
      <LineId Id="825" Count="56" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="PRG_SystemInit.Reset">
      <LineId Id="65" Count="2" />
      <LineId Id="78" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="79" Count="1" />
      <LineId Id="41" Count="11" />
      <LineId Id="88" Count="0" />
      <LineId Id="93" Count="2" />
      <LineId Id="89" Count="0" />
      <LineId Id="54" Count="1" />
      <LineId Id="99" Count="3" />
      <LineId Id="56" Count="6" />
      <LineId Id="70" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="74" Count="3" />
      <LineId Id="72" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>