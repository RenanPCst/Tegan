<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_HMIControl" Id="{978beb02-d146-472c-ad6b-2f8739fa70ac}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_HMIControl
VAR
//Motor 1 Animation
rM1MotorPosition     : LREAL;  // Real Motor Actual position
rM1MotorPositionPerc : LREAL;  // Motor Actual Position Scaled 0-100
cM1MinPosition       : LREAL := 0.0; // Minimum expected Value
cM1MaxPosition       : LREAL := -320.0; // Maximum expected Value (Default Value)

//Motor 2 Animation
rM2MotorPosition     : LREAL;  // Real Motor Actual position
rM2MotorPositionPerc : LREAL;  // Motor Actual Position Scaled 0-100
cM2MinPosition       : LREAL := 0.0; // Minimum expected Value
cM2MaxPosition       : LREAL := -170.0; // Maximum expected Value (Default Value)

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Buttons Indicators -------------------------------------------------------------------------------------------------
GVL_HMI.HMIDigOutputs.bHMIResetButton 	:= GVL_IO.gDigOutputs.bResetIndicator;
GVL_HMI.HMIDigOutputs.bHMIStartButton	:= GVL_IO.gDigOutputs.bStartIndicator;
GVL_HMI.HMIDigOutputs.bHMIEStopSide		:= NOT (GVL_Safety.SafetyInputs.bEStopSideCh1 OR GVL_Safety.SafetyInputs.bEStopSideCh2);
GVL_HMI.HMIDigOutputs.bHMIEStopFront	:= NOT (GVL_Safety.SafetyInputs.bEStopHMICh1 OR GVL_Safety.SafetyInputs.bEStopHMICh2);

//Alarm Lamp Indicator for HMI ---------------------------------------------------------------------------------------
GVL_HMI.HMIDigOutputs.bAlarmLampRed 	:= GVL_IO.gDigOutputs.bTowerRedLight; 	//Red Light
GVL_HMI.HMIDigOutputs.bAlarmLampAmbar 	:= GVL_IO.gDigOutputs.bTowerAmberLight; //Ambar Light
GVL_HMI.HMIDigOutputs.bAlarmLampGreen 	:= GVL_IO.gDigOutputs.bTowerGreenLight; //Green Light

(* <Controls Animation> ************************************************************************************************ *)
ACT_M1Animation();
ACT_M2Animation();
(* </Controls Animation> *********************************************************************************************** *)

(* <Manual Moviment> *************************************************************************************************** *)

//Temporary constants for testing purpose
GVL_HMI.HMIDigOutputs.aValveAngle[1]	:= 240.5;
GVL_HMI.HMIDigOutputs.aValveAngle[2]	:= 239.8;
GVL_HMI.HMIDigOutputs.aValveAngle[3]	:= 240.1;
GVL_HMI.HMIDigOutputs.aValveAngle[4]	:= 240.3;
GVL_HMI.HMIDigOutputs.aValveAngle[5]	:= 249.7;

GVL_HMI.HMIDigOutputs.aValvePosition[1]	:= 5;
GVL_HMI.HMIDigOutputs.aValvePosition[2]	:= 5;
GVL_HMI.HMIDigOutputs.aValvePosition[3]	:= 5;
GVL_HMI.HMIDigOutputs.aValvePosition[4]	:= 5;
GVL_HMI.HMIDigOutputs.aValvePosition[5]	:= 5;

GVL_HMI.HMIDigOutputs.aRinseLevel[1]	:= 64;
GVL_HMI.HMIDigOutputs.aRinseLevel[2]	:= 47;
GVL_HMI.HMIDigOutputs.aRinseLevel[3]	:= 87;
GVL_HMI.HMIDigOutputs.aRinseLevel[4]	:= 14;

GVL_HMI.HMIDigOutputs.aWasteLevel		:= 82;]]></ST>
    </Implementation>
    <Action Name="ACT_M1Animation" Id="{5ca7e550-b195-4047-b743-192dee895467}">
      <Implementation>
        <ST><![CDATA[//M1 Motor vertical Axis Animation
IF GVL_Motion.bInitialHomingDone THEN
	// Read the end of scale value
	cM1MaxPosition := GVL_HMI.HMIParameters.aM1Position[2];	

	// Ler posição do motor
	rM1MotorPosition := GVL_Motion.aMotors[1].GetPosition();
	
	// Scaling the motor position (0 = 0%, -320 = 100%)
	rM1MotorPositionPerc := ((rM1MotorPosition - cM1MinPosition) / (cM1MaxPosition - cM1MinPosition)) * 100.0;
	
	// Limita valor entre 0 e 100%
	IF rM1MotorPositionPerc < 0 THEN
		rM1MotorPositionPerc := 0;
	ELSIF rM1MotorPositionPerc > 100 THEN
		rM1MotorPositionPerc := 100;
	END_IF
	
	GVL_HMI.HMIAnimation.rM1VerticalAnimation := 455 + (TO_REAL(rM1MotorPositionPerc)*1.35); //Adding y pixel home and sending the scaled value throug GVL_HMI
ELSE
	GVL_HMI.HMIAnimation.rM1VerticalAnimation := 455; //Default Value
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_M2Animation" Id="{2010a8e8-186b-452d-a6f4-adbd9f915f7d}">
      <Implementation>
        <ST><![CDATA[//M2 HMI object moves from pixel 455 (0 Position) up to 555 (Max position = -170mm)
//M2 Motor vertical Axis Animation
IF GVL_Motion.bInitialHomingDone THEN
	// Read the end of scale value
	cM2MaxPosition := GVL_HMI.HMIParameters.aM2Position[4]; //Calibration Position witch is the most away position the motor will reach	

	// Ler posição do motor
	rM2MotorPosition := GVL_Motion.aMotors[2].GetPosition();
	
	// Scaling the motor position (0 = 0%, -320 = 100%)
	rM2MotorPositionPerc := ((rM2MotorPosition - cM2MinPosition) / (cM2MaxPosition - cM2MinPosition)) * 100.0;
	
	// Limita valor entre 0 e 100%
	IF rM2MotorPositionPerc < 0 THEN
		rM2MotorPositionPerc := 0;
	ELSIF rM2MotorPositionPerc > 100 THEN
		rM2MotorPositionPerc := 100;
	END_IF
	
	GVL_HMI.HMIAnimation.rM2VerticalAnimation := 455 + TO_REAL(rM2MotorPositionPerc); //Adding y pixel home and sending the scaled value throug GVL_HMI
ELSE
	GVL_HMI.HMIAnimation.rM2VerticalAnimation := 455; //Default Value
END_IF]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="PRG_HMIControl">
      <LineId Id="252" Count="14" />
      <LineId Id="302" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="267" Count="18" />
      <LineId Id="85" Count="0" />
    </LineIds>
    <LineIds Name="PRG_HMIControl.ACT_M1Animation">
      <LineId Id="2" Count="20" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PRG_HMIControl.ACT_M2Animation">
      <LineId Id="2" Count="21" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>