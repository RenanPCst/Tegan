<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_HMIControl" Id="{978beb02-d146-472c-ad6b-2f8739fa70ac}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_HMIControl
VAR
//Motor 1 Animation
rM1MotorPosition     : LREAL;  // Real Motor Actual position
rM1MotorPositionPerc : LREAL;  // Motor Actual Position Scaled 0-100
cM1MinPosition       : LREAL := 0.0; // Minimum expected Value
cM1MaxPosition       : LREAL := -320.0; // Maximum expected Value (Default Value)

//Motor 2 Animation
rM2MotorPosition     : LREAL;  // Real Motor Actual position
rM2MotorPositionPerc : LREAL;  // Motor Actual Position Scaled 0-100
cM2MinPosition       : LREAL := 0.0; // Minimum expected Value
cM2MaxPosition       : LREAL := -170.0; // Maximum expected Value (Default Value)

//Pumps Animation and status
aPumpStatus		: ARRAY[1..10] OF ST_ActuatorStatus;

//Doors Animation
fbBlinkDoor	: ARRAY[1..6] OF FB_Blink;

i : INT;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Buttons Indicators -------------------------------------------------------------------------------------------------
GVL_HMI.HMIDigOutputs.bHMIResetButton 	:= GVL_IO.gDigOutputs.bResetIndicator;
GVL_HMI.HMIDigOutputs.bHMIStartButton	:= GVL_IO.gDigOutputs.bStartIndicator;
GVL_HMI.HMIDigOutputs.bHMIEStopSide		:= NOT (GVL_Safety.SafetyInputs.bEStopSideCh1 OR GVL_Safety.SafetyInputs.bEStopSideCh2);
GVL_HMI.HMIDigOutputs.bHMIEStopFront	:= NOT (GVL_Safety.SafetyInputs.bEStopHMICh1 OR GVL_Safety.SafetyInputs.bEStopHMICh2);

//Alarm Lamp Indicator for HMI ---------------------------------------------------------------------------------------
GVL_HMI.HMIDigOutputs.bAlarmLampRed 	:= GVL_IO.gDigOutputs.bTowerRedLight; 	//Red Light
GVL_HMI.HMIDigOutputs.bAlarmLampAmbar 	:= GVL_IO.gDigOutputs.bTowerAmberLight; //Ambar Light
GVL_HMI.HMIDigOutputs.bAlarmLampGreen 	:= GVL_IO.gDigOutputs.bTowerGreenLight; //Green Light

(* <Controls Animation> ************************************************************************************************ *)
ACT_M1Animation();
ACT_M2Animation();

//Calibration Box presence
GVL_HMI.bHMICalibrationBox := GVL_IO.gDigInputs.bCalibrationBoxPresent;

//Valves Angle
GVL_HMI.HMIAnimation.aValveAngle[1]	:= GVL_Motion.aValves[1].rActualPosition / 60;
GVL_HMI.HMIAnimation.aValveAngle[2]	:= GVL_Motion.aValves[2].rActualPosition / 60;;
GVL_HMI.HMIAnimation.aValveAngle[3]	:= GVL_Motion.aValves[3].rActualPosition / 60;;
GVL_HMI.HMIAnimation.aValveAngle[4]	:= GVL_Motion.aValves[4].rActualPosition / 60;;
GVL_HMI.HMIAnimation.aValveAngle[5]	:= GVL_Motion.aValves[5].rActualPosition / 60;;

//Pumps status Running or busy
IF GVL_HMI.eMachineMode = E_MachineMode.MANUAL THEN
	FOR i := 1 TO 10 DO
		aPumpStatus[i] := GVL_Motion.aPumpsRotary[i].GetStatus();
		GVL_HMI.aManualPumpsCmd[i].bBusy := aPumpStatus[i].bBusy;
	END_FOR
END_IF


//Doors hide/visible 
GVL_HMI.HMIAnimation.bHMIDoorOpen[1] := NOT GVL_Safety.SafetyInputs.bStageCollectLeftDoorFdbk;
GVL_HMI.HMIAnimation.bHMIDoorOpen[2] := NOT GVL_Safety.SafetyInputs.bStageCollectRightDoorFdbk;
GVL_HMI.HMIAnimation.bHMIDoorOpen[3] := NOT GVL_Safety.SafetyInputs.bSampleRecoveryDoorFdbk;
GVL_HMI.HMIAnimation.bHMIDoorOpen[4] := GVL_IO.gDigInputs.bAccessDoorInterlockFdbk1;
GVL_HMI.HMIAnimation.bHMIDoorOpen[5] := GVL_IO.gDigInputs.bAccessDoorInterlockFdbk2;
GVL_HMI.HMIAnimation.bHMIDoorOpen[6] := GVL_IO.gDigInputs.bAccessDoorInterlockFdbk3;

//Doors open blinking red alert
fbBlinkDoor[1](bEnable := NOT GVL_Safety.SafetyInputs.bStageCollectLeftDoorFdbk, tPeriod := T#1S);
GVL_HMI.HMIAnimation.bHMIDoorBlink[1] := fbBlinkDoor[1].bBlink;

fbBlinkDoor[2](bEnable := NOT GVL_Safety.SafetyInputs.bStageCollectRightDoorFdbk, tPeriod := T#1S);
GVL_HMI.HMIAnimation.bHMIDoorBlink[2] := fbBlinkDoor[2].bBlink;

fbBlinkDoor[3](bEnable := NOT GVL_Safety.SafetyInputs.bSampleRecoveryDoorFdbk, tPeriod := T#1S);
GVL_HMI.HMIAnimation.bHMIDoorBlink[3] := fbBlinkDoor[3].bBlink;

fbBlinkDoor[4](bEnable := GVL_IO.gDigInputs.bAccessDoorInterlockFdbk1, tPeriod := T#1S);
GVL_HMI.HMIAnimation.bHMIDoorBlink[4] := fbBlinkDoor[4].bBlink;

fbBlinkDoor[5](bEnable := GVL_IO.gDigInputs.bAccessDoorInterlockFdbk2, tPeriod := T#1S);
GVL_HMI.HMIAnimation.bHMIDoorBlink[5] := fbBlinkDoor[5].bBlink;

fbBlinkDoor[6](bEnable := GVL_IO.gDigInputs.bAccessDoorInterlockFdbk3, tPeriod := T#1S);
GVL_HMI.HMIAnimation.bHMIDoorBlink[6] := fbBlinkDoor[6].bBlink;


(* <\Controls Animation> *********************************************************************************************** *)

(* <Machine Settings> ************************************************************************************************** *)
IF GVL_HMI.bSaveParametersBt THEN
	GVL_Settings.stMachineParam := GVL_HMI.HMIParameters;
	GVL_HMI.bSaveParametersBt := FALSE;
	GVL_HMI.bSaveParametersDone := TRUE;
END_IF

IF GVL_HMI.bReloadHMIParameters THEN
	 GVL_HMI.HMIParameters := GVL_Settings.stMachineParam;
	 GVL_HMI.bReloadHMIParameters := FALSE;
END_IF
(* <\Machine Settings> ************************************************************************************************** *)

(* <HMI Alerts> ******************************************************************************************************** *)

//Auto Cycle Incoherence [when there is something missing to start the auto cycle] 
GVL_HMI.bIncoherenceDetected := NOT GVL_Recipe.bIsThereRecipeActivated;


(* <\HMI Alerts> ******************************************************************************************************* *)]]></ST>
    </Implementation>
    <Action Name="ACT_M1Animation" Id="{5ca7e550-b195-4047-b743-192dee895467}">
      <Implementation>
        <ST><![CDATA[//M1 Motor vertical Axis Animation
IF GVL_Motion.bInitialHomingDone THEN
	// Read the end of scale value
	cM1MaxPosition := GVL_Settings.stMachineParam.aM1Position[2];	

	// Read motor Position
	rM1MotorPosition := GVL_Motion.aMotors[1].GetPosition();
	
	// Scaling the motor position (0 = 0%, -320 = 100%)
	rM1MotorPositionPerc := ((rM1MotorPosition - cM1MinPosition) / (cM1MaxPosition - cM1MinPosition)) * 100.0;
	
	// Limits value in the range 0 and 100%
	IF rM1MotorPositionPerc < 0 THEN
		rM1MotorPositionPerc := 0;
	ELSIF rM1MotorPositionPerc > 100 THEN
		rM1MotorPositionPerc := 100;
	END_IF
	
	GVL_HMI.HMIAnimation.rM1VerticalAnimation := 455 + (TO_REAL(rM1MotorPositionPerc)*1.35); //Adding y pixel home and sending the scaled value throug GVL_HMI
ELSE
	GVL_HMI.HMIAnimation.rM1VerticalAnimation := 455; //Default Value
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_M2Animation" Id="{2010a8e8-186b-452d-a6f4-adbd9f915f7d}">
      <Implementation>
        <ST><![CDATA[//M2 HMI object moves from pixel 455 (0 Position) up to 555 (Max position = -170mm)
//M2 Motor vertical Axis Animation
IF GVL_Motion.bInitialHomingDone THEN
	// Read the end of scale value
	cM2MaxPosition := GVL_Settings.stMachineParam.aM2Position[4]; //Calibration Position witch is the most away position the motor will reach	

	// Read motor Position
	rM2MotorPosition := GVL_Motion.aMotors[2].GetPosition();
	
	// Scaling the motor position (0 = 0%, -320 = 100%)
	rM2MotorPositionPerc := ((rM2MotorPosition - cM2MinPosition) / (cM2MaxPosition - cM2MinPosition)) * 100.0;
	
	// Limits value in the range 0 and 100%
	IF rM2MotorPositionPerc < 0 THEN
		rM2MotorPositionPerc := 0;
	ELSIF rM2MotorPositionPerc > 100 THEN
		rM2MotorPositionPerc := 100;
	END_IF
	
	GVL_HMI.HMIAnimation.rM2VerticalAnimation := 455 + TO_REAL(rM2MotorPositionPerc); //Adding y pixel home and sending the scaled value throug GVL_HMI
ELSE
	GVL_HMI.HMIAnimation.rM2VerticalAnimation := 455; //Default Value
END_IF]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="PRG_HMIControl">
      <LineId Id="252" Count="13" />
      <LineId Id="338" Count="0" />
      <LineId Id="337" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="413" Count="4" />
      <LineId Id="412" Count="0" />
      <LineId Id="436" Count="1" />
      <LineId Id="448" Count="0" />
      <LineId Id="452" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="459" Count="0" />
      <LineId Id="458" Count="0" />
      <LineId Id="453" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="342" Count="0" />
      <LineId Id="384" Count="0" />
      <LineId Id="388" Count="4" />
      <LineId Id="387" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="369" Count="1" />
      <LineId Id="368" Count="0" />
      <LineId Id="372" Count="1" />
      <LineId Id="371" Count="0" />
      <LineId Id="375" Count="1" />
      <LineId Id="374" Count="0" />
      <LineId Id="379" Count="1" />
      <LineId Id="378" Count="0" />
      <LineId Id="382" Count="1" />
      <LineId Id="381" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="494" Count="0" />
      <LineId Id="493" Count="0" />
      <LineId Id="496" Count="1" />
      <LineId Id="499" Count="1" />
      <LineId Id="498" Count="0" />
      <LineId Id="502" Count="0" />
      <LineId Id="501" Count="0" />
      <LineId Id="505" Count="1" />
      <LineId Id="504" Count="0" />
      <LineId Id="495" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="484" Count="0" />
      <LineId Id="492" Count="0" />
      <LineId Id="483" Count="0" />
      <LineId Id="485" Count="0" />
      <LineId Id="490" Count="1" />
      <LineId Id="489" Count="0" />
    </LineIds>
    <LineIds Name="PRG_HMIControl.ACT_M1Animation">
      <LineId Id="2" Count="20" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PRG_HMIControl.ACT_M2Animation">
      <LineId Id="2" Count="21" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>