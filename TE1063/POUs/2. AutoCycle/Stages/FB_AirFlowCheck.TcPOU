<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_AirFlowCheck" Id="{a48de8b8-7051-4c87-a9e3-464f1e624d2c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AirFlowCheck
VAR_INPUT
    iRawSensorValue     : INT;   // Raw sensor value (16-bit)
    iSensorID           : INT;   // Sensor ID (1 = Festo, 2 = SMC)
    rPressureThreshold  : REAL;  // Minimum air pressure threshold
    tStabilizationTime  : TIME;  // Required stabilization time
    bExecute            : BOOL;  // Signal to start verification
    bReset              : BOOL;  // Reset command
END_VAR

VAR_OUTPUT
    bAirFlowOK      : BOOL;  // Indicates if the airflow is within acceptable limits
    bAirFlowError   : BOOL;  // Indicates if there was an airflow failure
END_VAR

VAR
    iState              : INT := 0;  // State machine variable
    TON_Stabilization   : TON;       // Stabilization timer
    fbSensorScaling     : FB_SensorScaling; // Sensor scaling function block
    rConvertedPressure  : REAL;      // Scaled pressure value
    bTimerActive        : BOOL;      // Internal flag to keep the timer running
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE iState OF
    // State 0: Reset all variables
    0:
        bAirFlowOK     := FALSE;
        bAirFlowError  := FALSE;
        TON_Stabilization(IN := FALSE);
        rConvertedPressure := 0.0;
        bTimerActive := FALSE;
        IF bExecute AND NOT bReset THEN
			iState := 1; // Proceed to airflow verification
		END_IF
        

    // State 1: Start verification
    1:
        IF bReset THEN
            iState := 0; // Ensure reset if requested
        ELSIF bExecute THEN
            // Convert the raw sensor value before checking airflow
            fbSensorScaling(
                iRawValue  := iRawSensorValue,
                iSensorID  := iSensorID,
                rPressure  => rConvertedPressure
            );
            
            iState := 2; // Proceed to pressure check
        END_IF;

    // State 2: Check if airflow meets the threshold
    2:
        IF bReset THEN
            iState := 0; // Ensure reset if requested
        ELSIF rConvertedPressure >= rPressureThreshold THEN
            bTimerActive := TRUE; // Activate timer
            TON_Stabilization(IN := bTimerActive, PT := tStabilizationTime);
            
            iState := 3; // Proceed to stabilization time check
        ELSE
            bTimerActive := FALSE;
            TON_Stabilization(IN := FALSE);
            bAirFlowOK     := FALSE;
            bAirFlowError  := TRUE;
            
            iState := 99; // Move to error state
        END_IF;

    // State 3: Wait for stabilization time
    3:
        IF bReset THEN
            iState := 0; // Ensure reset if requested
        ELSIF TON_Stabilization.Q THEN
            bTimerActive := FALSE;
            TON_Stabilization(IN := FALSE); // Stop the timer
            
            bAirFlowOK     := TRUE;
            bAirFlowError  := FALSE;
            
            iState := 4; // Proceed to final state
        ELSE
            TON_Stabilization(IN := bTimerActive, PT := tStabilizationTime); // Keep the timer running
        END_IF;

    // State 4: Airflow verification completed
    4:
        IF bReset THEN
            iState := 0; // Ensure reset from final state
        END_IF;

    // State 99: Error state
    99:
        IF bReset THEN
            iState := 0; // Ensure reset from error state
        ELSE
            bAirFlowError := TRUE;
        END_IF;

END_CASE;]]></ST>
    </Implementation>
    <LineIds Name="FB_AirFlowCheck">
      <LineId Id="279" Count="8" />
      <LineId Id="373" Count="1" />
      <LineId Id="288" Count="64" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>