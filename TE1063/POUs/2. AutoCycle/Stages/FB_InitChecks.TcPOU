<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_InitChecks" Id="{ca2f8e73-30a6-41b7-a1d5-e28e096b5f8e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_InitChecks
VAR_INPUT
	bExecute	 : BOOL;
    bPower24V_OK : BOOL;
    bPower48V_OK : BOOL;
    bDoorsClosed : BOOL;
    bDoorsLocked : BOOL;
    bAirEnabled  : BOOL;
    bReset       : BOOL;  // Input to reset the FB state
END_VAR

VAR_OUTPUT
    bInitOK : BOOL := FALSE; 	// Indicates if the initialization sequence passed
    bError  : BOOL := FALSE;    // Indicates an initialization error
END_VAR

VAR
    iState         : INT := 0;  // State machine variable
    fbEventHandler : FB_EventHandler;
    bExecuteEvent  : BOOL := FALSE;
    bEventDone     : BOOL := FALSE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE iState OF
    // State 0: Reset all variables before starting checks
    0:
        bInitOK := FALSE;
        bError := FALSE;
        bExecuteEvent := FALSE;
        bEventDone := FALSE;
        
        // Reset safety commands
        GVL_Safety.bAirSupplyEnable := FALSE;
        GVL_Safety.bDoorLockCommand := FALSE;
		
        IF bExecute AND NOT bReset THEN
        	iState := 1; // Move to power supply check
		END_IF
		
    // State 1: Check power supply
    1:
        IF bReset THEN
            iState := 0; // Force reset if requested
        ELSIF NOT (bPower24V_OK AND bPower48V_OK) THEN
            bError := TRUE;
            bExecuteEvent := TRUE;
            fbEventHandler(
                bExecute  := bExecuteEvent,
                eEventName := E_Events.ERROR,
                sSystem    := 'Power Supply Check',
                sMessage   := 'Power Supply 24/48Vdc with Error!',
                bDone      => bEventDone
            );
            ResetEventTrigger();
            
            GVL_Safety.bAirSupplyEnable := FALSE;
            GVL_Safety.bDoorLockCommand := FALSE;
            
            iState := 99; // Move to error state
        ELSE
            iState := 2; // Proceed to door check
        END_IF;

    // State 2: Check if doors are closed
    2:
        IF bReset THEN
            iState := 0; 
        ELSIF NOT bDoorsClosed THEN
            bExecuteEvent := TRUE;
            fbEventHandler(
                bExecute  := bExecuteEvent,
                eEventName := E_Events.WARNING,
                sSystem    := 'Safety',
                sMessage   := 'Doors not closed!',
                bDone      => bEventDone
            );
            ResetEventTrigger();
            
            GVL_Safety.bAirSupplyEnable := FALSE;
            GVL_Safety.bDoorLockCommand := FALSE;
            
            iState := 99; // Move to error state
        ELSE
            iState := 3; // Proceed to door locking check
        END_IF;

    // State 3: Lock doors if they are not locked
    3:
        IF bReset THEN
            iState := 0; 
        ELSIF NOT bDoorsLocked THEN
            GVL_Safety.bDoorLockCommand := TRUE;
            GVL_Safety.bAirSupplyEnable := FALSE;
        ELSE
            iState := 4; // Proceed to air supply check
        END_IF;

    // State 4: Enable air supply if doors are locked
    4:
        IF bReset THEN
            iState := 0; 
        ELSIF NOT bAirEnabled THEN
            bExecuteEvent := TRUE;
            fbEventHandler(
                bExecute  := bExecuteEvent,
                eEventName := E_Events.INFO,
                sSystem    := 'Safety',
                sMessage   := 'All Doors Locked!',
                bDone      => bEventDone
            );
            ResetEventTrigger();

            GVL_Safety.SafetyOutputs.bAirPressureOK := TRUE; // #TODO: Implement actual air pressure measurement
            GVL_Safety.bAirSupplyEnable := TRUE;
        ELSE
            iState := 5; // Proceed to final state
        END_IF;

    // State 5: All checks passed, allow transition to the next stage
    5:
        IF bReset THEN
            iState := 0; // Ensure reset can occur from here
        ELSE
            bExecuteEvent := TRUE;
            fbEventHandler(
                bExecute  := bExecuteEvent,
                eEventName := E_Events.INFO,
                sSystem    := 'Safety',
                sMessage   := 'Air Supply Enabled!',
                bDone      => bEventDone
            );
            ResetEventTrigger();
            
            bInitOK := TRUE;
        END_IF;

    // State 99: Error state
    99:
        IF bReset THEN
            iState := 0; // Ensure reset from error state
        ELSE
            bError := TRUE;
        END_IF;

END_CASE;]]></ST>
    </Implementation>
    <Action Name="ResetEventTrigger" Id="{ddb8bc5a-944b-470b-9118-654fa8c992ef}">
      <Implementation>
        <ST><![CDATA[IF bEventDone THEN
        bExecuteEvent := FALSE;
        bEventDone := FALSE;
END_IF;]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_InitChecks">
      <LineId Id="738" Count="10" />
      <LineId Id="862" Count="0" />
      <LineId Id="749" Count="0" />
      <LineId Id="861" Count="0" />
      <LineId Id="860" Count="0" />
      <LineId Id="857" Count="0" />
      <LineId Id="752" Count="104" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_InitChecks.ResetEventTrigger">
      <LineId Id="2" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>