<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_ValvePositionControl" Id="{9a366dfb-6783-408c-9907-1d3bb649c87c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ValvePositionControl
VAR_INPUT
	bEnable      	: BOOL;			// Enables the FB
    iValvePosition	: INT;   		// Desired Position to move the valve (1 a 6)
	bResetCommand	: bool;			// Reset the block
END_VAR
VAR_OUTPUT
	iActualPosition : INT;  		// Actual valve position
    bMoveDone       : BOOL; 		// 
	bBusy		   	: BOOL;
    bError          : BOOL; 		// Indicates whether the movement has finished
	iErrorID		: UDINT;
END_VAR
VAR_IN_OUT
	ServoAxis    	: AXIS_REF;  	// Axis Reference
END_VAR
VAR
    fbMCPower     		: FB_MCPower;
    fbMCMoveAbs   		: FB_MCMoveAbsolute;
    fbReset     		: FB_MotorsReset;
    rTargetPos    		: LREAL; 		// Target position in degrees
    iState        		: INT := 0; 	// State machine initializing in 0
    iModeOfOperation	: INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Defines the valve positions within 0-360°
CASE iValvePosition OF
    1: rTargetPos := 0.0;	// Solvent 1
    2: rTargetPos := 60.0;	// Solvent 2
    3: rTargetPos := 120.0;	// Solvent 3
    4: rTargetPos := 180.0;	// Solvent 4
    5: rTargetPos := 240.0;	// Stages/Plates
    6: rTargetPos := 300.0;	// Waste/Collector
ELSE
    rTargetPos := 0.0; // Default position if input is invalid
END_CASE

// State machine to ensure the correct sequence of operations
CASE iState OF
    0: // IDLE - Waiting for command
        bBusy := FALSE;
        bMoveDone := FALSE;
        bError := FALSE;

        // If a reset command is triggered, go to reset state
        IF bResetCommand THEN
            iState := 1;
        // If movement is required, go to enable state
        ELSIF bEnable THEN
            iState := 2;
        END_IF;

    1: // RESET - Clears errors before continuing
        fbReset(bExecute := TRUE, Axis := ServoAxis);

        IF NOT fbReset.bBusy THEN
            bError := FALSE;  // Clear error flag
            iState := 0;      // Return to idle state
        END_IF;

    2: // CHECK DRIVE POWER
        fbMCPower(
            bEnable := TRUE,
            bReset  := FALSE,
            Axis    := ServoAxis
        );

        IF fbMCPower.bError THEN
            bError := TRUE;
            iState := 1; // If an error occurs, go to reset state
        ELSIF fbMCPower.bActive THEN
            iState := 3; // Proceed to motion state
        END_IF;

    3: // ENSURE PROPER MODE
        //iModeOfOperation := 1; // Profile Position Mode (PPM)

        IF fbMCPower.bActive THEN
            iState := 4; // Proceed to movement state
        END_IF;

    4: // EXECUTE MOVEMENT
        fbMCMoveAbs(
            Axis := ServoAxis,
            fPosition := rTargetPos,   // Sets the target position within 0 to 360°
            fVelocity := 20.0,        // Movement velocity
            fAcceleration := 10.0,   // Acceleration
            fDeceleration := 10.0,   // Deceleration
            bExecute := TRUE
        );

        IF fbMCMoveAbs.bDone THEN
            iState := 5; // Once the movement is complete, update variables
        END_IF;

    5: // UPDATE STATUS AND RETURN TO IDLE
        bBusy 			:= fbMCMoveAbs.bBusy;
        bMoveDone 		:= fbMCMoveAbs.bDone;
        bError 			:= fbMCMoveAbs.bError;
        iActualPosition := iValvePosition;

        // Returns to the IDLE state after movement completes
        IF bMoveDone THEN
            //iState := 0;
        END_IF;
END_CASE;]]></ST>
    </Implementation>
    <LineIds Name="FB_ValvePositionControl">
      <LineId Id="559" Count="28" />
      <LineId Id="591" Count="50" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>