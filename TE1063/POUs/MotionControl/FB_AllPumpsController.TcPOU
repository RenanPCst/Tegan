<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_AllPumpsController" Id="{6c354a05-b130-4608-b4fa-0a03f44c30f1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AllPumpsController
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	bRequestMoveBySpeed		: BOOL := FALSE;
	bRequestMoveByVol		: BOOL := FALSE;
	bRequestMoveByDistance	: BOOL := FALSE;
	bRequestStopAllPumps	: BOOL := FALSE;
	bRequestMoveLinearPumps : BOOL := FALSE;
	
	bMoveVelocityPumps	: ARRAY[1..10] OF BOOL;
	bMoveDistancePumps	: ARRAY[1..10] OF BOOL;
	bMoveRelativePumps	: ARRAY[1..10] OF BOOL;
	bMoveLinearPumps	: ARRAY[1..10] OF BOOL;
	bStopRotaryPump 	: ARRAY[1..10] OF BOOL;
	bStopLinearPump		: ARRAY[1..10] OF BOOL;
	
	rDistanceByVol		: ARRAY[1..10] OF LREAL;
	aValvePosition		: ARRAY[1..10] OF SINT;
	aPumpPath			: ARRAY[1..10] OF E_PumpPath;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="MoveByDistance" Id="{10f89e64-662d-4017-bd01-593f4c2483a0}">
      <Declaration><![CDATA[METHOD MoveByDistance : BOOL
VAR_INPUT
	aPumpIds		: ARRAY[1..10] OF BOOL;
	aPumpDirection 	: ARRAY[1..10] OF E_PumpDirection;
	aVelocity 		: ARRAY[1..10] OF REAL;
	aRevolutions	: ARRAY[1..10] OF UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bRequestMoveByDistance THEN
	MoveByDistance := FALSE;
	bMoveDistancePumps := aPumpIds;
	bRequestMoveByDistance := TRUE;
END_IF

//getting pump factor in mL/rev and converting to uL/degrees.
rDistanceByVol[1] := aRevolutions[1] * 360;
rDistanceByVol[2] := aRevolutions[2] * 360;
rDistanceByVol[3] := aRevolutions[3] * 360;
rDistanceByVol[4] := aRevolutions[4] * 360;
rDistanceByVol[5] := aRevolutions[5] * 360;
rDistanceByVol[6] := aRevolutions[6] * 360;
rDistanceByVol[7] := aRevolutions[7] * 360;
rDistanceByVol[8] := aRevolutions[8] * 360;
rDistanceByVol[9] := aRevolutions[9] * 360;
rDistanceByVol[10] := aRevolutions[10] * 360;

//Inverting the distance based on pumps flow direction
IF aPumpDirection[1] = E_PumpDirection.Backward THEN
	rDistanceByVol[1] := rDistanceByVol[1] * -1;
END_IF
IF aPumpDirection[2] = E_PumpDirection.Backward THEN
	rDistanceByVol[2] := rDistanceByVol[2] * -1;
END_IF
IF aPumpDirection[3] = E_PumpDirection.Backward THEN
	rDistanceByVol[3] := rDistanceByVol[3] * -1;
END_IF
IF aPumpDirection[4] = E_PumpDirection.Backward THEN
	rDistanceByVol[4] := rDistanceByVol[4] * -1;
END_IF
IF aPumpDirection[5] = E_PumpDirection.Backward THEN
	rDistanceByVol[5] := rDistanceByVol[5] * -1;
END_IF
IF aPumpDirection[6] = E_PumpDirection.Backward THEN
	rDistanceByVol[6] := rDistanceByVol[6] * -1;
END_IF
IF aPumpDirection[7] = E_PumpDirection.Backward THEN
	rDistanceByVol[7] := rDistanceByVol[7] * -1;
END_IF
IF aPumpDirection[8] = E_PumpDirection.Backward THEN
	rDistanceByVol[8] := rDistanceByVol[8] * -1;
END_IF
IF aPumpDirection[9] = E_PumpDirection.Backward THEN
	rDistanceByVol[9] := rDistanceByVol[9] * -1;
END_IF
IF aPumpDirection[10] = E_PumpDirection.Backward THEN
	rDistanceByVol[10] := rDistanceByVol[10] * -1;
END_IF

//Pumps relative movement
IF bMoveDistancePumps[1] THEN
	bMoveDistancePumps[1] := NOT GVL_Motion.aPumpsRotary[1].MoveRelative(Distance := rDistanceByVol[1], Velocity := aVelocity[1], Acc := aVelocity[1], Dec := aVelocity[1]);
END_IF
IF bMoveDistancePumps[2] THEN
	bMoveDistancePumps[2] := NOT GVL_Motion.aPumpsRotary[2].MoveRelative(Distance := rDistanceByVol[2], Velocity := aVelocity[2], Acc := aVelocity[2], Dec := aVelocity[2]);
END_IF
IF bMoveDistancePumps[3] THEN
	bMoveDistancePumps[3] := NOT GVL_Motion.aPumpsRotary[3].MoveRelative(Distance := rDistanceByVol[3], Velocity := aVelocity[3], Acc := aVelocity[3], Dec := aVelocity[3]);
END_IF
IF bMoveDistancePumps[4] THEN
	bMoveDistancePumps[4] := NOT GVL_Motion.aPumpsRotary[4].MoveRelative(Distance := rDistanceByVol[4], Velocity := aVelocity[4], Acc := aVelocity[4], Dec := aVelocity[4]);
END_IF
IF bMoveDistancePumps[5] THEN
	bMoveDistancePumps[5] := NOT GVL_Motion.aPumpsRotary[5].MoveRelative(Distance := rDistanceByVol[5], Velocity := aVelocity[5], Acc := aVelocity[5], Dec := aVelocity[5]);
END_IF
IF bMoveDistancePumps[6] THEN
	bMoveDistancePumps[6] := NOT GVL_Motion.aPumpsRotary[6].MoveRelative(Distance := rDistanceByVol[6], Velocity := aVelocity[6], Acc := aVelocity[6], Dec := aVelocity[6]);
END_IF
IF bMoveDistancePumps[7] THEN
	bMoveDistancePumps[7] := NOT GVL_Motion.aPumpsRotary[7].MoveRelative(Distance := rDistanceByVol[7], Velocity := aVelocity[7], Acc := aVelocity[7], Dec := aVelocity[7]);
END_IF
IF bMoveDistancePumps[8] THEN
	bMoveDistancePumps[8] := NOT GVL_Motion.aPumpsRotary[8].MoveRelative(Distance := rDistanceByVol[8], Velocity := aVelocity[8], Acc := aVelocity[8], Dec := aVelocity[8]);
END_IF
IF bMoveDistancePumps[9] THEN
	bMoveDistancePumps[9] := NOT GVL_Motion.aPumpsRotary[9].MoveRelative(Distance := rDistanceByVol[9], Velocity := aVelocity[9], Acc := aVelocity[9], Dec := aVelocity[9]);
END_IF
IF bMoveDistancePumps[10] THEN
	bMoveDistancePumps[10] := NOT GVL_Motion.aPumpsRotary[10].MoveRelative(Distance := rDistanceByVol[10], Velocity := aVelocity[10], Acc := aVelocity[10], Dec := aVelocity[10]);
END_IF

IF NOT bMoveDistancePumps[1] AND NOT bMoveDistancePumps[2] AND NOT bMoveDistancePumps[3] AND NOT bMoveDistancePumps[4] AND NOT bMoveDistancePumps[5] AND NOT bMoveDistancePumps[6] AND NOT bMoveDistancePumps[7] AND NOT bMoveDistancePumps[8] AND NOT bMoveDistancePumps[9] AND NOT bMoveDistancePumps[10] THEN
	bRequestMoveByDistance := FALSE;
	MoveByDistance := TRUE;
	RETURN;
ELSE
	MoveByDistance := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveBySpeed" Id="{d2aaed9f-4602-43d8-9093-f5817f002503}">
      <Declaration><![CDATA[METHOD MoveBySpeed : BOOL
VAR_INPUT
	aPumpIds		: ARRAY[1..10] OF BOOL;
	aPumpDirection 	: ARRAY[1..10] OF E_PumpDirection;
	aVelocity 		: ARRAY[1..10] OF REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bRequestMoveBySpeed THEN
	MoveBySpeed := FALSE;
	bMoveVelocityPumps := aPumpIds;
	bRequestMoveBySpeed := TRUE;
END_IF

IF bMoveVelocityPumps[1] THEN
	bMoveVelocityPumps[1] := NOT GVL_Motion.aPumpsRotary[1].MoveVelocity(rVelocity := aVelocity[1], rAcc := aVelocity[1], rDec := aVelocity[1], iDirection := aPumpDirection[1]);
END_IF
IF bMoveVelocityPumps[2] THEN
	bMoveVelocityPumps[2] := NOT GVL_Motion.aPumpsRotary[2].MoveVelocity(rVelocity := aVelocity[2], rAcc := aVelocity[2], rDec := aVelocity[2], iDirection := aPumpDirection[2]);
END_IF
IF bMoveVelocityPumps[3] THEN
	bMoveVelocityPumps[3] := NOT GVL_Motion.aPumpsRotary[3].MoveVelocity(rVelocity := aVelocity[3], rAcc := aVelocity[3], rDec := aVelocity[3], iDirection := aPumpDirection[3]);
END_IF
IF bMoveVelocityPumps[4] THEN
	bMoveVelocityPumps[4] := NOT GVL_Motion.aPumpsRotary[4].MoveVelocity(rVelocity := aVelocity[4], rAcc := aVelocity[4], rDec := aVelocity[4], iDirection := aPumpDirection[4]);
END_IF
IF bMoveVelocityPumps[5] THEN
	bMoveVelocityPumps[5] := NOT GVL_Motion.aPumpsRotary[5].MoveVelocity(rVelocity := aVelocity[5], rAcc := aVelocity[5], rDec := aVelocity[5], iDirection := aPumpDirection[5]);
END_IF
IF bMoveVelocityPumps[6] THEN
	bMoveVelocityPumps[6] := NOT GVL_Motion.aPumpsRotary[6].MoveVelocity(rVelocity := aVelocity[6], rAcc := aVelocity[6], rDec := aVelocity[6], iDirection := aPumpDirection[6]);
END_IF
IF bMoveVelocityPumps[7] THEN
	bMoveVelocityPumps[7] := NOT GVL_Motion.aPumpsRotary[7].MoveVelocity(rVelocity := aVelocity[7], rAcc := aVelocity[7], rDec := aVelocity[7], iDirection := aPumpDirection[7]);
END_IF
IF bMoveVelocityPumps[8] THEN
	bMoveVelocityPumps[8] := NOT GVL_Motion.aPumpsRotary[8].MoveVelocity(rVelocity := aVelocity[8], rAcc := aVelocity[8], rDec := aVelocity[8], iDirection := aPumpDirection[8]);
END_IF
IF bMoveVelocityPumps[9] THEN
	bMoveVelocityPumps[9] := NOT GVL_Motion.aPumpsRotary[9].MoveVelocity(rVelocity := aVelocity[9], rAcc := aVelocity[9], rDec := aVelocity[9], iDirection := aPumpDirection[9]);
END_IF
IF bMoveVelocityPumps[10] THEN
	bMoveVelocityPumps[10] := NOT GVL_Motion.aPumpsRotary[10].MoveVelocity(rVelocity := aVelocity[10], rAcc := aVelocity[10], rDec := aVelocity[10], iDirection := aPumpDirection[10]);
END_IF

IF NOT bMoveVelocityPumps[1] AND NOT bMoveVelocityPumps[2] AND NOT bMoveVelocityPumps[3] AND NOT bMoveVelocityPumps[4] AND NOT bMoveVelocityPumps[5] AND NOT bMoveVelocityPumps[6] AND NOT bMoveVelocityPumps[7] AND NOT bMoveVelocityPumps[8] AND NOT bMoveVelocityPumps[9] AND NOT bMoveVelocityPumps[10] THEN
	bRequestMoveBySpeed := FALSE;
	MoveBySpeed := TRUE;
	RETURN;
ELSE
	MoveBySpeed := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveByVolume" Id="{fe2f62d1-64c9-4370-ba89-6fbe929ada5f}">
      <Declaration><![CDATA[METHOD MoveByVolume : BOOL
VAR_INPUT
	aPumpIds		: ARRAY[1..10] OF BOOL;
	aVolume 		: ARRAY[1..10] OF REAL;
	aPumpDirection 	: ARRAY[1..10] OF E_PumpDirection;
	aVelocity	 	: ARRAY[1..10] OF REAL;
END_VAR
VAR 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bRequestMoveByVol THEN
	MoveByVolume := FALSE;
	bMoveRelativePumps := aPumpIds;
	bRequestMoveByVol := TRUE;
END_IF

//getting the valves position
aValvePosition[1] := F_GetValvePosition(iValveIndex := 1);
aValvePosition[2] := F_GetValvePosition(iValveIndex := 1);
aValvePosition[3] := F_GetValvePosition(iValveIndex := 2);
aValvePosition[4] := F_GetValvePosition(iValveIndex := 2);
aValvePosition[5] := F_GetValvePosition(iValveIndex := 3);
aValvePosition[6] := F_GetValvePosition(iValveIndex := 3);
aValvePosition[7] := F_GetValvePosition(iValveIndex := 4);
aValvePosition[8] := F_GetValvePosition(iValveIndex := 4);
aValvePosition[9] := F_GetValvePosition(iValveIndex := 5);
aValvePosition[10] := F_GetValvePosition(iValveIndex := 5);

//getting the pump factor based on pump path
aPumpPath[1] := F_GetPumpPath( iValvePosition := aValvePosition[1], ePumpDirection := aPumpDirection[1]);
aPumpPath[2] := F_GetPumpPath( iValvePosition := aValvePosition[2], ePumpDirection := aPumpDirection[2]);
aPumpPath[3] := F_GetPumpPath( iValvePosition := aValvePosition[3], ePumpDirection := aPumpDirection[3]);
aPumpPath[4] := F_GetPumpPath( iValvePosition := aValvePosition[4], ePumpDirection := aPumpDirection[4]);
aPumpPath[5] := F_GetPumpPath( iValvePosition := aValvePosition[5], ePumpDirection := aPumpDirection[5]);
aPumpPath[6] := F_GetPumpPath( iValvePosition := aValvePosition[6], ePumpDirection := aPumpDirection[6]);
aPumpPath[7] := F_GetPumpPath( iValvePosition := aValvePosition[7], ePumpDirection := aPumpDirection[7]);
aPumpPath[8] := F_GetPumpPath( iValvePosition := aValvePosition[8], ePumpDirection := aPumpDirection[8]);
aPumpPath[9] := F_GetPumpPath( iValvePosition := aValvePosition[9], ePumpDirection := aPumpDirection[9]);
aPumpPath[10] := F_GetPumpPath( iValvePosition := aValvePosition[10], ePumpDirection := aPumpDirection[10]);

//getting pump factor in mL/rev and converting to uL/degrees.
rDistanceByVol[1] := F_VolumeToSteps_Path(rVolume := aVolume[1], iPumpIndex := 1, ePath :=  aPumpPath[1]);
rDistanceByVol[2] := F_VolumeToSteps_Path(rVolume := aVolume[2], iPumpIndex := 2, ePath :=  aPumpPath[2]);
rDistanceByVol[3] := F_VolumeToSteps_Path(rVolume := aVolume[3], iPumpIndex := 3, ePath :=  aPumpPath[3]);
rDistanceByVol[4] := F_VolumeToSteps_Path(rVolume := aVolume[4], iPumpIndex := 4, ePath :=  aPumpPath[4]);
rDistanceByVol[5] := F_VolumeToSteps_Path(rVolume := aVolume[5], iPumpIndex := 5, ePath :=  aPumpPath[5]);
rDistanceByVol[6] := F_VolumeToSteps_Path(rVolume := aVolume[6], iPumpIndex := 6, ePath :=  aPumpPath[6]);
rDistanceByVol[7] := F_VolumeToSteps_Path(rVolume := aVolume[7], iPumpIndex := 7, ePath :=  aPumpPath[7]);
rDistanceByVol[8] := F_VolumeToSteps_Path(rVolume := aVolume[8], iPumpIndex := 8, ePath :=  aPumpPath[8]);
rDistanceByVol[9] := F_VolumeToSteps_Path(rVolume := aVolume[9], iPumpIndex := 9, ePath :=  aPumpPath[9]);
rDistanceByVol[10] := F_VolumeToSteps_Path(rVolume := aVolume[10], iPumpIndex := 10, ePath :=  aPumpPath[10]);



//Inverting the distance based on pumps flow direction
IF aPumpDirection[1] = E_PumpDirection.Backward THEN
	rDistanceByVol[1] := rDistanceByVol[1] * -1;
END_IF
IF aPumpDirection[2] = E_PumpDirection.Backward THEN
	rDistanceByVol[2] := rDistanceByVol[2] * -1;
END_IF
IF aPumpDirection[3] = E_PumpDirection.Backward THEN
	rDistanceByVol[3] := rDistanceByVol[3] * -1;
END_IF
IF aPumpDirection[4] = E_PumpDirection.Backward THEN
	rDistanceByVol[4] := rDistanceByVol[4] * -1;
END_IF
IF aPumpDirection[5] = E_PumpDirection.Backward THEN
	rDistanceByVol[5] := rDistanceByVol[5] * -1;
END_IF
IF aPumpDirection[6] = E_PumpDirection.Backward THEN
	rDistanceByVol[6] := rDistanceByVol[6] * -1;
END_IF
IF aPumpDirection[7] = E_PumpDirection.Backward THEN
	rDistanceByVol[7] := rDistanceByVol[7] * -1;
END_IF
IF aPumpDirection[8] = E_PumpDirection.Backward THEN
	rDistanceByVol[8] := rDistanceByVol[8] * -1;
END_IF
IF aPumpDirection[9] = E_PumpDirection.Backward THEN
	rDistanceByVol[9] := rDistanceByVol[9] * -1;
END_IF
IF aPumpDirection[10] = E_PumpDirection.Backward THEN
	rDistanceByVol[10] := rDistanceByVol[10] * -1;
END_IF

//Pumps relative movement
IF bMoveRelativePumps[1] THEN
	bMoveRelativePumps[1] := NOT GVL_Motion.aPumpsRotary[1].MoveRelative(Distance := rDistanceByVol[1], Velocity := aVelocity[1], Acc := aVelocity[1], Dec := aVelocity[1]);
END_IF
IF bMoveRelativePumps[2] THEN
	bMoveRelativePumps[2] := NOT GVL_Motion.aPumpsRotary[2].MoveRelative(Distance := rDistanceByVol[2], Velocity := aVelocity[2], Acc := aVelocity[2], Dec := aVelocity[2]);
END_IF
IF bMoveRelativePumps[3] THEN
	bMoveRelativePumps[3] := NOT GVL_Motion.aPumpsRotary[3].MoveRelative(Distance := rDistanceByVol[3], Velocity := aVelocity[3], Acc := aVelocity[3], Dec := aVelocity[3]);
END_IF
IF bMoveRelativePumps[4] THEN
	bMoveRelativePumps[4] := NOT GVL_Motion.aPumpsRotary[4].MoveRelative(Distance := rDistanceByVol[4], Velocity := aVelocity[4], Acc := aVelocity[4], Dec := aVelocity[4]);
END_IF
IF bMoveRelativePumps[5] THEN
	bMoveRelativePumps[5] := NOT GVL_Motion.aPumpsRotary[5].MoveRelative(Distance := rDistanceByVol[5], Velocity := aVelocity[5], Acc := aVelocity[5], Dec := aVelocity[5]);
END_IF
IF bMoveRelativePumps[6] THEN
	bMoveRelativePumps[6] := NOT GVL_Motion.aPumpsRotary[6].MoveRelative(Distance := rDistanceByVol[6], Velocity := aVelocity[6], Acc := aVelocity[6], Dec := aVelocity[6]);
END_IF
IF bMoveRelativePumps[7] THEN
	bMoveRelativePumps[7] := NOT GVL_Motion.aPumpsRotary[7].MoveRelative(Distance := rDistanceByVol[7], Velocity := aVelocity[7], Acc := aVelocity[7], Dec := aVelocity[7]);
END_IF
IF bMoveRelativePumps[8] THEN
	bMoveRelativePumps[8] := NOT GVL_Motion.aPumpsRotary[8].MoveRelative(Distance := rDistanceByVol[8], Velocity := aVelocity[8], Acc := aVelocity[8], Dec := aVelocity[8]);
END_IF
IF bMoveRelativePumps[9] THEN
	bMoveRelativePumps[9] := NOT GVL_Motion.aPumpsRotary[9].MoveRelative(Distance := rDistanceByVol[9], Velocity := aVelocity[9], Acc := aVelocity[9], Dec := aVelocity[9]);
END_IF
IF bMoveRelativePumps[10] THEN
	bMoveRelativePumps[10] := NOT GVL_Motion.aPumpsRotary[10].MoveRelative(Distance := rDistanceByVol[10], Velocity := aVelocity[10], Acc := aVelocity[10], Dec := aVelocity[10]);
END_IF

IF NOT bMoveRelativePumps[1] AND NOT bMoveRelativePumps[2] AND NOT bMoveRelativePumps[3] AND NOT bMoveRelativePumps[4] AND NOT bMoveRelativePumps[5] AND NOT bMoveRelativePumps[6] AND NOT bMoveRelativePumps[7] AND NOT bMoveRelativePumps[8] AND NOT bMoveRelativePumps[9] AND NOT bMoveRelativePumps[10] THEN
	bRequestMoveByVol := FALSE;
	MoveByVolume := TRUE;
	RETURN;
ELSE
	MoveByVolume := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveLinearPumps" Id="{105a3340-0fa2-4a65-877a-bb5f9b418cf0}">
      <Declaration><![CDATA[METHOD MoveLinearPumps : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="StopAllPumps" Id="{34ba740c-c4d4-4e5f-b07e-c264940d9963}">
      <Declaration><![CDATA[METHOD StopAllPumps : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bRequestStopAllPumps THEN
	StopAllPumps := FALSE;
	bStopRotaryPump[1] := TRUE;
	bStopRotaryPump[2] := TRUE;
	bStopRotaryPump[3] := TRUE;
	bStopRotaryPump[4] := TRUE;
	bStopRotaryPump[5] := TRUE;
	bStopRotaryPump[6] := TRUE;
	bStopRotaryPump[7] := TRUE;
	bStopRotaryPump[8] := TRUE;
	bStopRotaryPump[9] := TRUE;
	bStopRotaryPump[10] := TRUE;
	bRequestStopAllPumps := TRUE;
END_IF

IF bStopRotaryPump[1] THEN
	bStopRotaryPump[1] := NOT GVL_Motion.aPumpsRotary[1].Stop();
END_IF
IF bStopRotaryPump[2] THEN
	bStopRotaryPump[2] := NOT GVL_Motion.aPumpsRotary[2].Stop();
END_IF
IF bStopRotaryPump[3] THEN
	bStopRotaryPump[3] := NOT GVL_Motion.aPumpsRotary[3].Stop();
END_IF
IF bStopRotaryPump[4] THEN
	bStopRotaryPump[4] := NOT GVL_Motion.aPumpsRotary[4].Stop();
END_IF
IF bStopRotaryPump[5] THEN
	bStopRotaryPump[5] := NOT GVL_Motion.aPumpsRotary[5].Stop();
END_IF
IF bStopRotaryPump[6] THEN
	bStopRotaryPump[6] := NOT GVL_Motion.aPumpsRotary[6].Stop();
END_IF
IF bStopRotaryPump[7] THEN
	bStopRotaryPump[7] := NOT GVL_Motion.aPumpsRotary[7].Stop();
END_IF
IF bStopRotaryPump[8] THEN
	bStopRotaryPump[8] := NOT GVL_Motion.aPumpsRotary[8].Stop();
END_IF
IF bStopRotaryPump[9] THEN
	bStopRotaryPump[9] := NOT GVL_Motion.aPumpsRotary[9].Stop();
END_IF
IF bStopRotaryPump[10] THEN
	bStopRotaryPump[10] := NOT GVL_Motion.aPumpsRotary[10].Stop();
END_IF

IF (*NOT bStopRotaryPump[1] AND*) NOT bStopRotaryPump[2] AND NOT bStopRotaryPump[3] AND NOT bStopRotaryPump[4] AND NOT bStopRotaryPump[5] AND NOT bStopRotaryPump[6] AND NOT bStopRotaryPump[7] AND NOT bStopRotaryPump[8] AND NOT bStopRotaryPump[9] AND NOT bStopRotaryPump[10] THEN
	bRequestStopAllPumps := FALSE;
	StopAllPumps := TRUE;
	RETURN;
ELSE
	StopAllPumps := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_AllPumpsController">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_AllPumpsController.MoveByDistance">
      <LineId Id="6" Count="87" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_AllPumpsController.MoveBySpeed">
      <LineId Id="5" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="22" Count="29" />
      <LineId Id="21" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="56" Count="3" />
      <LineId Id="55" Count="0" />
    </LineIds>
    <LineIds Name="FB_AllPumpsController.MoveByVolume">
      <LineId Id="83" Count="1" />
      <LineId Id="94" Count="2" />
      <LineId Id="194" Count="1" />
      <LineId Id="197" Count="9" />
      <LineId Id="208" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="211" Count="8" />
      <LineId Id="97" Count="1" />
      <LineId Id="220" Count="0" />
      <LineId Id="223" Count="8" />
      <LineId Id="241" Count="1" />
      <LineId Id="222" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="152" Count="1" />
      <LineId Id="155" Count="1" />
      <LineId Id="154" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="157" Count="0" />
      <LineId Id="161" Count="1" />
      <LineId Id="160" Count="0" />
      <LineId Id="164" Count="1" />
      <LineId Id="163" Count="0" />
      <LineId Id="167" Count="1" />
      <LineId Id="166" Count="0" />
      <LineId Id="170" Count="1" />
      <LineId Id="169" Count="0" />
      <LineId Id="173" Count="1" />
      <LineId Id="172" Count="0" />
      <LineId Id="176" Count="1" />
      <LineId Id="175" Count="0" />
      <LineId Id="179" Count="1" />
      <LineId Id="178" Count="0" />
      <LineId Id="109" Count="38" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_AllPumpsController.MoveLinearPumps">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_AllPumpsController.StopAllPumps">
      <LineId Id="35" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="39" Count="8" />
      <LineId Id="37" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="6" Count="28" />
      <LineId Id="5" Count="0" />
      <LineId Id="51" Count="6" />
      <LineId Id="50" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>